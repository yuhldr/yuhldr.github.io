<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python自用速查</title>
    <url>/posts/b4a9e8d8.html</url>
    <content><![CDATA[<h2 id="plt">plt</h2>
<h3 id="直线">直线</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">plt.axhline(y=yn, linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">f&#x27;pe=<span class="subst">&#123;yn&#125;</span>&#x27;</span>)</span><br><span class="line">plt.axvline(x=xn, linestyle=<span class="string">&#x27;-.&#x27;</span>, label=<span class="string">f&#x27;a=<span class="subst">&#123;xn&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="颜色循环">颜色循环</h3>
<p>将颜色循环设置为默认值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plt.gca().set_prop_cycle(None)</span><br></pre></td></tr></table></figure>
<h3 id="中文字体">中文字体</h3>
<p>字体问题，中文经常显示不出来</p>
<p>为了防止修改以后失效、防止每次使用都要设置，建议（以linux为例）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/lib/python3.11/site-packages/matplotlib/mpl-data/matplotlibrc ~/.config/matplotlib/</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.config/matplotlib/matplotlibrc 最后添加</span></span><br><span class="line"></span><br><span class="line">font.serif : FangSong</span><br><span class="line">font.family: serif</span><br><span class="line"><span class="comment"># 负号不显示</span></span><br><span class="line">axes.unicode_minus: False</span><br><span class="line">axes.formatter.use_mathtext : False</span><br></pre></td></tr></table></figure>
<p>在使用 <a
href="https://github.com/garrettj403/SciencePlots">SciencePlots</a>
时。</p>
<p>即使</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scienceplots</span><br><span class="line"></span><br><span class="line">plt.style.use([<span class="string">&#x27;science&#x27;</span>, <span class="string">&quot;no-latex&quot;</span>, <span class="string">&quot;cjk-sc-font&quot;</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，有些版本，<code>cjk-sc-font</code> 必须在最后</p>
</blockquote>
<p>还是有问题，因为
<code>scienceplots/styles/languages/cjk-sc-font.mplstyle</code>
有问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scienceplots/styles/languages/cjk-sc-font.mplstyle 修改为</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">font.serif : FangSong</span><br><span class="line">font.family: serif</span><br><span class="line"><span class="comment"># 负号不显示</span></span><br><span class="line">axes.unicode_minus: False</span><br><span class="line">axes.formatter.use_mathtext : False</span><br></pre></td></tr></table></figure>
<p><code>FangSong</code>
修改为你的字体，可以这样查看（两个引号之间的名字）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fc-list :lang=zh</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scienceplots</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.style.use([<span class="string">&#x27;science&#x27;</span>, <span class="string">&quot;no-latex&quot;</span>, <span class="string">&quot;cjk-sc-font&quot;</span>])</span><br><span class="line"></span><br><span class="line">plt.plot([-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line">plt.title(<span class="string">&quot;测试&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">r&quot;$\alpha$Aa&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="逐帧播放">逐帧播放</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    plt.clf()</span><br><span class="line">    plt.title(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    R = np.real(A[:, i]) + np.imag(A[:, i])</span><br><span class="line"></span><br><span class="line">    plt.plot((np.dot(R, A) * np.dot(R, A_))[:<span class="number">120</span>], <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    plt.pause(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="高度图">高度图</h3>
<p>三维矩阵，给一个为二维矩阵，每个格点作为颜色，画图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_height_map_2d</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;二维高度图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        matrix (_type_): _description_</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 将二维矩阵转换为NumPy数组</span></span><br><span class="line">    data = np.array(matrix)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制二维图 viridis 可以改，或者画图以后设置里可以看其他的</span></span><br><span class="line">    plt.imshow(data, cmap=<span class="string">&#x27;viridis&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>, origin=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加色谱</span></span><br><span class="line">    plt.colorbar()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置坐标轴标签</span></span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Column&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Row&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示图形</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>三维图，给一个为二维矩阵，每个格点作为这里的高度，画图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_height_map</span>(<span class="params">matrix</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;3d高度图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        matrix (_type_): _description_</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = np.array(matrix)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取矩阵的行数和列数</span></span><br><span class="line">    rows, cols = data.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建行和列的坐标</span></span><br><span class="line">    x = np.arange(<span class="number">0</span>, cols, <span class="number">1</span>)</span><br><span class="line">    y = np.arange(<span class="number">0</span>, rows, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建网格</span></span><br><span class="line">    X, Y = np.meshgrid(x, y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制高度图</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line"></span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">    ax.set_title(<span class="string">f&quot;<span class="subst">&#123;np.<span class="built_in">max</span>(matrix)&#125;</span>&quot;</span>)</span><br><span class="line">    ax.plot_surface(X, Y, data, cmap=<span class="string">&#x27;turbo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示图形</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<h2 id="多线程">多线程</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">s</span>):</span><br><span class="line">  <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">qv = np.linspace(<span class="number">134</span>, <span class="number">140</span>, <span class="number">7</span>, dtype=<span class="string">&quot;int&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> Pool(<span class="number">4</span>) <span class="keyword">as</span> p:</span><br><span class="line">    p.<span class="built_in">map</span>(test, qvs)</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/b4a9e8d8.html">https://yuhldr.github.io/posts/b4a9e8d8.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>latex相关笔记</title>
    <url>/posts/2dcfe2a6.html</url>
    <content><![CDATA[<h2 id="软件">软件</h2>
<p>不管你用的是 <code>Tex Shop</code> <code>tex Studio</code>
<code>tex Maker</code>还是 <code>vscode</code>，这些都只是
<code>IDE</code>，我们需要注意的是，除了IDE，你安装的是什么？</p>
<p>以下所有内容，仅以 <code>texlive</code> 为例，使用 <code>CTex</code>
<code>MikTex</code>等的同学，请自行安装
<code>texlive</code>，下载安装：</p>
<ul>
<li><p>对于 <code>windows</code> 以及 <code>linux</code> 电脑，直接为
<code>texlive</code></p>
<ul>
<li><a
href="https://mirrors.lzu.edu.cn/CTAN/systems/texlive/Images/texlive.iso">兰大镜像</a></li>
<li><a
href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive.iso">清华镜像</a></li>
<li><a
href="https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive.iso">中科大</a></li>
<li><a
href="https://mirrors.aliyun.com/CTAN/systems/texlive/Images/texlive.iso">阿里</a></li>
</ul></li>
<li><p>对于 <code>mac</code> 电脑，对应的是 <code>mactex</code></p>
<ul>
<li><a
href="https://mirrors.lzu.edu.cn/CTAN/systems/mac/mactex/MacTeX.pkg">兰大镜像</a></li>
<li><a
href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/mac/mactex/MacTeX.pkg">清华镜像</a></li>
<li><a
href="https://mirrors.ustc.edu.cn/CTAN/systems/mac/mactex/MacTeX.pkg">中科大</a></li>
<li><a
href="https://mirrors.aliyun.com/CTAN/systems/mac/mactex/MacTeX.pkg">阿里</a></li>
</ul></li>
</ul>
<p>安装方法，百度上一堆</p>
<blockquote>
<p>你在终端中输入 <code>latex</code>
以后显示类似如下，说明安装成功，否则自己百度修改环境变量，或重启电脑试试</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意其中的关键 TeX Live 2022</span></span><br><span class="line">This is pdfTeX, Version 3.141592653-2.6-1.40.24 (TeX Live 2022) (preloaded format=latex)</span><br><span class="line"> restricted \write18 enabled.</span><br><span class="line">**</span><br></pre></td></tr></table></figure>
<h2 id="ide">IDE</h2>
<p>不强求，自己舒服就好，但是 <code>vscode</code> 配合
<code>James-Yu.latex-workshop</code> 这个插件真的是太好用了</p>
<p>对于vscode，建议在设置（json）中自定义</p>
<blockquote>
<p>打开自定义快捷键 <code>ctrl shift P</code>，mac大概是
<code>command shift P</code>，输入
<code>settings json</code>，选择打开设置</p>
</blockquote>
<p>如果出现红色，说明你放的位置不对，这个应该放在最外层的
<code>&#123;&#125;</code> 中间，并且被添加的这部分上面有一个 <code>,</code> 或
<code>&#123;</code>，下面有一个 <code>&#125;</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;latex-workshop.latex.tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 编译工具和命令</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-synctex=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-interaction=nonstopmode&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-file-line-error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;%DOCFILE%&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;latex-workshop.latex.recipes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;bibtex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xe-&gt;xe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xe-&gt;bib-&gt;xe-&gt;xe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;bibtex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pdflatex&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;pdflatex&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latexmk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h2 id="加粗">加粗</h2>
<p>如果不是模板，自己用，更建议自定义加粗字体，其中"方正粗楷简体"几个自是自定义的加粗字体，可以看下面字体安装方法</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\setCJKfamilyfont</span>&#123;kaishubf&#125;&#123;方正粗楷简体&#125;</span><br><span class="line"><span class="keyword">\NewDocumentCommand</span><span class="keyword">\kaishubf</span>&#123;&#125;&#123;<span class="keyword">\CJKfamily</span>&#123;kaishubf&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">测试宋体</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">\textbf</span>&#123;测试宋体粗体&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">\kaishu</span>&#123;测试楷体&#125;</span><br><span class="line"><span class="comment">% &#123;\textbf&#123;测试楷体粗体&#125;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">\kaishubf</span>&#123;测试楷体自定义粗体（方正粗楷简体）&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题一">问题一</h3>
<p>常见的其实是中文加粗，在 <code>mac</code>
<code>linux</code>经常不起作用，而在 <code>windows</code>
里加粗了，但是字体变了</p>
<p>原因是，latex现在基本上取消了中文字体加粗，所以请开启
<code>伪加粗</code></p>
<p>即一般第一行为</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br></pre></td></tr></table></figure>
<p>需要加上 <code>伪加粗</code> 选项，即</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[AutoFakeBold]&#123;article&#125;</span><br></pre></td></tr></table></figure>
<p>有些已经有选项了，补充到后面即可</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[aps,prb,twocolumn,superscriptaddress,showpacs]&#123;revtex4-1&#125;</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line"><span class="keyword">\documentclass</span>[aps,prb,twocolumn,superscriptaddress,showpacs,AutoFakeBold]&#123;revtex4-1&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题二">问题二</h3>
<p>开启 <code>伪加粗</code>以后，一般情况下，再使用
<code>\textbf&#123;&#125;</code>
基本上就没问题了，但是有些时候，英文还是不起作用。</p>
<p>这个有可能是因为，你用的模板，或者默认模板里的英文字体，在你的电脑上安装的不合适，一般情况下一个字体，要包含四个格式，请看这里：<a
href="https://fonts.google.com/specimen/Andika+New+Basic">Google
Fonts</a>，这个字体包含四个文件，分别问 <code>Regular</code>
<code>Regular Italic</code> <code>Bold</code>
<code>Bold Italic</code>，也可看到，完整的字体应该包含，常规字体、加粗字体、斜体、加粗斜体。</p>
<p>所以解决方法有两种，</p>
<ul>
<li>一个是，想办法把字体安装完整，</li>
<li>另一种方法是修改为当前电脑上已经有的字体，<a
href="#字体安装">latex字体修改</a>
后面讲，windows、linux、mac是不太一样的</li>
</ul>
<h2 id="字体修改与自定义">字体修改与自定义</h2>
<h3 id="中文字体">中文字体</h3>
<blockquote>
<p>现在的latex已经支持中文了，请不要再使用<code>CTex</code> 等，直接用
<code>texlive</code>，以下默认你使用的是 <code>texlive</code></p>
</blockquote>
<p>latex一般是论文和ppt</p>
<ul>
<li>毕业论文中默认模板，一般用 <code>ctexbook</code>，而
<code>book</code> 是不支持中文的</li>
<li>常规论文一般期刊提供相应的模板，或者 <code>ctexart</code></li>
<li>答辩PPT，一般用 <code>ctexbeamer</code>，而 <code>beamer</code>
是不支持中文的</li>
</ul>
<p>全局中文字体设置</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\setCJKmainfont</span>&#123;你的字体名&#125;</span><br><span class="line"><span class="keyword">\setCJKsansfont</span>&#123;你的字体名&#125;</span><br><span class="line"><span class="keyword">\setCJKmonofont</span>&#123;你的字体名&#125;</span><br></pre></td></tr></table></figure>
<p>全局英文字体</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\setmainfont</span>&#123;你的字体名&#125;</span><br><span class="line"><span class="keyword">\setsansfont</span>&#123;你的字体名&#125;</span><br></pre></td></tr></table></figure>
<p>全局代码字体</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\setmonofont</span>&#123;你的字体名&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>你的字体名</code> 不同电脑是不一样的</p>
<ul>
<li><p>mac 找到 <code>字体册</code> 这个软件，点开准备用的字体，有一项是
<code>PostScript</code>（大概是这么拼写的，懒得去查看了），这个名字就是</p></li>
<li><p>windows，设置中搜索，字体，打开，搜索准备用的字体，然后点开，里面也有个英文名（第一个
<code>全称</code>），复制那个</p>
<figure>
<img src="../images/2022/tex/win_install_font0.png"
alt="widows查找字体名" />
<figcaption aria-hidden="true">widows查找字体名</figcaption>
</figure>
<ul>
<li><p>不要包含字形，比如 <code>regular</code> 、<code>blod</code>
等，下图中只要 <code>Andika New Basic</code></p>
<figure>
<img src="../images/2022/tex/win_install_font1.png"
alt="widows查找字体名" />
<figcaption aria-hidden="true">widows查找字体名</figcaption>
</figure></li>
<li><p>注意安装字体时，右键，<strong>为所有用户安装</strong>，<strong>不要直接双击安装</strong>！！！仅为当前用户安装是无法识别的</p>
<figure>
<img src="../images/2022/tex/win_install_font2.png"
alt="widows查找字体名" />
<figcaption aria-hidden="true">widows查找字体名</figcaption>
</figure></li>
</ul></li>
<li><p>linux <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看中文字体</span></span><br><span class="line">fc-list :lang=zh</span><br><span class="line"><span class="comment"># 查看所有字体</span></span><br><span class="line">fc-list</span><br></pre></td></tr></table></figure>
输出的每一行是一个字体，前半段是文件位置，<code>:</code> 后面（到
<code>:</code> 或者 <code>,</code>为止）就是需要的这个名字</p>
<p>比如</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/yuh/.fonts/win/times.ttf: Times New Roman:style=Regular,Normal,obyčejné,Standard,Κανονικά,Normaali,Normál,Normale,Standaard,Normalny,Обычный,Normálne,Navadno,thường,Arrunta</span><br></pre></td></tr></table></figure> 字体名字应该是 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Times New Roman</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="常用代码">常用代码</h2>
<p>这个网站挺好，<a
href="https://www.latexlive.com/">在线LaTeX公式编辑器-编辑器</a></p>
<h3 id="分栏">分栏</h3>
<blockquote>
<p>columns</p>
</blockquote>
<p>有时候左图，右文字，宽度不要写死，建议用文本宽度的多少倍代替
<code>0.6\textwidth</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;columns&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\column</span>&#123;0.7<span class="keyword">\textwidth</span>&#125;</span><br><span class="line"></span><br><span class="line">    假装我是图</span><br><span class="line"></span><br><span class="line"><span class="keyword">\column</span>&#123;0.3<span class="keyword">\textwidth</span>&#125;</span><br><span class="line"></span><br><span class="line">  文字</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;columns&#125;</span><br></pre></td></tr></table></figure>
<h3 id="公式">公式</h3>
<ul>
<li><p>简单公式</p>
<p><span class="math display">\[
  \begin{equation}
  f = m \times a
  \end{equation}
  \]</span></p>
<ul>
<li><p>带序号</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 带序号</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">f = m <span class="keyword">\times</span> a</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>不要序号 <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation*&#125;</span><br><span class="line">f = m <span class="keyword">\times</span> a</span><br><span class="line"><span class="keyword">\end</span>&#123;equation*&#125;</span><br></pre></td></tr></table></figure></p>
<p>也可以换成 <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span> f = m <span class="keyword">\times</span> a <span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>行内公式</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span>f = m <span class="keyword">\times</span> a<span class="built_in">$</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>多行公式</p></li>
</ul>
<blockquote>
<p>这里都用 aligned 实现，<code>\\</code>换行，<code>&amp;</code>
每行对齐的地方</p>
</blockquote>
<p>简单</p>
<p><span class="math display">\[
\begin{aligned}
        &amp;a=1\\
        &amp;bscw=2
\end{aligned}
\qquad c=3
\]</span></p>
<p>注意对于 <code>aligned</code>
前后<strong>不要空行</strong>，会莫名其妙错误， <code>&amp;</code>
为了左对齐</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">            <span class="built_in">&amp;</span>a=1<span class="keyword">\\</span></span><br><span class="line">            <span class="built_in">&amp;</span>bscw=2</span><br><span class="line">    <span class="keyword">\end</span>&#123;aligned&#125;</span><br><span class="line">    <span class="keyword">\qquad</span> c=3</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure>
<p>推导</p>
<p><span class="math display">\[
\begin{aligned}
        a&amp;=c+b+x\\
        &amp;=2+1+2\\
        &amp;=5
\end{aligned}
\]</span></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">  <span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">          a<span class="built_in">&amp;</span>=c+b+x<span class="keyword">\\</span></span><br><span class="line">          <span class="built_in">&amp;</span>=2+1+2<span class="keyword">\\</span></span><br><span class="line">          <span class="built_in">&amp;</span>=5</span><br><span class="line">  <span class="keyword">\end</span>&#123;aligned&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure>
<p>大括号</p>
<p><span class="math display">\[
\left\{
      \begin{aligned}
      &amp;x=\dfrac{3\pi}{2}(1+2t)\cos(\dfrac{3\pi}{2}(1+2t)), &amp;  \\
      &amp;                                                &amp; 0\leq
s\leq L,|t|\leq1.\\
      &amp;z=\dfrac{3\pi}{2}(1+2t)\sin(\dfrac{3\pi}{2}(1+2t)), &amp;
      \end{aligned}
\right.
\]</span></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\left</span><span class="keyword">\&#123;</span></span><br><span class="line">      <span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">      <span class="built_in">&amp;</span>x=<span class="keyword">\dfrac</span>&#123;3<span class="keyword">\pi</span>&#125;&#123;2&#125;(1+2t)<span class="keyword">\cos</span>(<span class="keyword">\dfrac</span>&#123;3<span class="keyword">\pi</span>&#125;&#123;2&#125;(1+2t)), <span class="built_in">&amp;</span>  <span class="keyword">\\</span></span><br><span class="line">      <span class="built_in">&amp;</span>                                                <span class="built_in">&amp;</span> 0<span class="keyword">\leq</span> s<span class="keyword">\leq</span> L,|t|<span class="keyword">\leq</span>1.<span class="keyword">\\</span></span><br><span class="line">      <span class="built_in">&amp;</span>z=<span class="keyword">\dfrac</span>&#123;3<span class="keyword">\pi</span>&#125;&#123;2&#125;(1+2t)<span class="keyword">\sin</span>(<span class="keyword">\dfrac</span>&#123;3<span class="keyword">\pi</span>&#125;&#123;2&#125;(1+2t)), <span class="built_in">&amp;</span></span><br><span class="line">      <span class="keyword">\end</span>&#123;aligned&#125;</span><br><span class="line"><span class="keyword">\right</span>.</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure>
<h3 id="图片">图片</h3>
<p>先在最开始引用相关的包</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="comment">% 为了图片不输入路径，只输入文件名</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123;&#123;figures/&#125;&#123;figure/&#125;&#123;pictures/&#125;&#123;picture/&#125;&#123;pic/&#125;&#123;pics/&#125;&#123;image/&#125;&#123;images/&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 为了可以引用子图，并且单独caption</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;floatrow&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;subfig&#125;</span><br><span class="line"><span class="keyword">\floatsetup</span>[figure]&#123;subcapbesideposition=top&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 修复上面的冲突</span></span><br><span class="line"><span class="keyword">\usepackage</span>[titles,subfigure]&#123;tocloft&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常规</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[H]</span><br><span class="line">    <span class="keyword">\includegraphics</span>[angle=0, width=0.3<span class="keyword">\textwidth</span>]&#123;图片文件名&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;解释图片，或者标题&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;test111&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>
<p>说明</p>
<ul>
<li><code>label</code>
图片的引用标识，<strong>必须唯一</strong>！，可以在引用处点击跳转，使用方法如下
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">如图<span class="keyword">\ref</span>&#123;test111&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>angle</code> 可以设置图片旋转角度</li>
<li><code>width=0.3\textwidth</code>，按照当前行的比例，设置图片宽度</li>
<li>图片可以只有文件名。路径在上面统一设置
<code>\graphicspath&#123;&#123;figures/&#125;&#123;figure/&#125;&#123;pictures/&#125;&#123;picture/&#125;&#123;pic/&#125;&#123;pics/&#125;&#123;image/&#125;&#123;images/&#125;&#125;</code></li>
<li><code>H</code> 注意 H 表示固定图片在文中的位置</li>
<li></li>
</ul>
<blockquote>
<p>子图可
<code>label</code>引用，可分别<code>caption</code>、<code>label</code></p>
</blockquote>
<p>这是一个 <span class="math inline">\(2\times 2\)</span> 的图</p>
<figure>
<img src="/images/2022/tex/subfig.png" alt="子图" />
<figcaption aria-hidden="true">子图</figcaption>
</figure>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;ctexart&#125;</span><br><span class="line"><span class="comment">% label</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="comment">% 为了图片不输入路径，只输入文件名</span></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123;&#123;figures/&#125;&#123;figure/&#125;&#123;image/&#125;&#123;images/&#125;&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;floatrow&#125;</span><br><span class="line"><span class="comment">% 为了可以引用子图，并且单独caption</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;subfig&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[H]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\subfloat</span>[这里是每个图片的说明]&#123;</span><br><span class="line">        <span class="keyword">\label</span>&#123;2018-12&#125;</span><br><span class="line">        <span class="comment">% lzu_logo_w.pdf 你的文件名</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=0.6<span class="keyword">\textwidth</span>]&#123;lzu<span class="built_in">_</span>logo<span class="built_in">_</span>w.pdf&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">\subfloat</span>[也可以为空，比如下一个]&#123;</span><br><span class="line">        <span class="keyword">\label</span>&#123;2020-04&#125;</span><br><span class="line">        <span class="comment">% lzu_logo.pdf 你的文件名</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[angle=0,width=0.2<span class="keyword">\textwidth</span>]&#123;lzu<span class="built_in">_</span>logo.pdf&#125;</span><br><span class="line">    &#125;<span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\subfloat</span>[]&#123;</span><br><span class="line">        <span class="keyword">\label</span>&#123;2019-08&#125;</span><br><span class="line">        <span class="comment">% lzu_logo_w.pdf 你的文件名</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=0.6<span class="keyword">\textwidth</span>]&#123;lzu<span class="built_in">_</span>logo<span class="built_in">_</span>w.pdf&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">\subfloat</span>[]&#123;</span><br><span class="line">        <span class="keyword">\label</span>&#123;2020-12&#125;</span><br><span class="line">        <span class="comment">% lzu_logo.pdf 你的文件名</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[angle=90, width=0.2<span class="keyword">\textwidth</span>]&#123;lzu<span class="built_in">_</span>logo.pdf&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;整个的说明&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表格">表格</h3>
<figure>
<img src="/images/2022/tex/table1.png" alt="三线表格与表格合并" />
<figcaption aria-hidden="true">三线表格与表格合并</figcaption>
</figure>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="comment">% 多行合并</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;multirow&#125;</span><br><span class="line"><span class="comment">% 三线表格</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;booktabs&#125;</span><br><span class="line"><span class="comment">% 设置全局行间距</span></span><br><span class="line"><span class="keyword">\linespread</span>&#123;1.2&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;tabular&#125;&#123;c|c|c|c|c|c&#125;</span><br><span class="line">        <span class="keyword">\toprule</span> 节点                 <span class="built_in">&amp;</span> 端口号 <span class="built_in">&amp;</span> CPU线程数              <span class="built_in">&amp;</span> 内存                    <span class="built_in">&amp;</span> 硬盘   <span class="built_in">&amp;</span> 购买年份                   <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\midrule</span> ns1                <span class="built_in">&amp;</span> 122 <span class="built_in">&amp;</span> <span class="keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;32&#125; <span class="built_in">&amp;</span> <span class="keyword">\multirow</span>&#123;4&#125;&#123;*&#125;&#123;124G&#125; <span class="built_in">&amp;</span> 798G <span class="built_in">&amp;</span> <span class="keyword">\multirow</span>&#123;4&#125;&#123;*&#125;&#123;2015年&#125; <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\cline</span>&#123;1-2&#125; <span class="keyword">\cline</span>&#123;5-5&#125; ns2 <span class="built_in">&amp;</span> 222 <span class="built_in">&amp;</span>                     <span class="built_in">&amp;</span>                       <span class="built_in">&amp;</span> 1.7T <span class="built_in">&amp;</span>                        <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\cline</span>&#123;1-3&#125; <span class="keyword">\cline</span>&#123;5-5&#125; ns3 <span class="built_in">&amp;</span> 322 <span class="built_in">&amp;</span> 48                  <span class="built_in">&amp;</span>                       <span class="built_in">&amp;</span> 1.7T <span class="built_in">&amp;</span>                        <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\cline</span>&#123;1-3&#125; <span class="keyword">\cline</span>&#123;5-5&#125; ns4 <span class="built_in">&amp;</span> 422 <span class="built_in">&amp;</span> 72                  <span class="built_in">&amp;</span>                       <span class="built_in">&amp;</span> 798G <span class="built_in">&amp;</span>                        <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span> ns5                  <span class="built_in">&amp;</span> 122 <span class="built_in">&amp;</span> 112                 <span class="built_in">&amp;</span> 2T                    <span class="built_in">&amp;</span> 15T  <span class="built_in">&amp;</span> 2023年                  <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\bottomrule</span></span><br><span class="line">    <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/images/2022/tex/table0.png" alt="多个斜线" />
<figcaption aria-hidden="true">多个斜线</figcaption>
</figure>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 多行合并</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;multirow&#125;</span><br><span class="line"><span class="comment">% 导入dashbox包，用于绘制虚线框</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;dashbox&#125;</span><br><span class="line"><span class="comment">% 表格斜线</span></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;diagbox&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">\renewcommand</span>&#123;<span class="keyword">\arraystretch</span>&#125;&#123;1.5&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;c|c|c&#125;</span><br><span class="line">    <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;<span class="keyword">\diagbox</span>[width=4.6cm,height=1.25cm]&#123;Access structures&#125;&#123;<span class="keyword">\raisebox</span>&#123;-.5<span class="keyword">\height</span>&#125;&#123;Schemes&#125;&#125;&#123;<span class="keyword">\raisebox</span>&#123;-.5<span class="keyword">\height</span>&#125;&#123;Theory&#125;&#125;&#125; <span class="built_in">&amp;</span> <span class="keyword">\multicolumn</span>&#123;2&#125;&#123;c&#125;&#123;Linear space&#125;</span><br><span class="line">    <span class="keyword">\\</span> <span class="keyword">\cline</span>&#123;2-3&#125;</span><br><span class="line">                                                                                                                                           <span class="built_in">&amp;</span> Polynomial                          <span class="built_in">&amp;</span> Lattice</span><br><span class="line">    <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">    Threshold access structures                                                                                                            <span class="built_in">&amp;</span> [1] <span class="keyword">\quad</span> <span class="keyword">\dbox</span>&#123;[3][7][14][15][17]&#125; <span class="built_in">&amp;</span> [2][35][37][36]</span><br><span class="line">    <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">    General access structures</span><br><span class="line">                                                                                                                                           <span class="built_in">&amp;</span> [10][13][28][1][12][8][9] [29]      <span class="built_in">&amp;</span> [4]</span><br><span class="line">    <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他">其他</h3>
<ul>
<li><p>图文间隔</p>
<p>有时候图片、公式等等会因为各种原因，导致前后与正文间隔较小，看着很不爽</p>
<p>减小纵向间距，正数可以增加间距</p>
<p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\vspace</span>&#123;-1cm&#125;</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\hspace</span>&#123;-1cm&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>LaTex的PPT下方显示参考文献</p>
<blockquote>
<p>因为答辩或者组会，老师可能问你这个文献年份、作者</p>
</blockquote>
<p>所以可以这么用</p>
<p>最开头添加依赖和 <code>bib</code> 参考文献</p>
<p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\RequirePackage</span>[backend=bibtex, isbn=false, url=false]&#123;biblatex&#125;</span><br><span class="line"><span class="keyword">\setbeamerfont</span>&#123;footnote&#125;&#123;size=<span class="keyword">\tiny</span>&#125;</span><br><span class="line"><span class="keyword">\addbibresource</span>&#123;database.bib&#125;</span><br></pre></td></tr></table></figure> 正文</p>
<p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;frame&#125;&#123;现有研究&#125;</span><br><span class="line">    答辩中参考文献放在每页下面，方便应对提问：比如年限、作者、期刊等</span><br><span class="line">    <span class="keyword">\begin</span>&#123;figure&#125;</span><br><span class="line">        <span class="keyword">\subfigure</span>[2nm、10-160<span class="keyword">\%</span><span class="keyword">\footfullcite</span>&#123;Zhang2011&#125;]&#123;</span><br><span class="line">            <span class="keyword">\includegraphics</span>[width=0.28<span class="keyword">\textwidth</span>]&#123;lammps.png&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">\subfigure</span>[5nm、50-350<span class="keyword">\%</span><span class="keyword">\footfullcite</span>&#123;Zhang2011&#125;]&#123;</span><br><span class="line">            <span class="keyword">\includegraphics</span>[width=0.36<span class="keyword">\textwidth</span>]&#123;lammps.png&#125;</span><br><span class="line">        &#125;<span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\subfigure</span>[20nm、25-45<span class="keyword">\%</span><span class="keyword">\footfullcite</span>&#123;Zhang2011&#125;]&#123;</span><br><span class="line">            <span class="keyword">\includegraphics</span>[width=0.4<span class="keyword">\textwidth</span>]&#123;lammps.png&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;frame&#125;</span><br></pre></td></tr></table></figure> 效果如图</p>
<figure>
<img src="/images/2022/tex/cite.png" alt="预览" />
<figcaption aria-hidden="true">预览</figcaption>
</figure></li>
</ul>
<h2 id="前后文档对比">前后文档对比</h2>
<p>命令为 <code>latexdiff</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">latexdiff old.tex new.tex &gt; diff.tex</span><br></pre></td></tr></table></figure>
<p>注意新旧文件顺序，如果差别文件比较长，中文下划线不会自动换行 可以在
<code>diff.tex</code> 文件中添加 <code>xeCJKfntef</code> 即可</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;......&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;xeCJKfntef&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模板示例">模板示例</h2>
<ul>
<li>PPT模板：SimpleBeamerLZU：<a
href="https://github.com/yuhldr/SimpleBeamerLZU">GitHub</a>、<a
href="https://gitee.com/yuhldr/SimpleBeamerLZU">Gitee</a></li>
<li>毕业论文模板：LZUThesis2020：<a
href="https://github.com/yuhldr/LZUThesis2020">GitHub</a>、<a
href="https://gitee.com/yuhldr/LZUThesis2020">Gitee</a></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/2dcfe2a6.html">https://yuhldr.github.io/posts/2dcfe2a6.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab部署在二级目录并使用Web-IDE</title>
    <url>/posts/b59d8d5e.html</url>
    <content><![CDATA[<p>在很多时候只有域名 <code>xxxx.com</code> 无法使用
<code>gitlab.xxxx.com</code> 这样的域名，所以部署在
<code>https://xxxx.com/gitlab/</code>
这里，但是这个很多小问题，而且gitlab已经支持这样的二级目录</p>
<p>以下内容需修改</p>
<ul>
<li>安装地址 <code>/data/docker_apps/gitlab-ce/</code></li>
<li>域名 <code>xxxx.com</code></li>
<li>本地部署端口 <code>208</code></li>
<li>发件人 <code>xxxx@163.com</code></li>
<li>邮箱密钥 <code>xxxxxxxxxxxxxx</code></li>
</ul>
<h2 id="使用docker部署">使用docker部署</h2>
<p>我这里把gitlab放在了 <code>/data/docker_apps/gitlab-ce/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新版是这样</span></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<p>docker-compose的部署文件如下，其中 <code>xxxx.com</code>
修改为自己的域名</p>
<blockquote>
<p>关键在于
<code>external_url 'https://xxxx.com/gitlab'</code>，这个也可以在配置里修改</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="comment"># https://hub.docker.com/r/gitlab/gitlab-ce/tags</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/gitlab/gitlab-ce:17.10.4-ce.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># xxxx.com 需要修改为真实域名</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;xxxx.com&#x27;</span></span><br><span class="line">    <span class="comment"># https://xxxx.com 需要修改为真实域名</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        external_url &#x27;https://xxxx.com/gitlab&#x27;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">icpcs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># 注意https必须443</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;208:443&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;230:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment"># 配置详细见下面</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/docker_apps/gitlab-ce/config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/docker_apps/gitlab-ce/logs:/var/log/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/docker_apps/gitlab-ce/data:/var/opt/gitlab</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">icpcs:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">10.13</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">          <span class="attr">gateway:</span> <span class="number">10.13</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>部分配置可以再次修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 与上面安装地址和映射地址有关</span></span><br><span class="line">vim /data/docker_apps/gitlab-ce/config/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>参考如下</p>
<figure class="highlight rb"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在docker里配置了，这里可以不配置 external_url</span></span><br><span class="line">external_url <span class="string">&#x27;https://xxxx.com/gitlab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone 时的地址</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;你的ip地址或者其他配置&#x27;</span></span><br><span class="line"><span class="comment"># git clone 时的端口</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="number">230</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = <span class="number">7776000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据自己的内存和cpu核心调整</span></span><br><span class="line">sidekiq[<span class="string">&#x27;concurrency&#x27;</span>] = <span class="number">10</span></span><br><span class="line">postgresql[<span class="string">&#x27;shared_buffers&#x27;</span>] = <span class="string">&quot;10GB&quot;</span></span><br><span class="line">postgresql[<span class="string">&#x27;max_worker_processes&#x27;</span>] = <span class="number">16</span></span><br><span class="line">puma[<span class="string">&#x27;per_worker_max_memory_mb&#x27;</span>] = <span class="number">2048</span></span><br><span class="line">puma[<span class="string">&#x27;worker_processes&#x27;</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件发送的发件人，这里是163邮箱 xxxx@163.com </span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;xxxx@163.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;xxxx@163.com&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_reply_to&#x27;</span>] = <span class="string">&#x27;xxxx@163.com&#x27;</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.163.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = <span class="number">465</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span> </span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">false</span> </span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span> </span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_pool&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_enabled&#x27;</span>] = <span class="literal">true</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="nginx配置">nginx配置</h2>
<p>转发二级目录，需要注意的是</p>
<blockquote>
<p>proxy_pass 传递原始URI
<code>https://localhost:208;</code>，如果后面加上了 <code>/gitlab</code>
使用Web-IDE会无法显示文件：<a
href="https://gitlab.com/gitlab-org/gitlab/-/issues/341944">看这里</a></p>
</blockquote>
<p>在nginx配置添加如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /gitlab &#123;</span><br><span class="line">    # 安全头配置</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=15552000; includeSubDomains; preload&quot; always;</span><br><span class="line">    add_header X-Download-Options noopen;</span><br><span class="line"></span><br><span class="line">    # 关键：传递原始URI，如果后面加上了 `/gitlab` 使用Web-IDE会无法显示文件</span><br><span class="line">    proxy_pass https://localhost:208;</span><br><span class="line"></span><br><span class="line">    # 请求头配置</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"></span><br><span class="line">    # 性能优化</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/undefined.html">https://yuhldr.github.io/posts/undefined.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
  </entry>
  <entry>
    <title>速度自关联函数与声子态密度</title>
    <url>/posts/685bd07.html</url>
    <content><![CDATA[<blockquote>
<p>vacf 以及 pdos 计算，以及 3 种方式对比，对比数据和代码查看 <a
href="../data/pdos/pdos2.zip">pdos2.zip</a></p>
</blockquote>
<p>其实主要是两种比较官方的方法，另一种知乎上的不推荐使用</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 12%" />
<col style="width: 19%" />
<col style="width: 53%" />
</colgroup>
<thead>
<tr>
<th>方案</th>
<th>优点</th>
<th>缺点（个人认为的）</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://zhuanlan.zhihu.com/p/390774537">知乎上的</a></td>
<td>最容易百度到的。。。</td>
<td>1. 需要保存每一步原子的速度，dump 文件很大。2.
频率范围是自己自定的，不方便、不科学。</td>
<td>我之前也整理过，<a
href="https://yuhldr.github.io/posts/d5c2f773.html">看这里</a>，但是别用了</td>
</tr>
<tr>
<td><a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a></td>
<td>大佬写的（上交大教授），有参考文献，靠谱</td>
<td>1. 需要自己编译源代码，入门门槛高。 2. C
语言，不方便批量处理，学习成本高。</td>
<td>我写了 python 版本，并且对输出的 acf 和 pdos
精准核对，完全一致。</td>
</tr>
<tr>
<td><a href="https://docs.lammps.org/compute_vacf.html">LAMMPS
自带的方案</a></td>
<td>LAMMPS 内置函数，无需输出所有时刻的所有原子的各方向速度</td>
<td>不推荐直接用，需要多次以不同 <code>compute id</code> 进行
<code>run</code>，从而进行时间参考点平均</td>
<td><a href="https://docs.lammps.org/fix_ave_correlate.html">fix
ave/correlate</a>
不能用来计算速度自关联函数，因为没有各个原子速度的平均（至少我没找到，<a
href="https://matsci.org/t/how-to-compute-vacf-using-fix-ave-correlate-in-lammps/61778">看这里</a>）。</td>
</tr>
</tbody>
</table>
<h2 id="完全理解速度自关联">完全理解速度自关联</h2>
<p>一般看到的函数是</p>
<p><span class="math display">\[
C_v​(t)=⟨v(t_0​)⋅v(t_0​+t)⟩
\]</span></p>
<blockquote>
<p>注意，这里的求和不仅仅是对不同原子的求和（平均），为了平滑和去除
<span class="math inline">\(t_0\)</span> 偶然性，还要取不同的参考原点
<span class="math inline">\(t_0\)</span> 求和（平均）。</p>
</blockquote>
<ol type="1">
<li><p>首先，你需要一组粒子的速度数据。</p>
<p>这些数据通常来自分子动力学模拟的结果，对于每个粒子，记录一系列时刻的每个原子速度向量。如果使用
LAMMPS，可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 每一步模拟都输出 `group` 为 `gPDOS` 的每个原子的速度向量</span><br><span class="line">dump 111 gPDOS custom 1 dump.vc vx vy vz</span><br><span class="line"># 必须排序</span><br><span class="line">dump_modify 111 sort id</span><br></pre></td></tr></table></figure>
<p>结果大致如下</p>
<figure>
<img src="../images/2025/lammps_dump.png"
alt="不同时刻每个原子的速度向量" />
<figcaption aria-hidden="true">不同时刻每个原子的速度向量</figcaption>
</figure></li>
<li><p>选择参考时间点</p>
<p>选择一个初始时间点 <span class="math inline">\(t_0\)</span>​
作为参考时间点。</p></li>
<li><p>计算速度自关联 <code>vacf</code>：</p>
<p>对于选定的初始时间点 <span class="math inline">\(t_0\)</span>​
和后续的时间点 t，计算速度自关联值。 公式为 <span
class="math inline">\(C_v​(t)=⟨v(t_0​)⋅v(t_0​+t)⟩\)</span>，其中 <span
class="math inline">\(v(t)v(t)\)</span> 表示时间 <span
class="math inline">\(t\)</span> 时的速度向量，<span
class="math inline">\(⟨⋅⟩\)</span> 表示对 <strong>所有粒子</strong> 和
<strong>可能的时间原点</strong> 进行平均。</p></li>
</ol>
<h2 id="具体计算">具体计算</h2>
<p>上面已经说了，通过如下内容，即可得到不同时刻不同原子的各方向速度，文件为
<code>dump.vc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 每一步模拟都输出 `group` 为 `gPDOS` 的每个原子的速度向量</span><br><span class="line">dump 111 gPDOS custom 1 dump.vc vx vy vz</span><br><span class="line"># 必须排序</span><br><span class="line">dump_modify 111 sort id</span><br><span class="line"></span><br><span class="line"># 不要run太多，保存数据巨大</span><br><span class="line">run 10000</span><br></pre></td></tr></table></figure>
<h3 id="vacf_pdos">VACF_PDOS</h3>
<p>有了上面的数据，只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vacf -dt 1e-3 -fr 0 60 -oa acf.txt -<span class="built_in">od</span> dos.txt dump.vc</span><br></pre></td></tr></table></figure>
<ul>
<li><p>其中 <code>vacf</code> 可以通过开源项目 <a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a>
编译出来，最开始提供的 <a
href="../data/pdos/pdos2.zip">压缩包pdos2.zip</a>
已经包含编译完成可以直接使用的 <code>vacf</code> 文件。</p></li>
<li><p>其中 <code>-dt 1e-3</code> 是因为前面 <code>dump</code> 通过
<code>custom 1</code>，每一步输出一次，而默认的时间步长在
<code>metal</code> 单位下为 <code>1e-3</code> 详细看 <a
href="https://docs.lammps.org/timestep.html">timestep</a>。对于时间单位
ps （<span class="math inline">\(1\times 10^{-12}
s\)</span>）正好对应频率 <code>THZ</code>（<span
class="math inline">\(1\times 10^{12} HZ\)</span>）</p></li>
<li><p><code>-fr 0 60</code> 可以只输出频率 <code>0-60</code> 的
<code>PDOS</code></p></li>
</ul>
<p>当然还有其他功能，具体参数含义看 <a
href="https://github.com/lingtikong/VACF_PDOS/blob/master/README.md">VACF_PDOS-README</a></p>
<h3 id="vacf_pdos-的-python-版本">VACF_PDOS 的 python 版本</h3>
<p><a
href="https://github.com/simongravelle/DOS-VACF-LAMMPS">DOS-VACF-LAMMPS</a>这个开源项目完全不靠谱，和
<a href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a>
完全不是一个方案</p>
<table>
<colgroup>
<col style="width: 2%" />
<col style="width: 33%" />
<col style="width: 31%" />
<col style="width: 32%" />
</colgroup>
<thead>
<tr>
<th>对比项</th>
<th><a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a></th>
<th><a
href="https://github.com/simongravelle/DOS-VACF-LAMMPS">DOS-VACF-LAMMPS</a></th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>acf</td>
<td>正反 fft，加速计算</td>
<td>np.correlate 计算</td>
<td>未具体测试一致性</td>
</tr>
<tr>
<td>dos</td>
<td>fftw_plan_r2r_1d(ntotal, fftw_in, fftw_out, FFTW_REDFT00,
FFTW_ESTIMATE);</td>
<td>np.abs(np.fft.rfft())</td>
<td>经验证，完全不一样，<code>np.abs(np.fft.rfft())</code>
会出现频谱溢出，前者不会。</td>
</tr>
</tbody>
</table>
<p>最前面的 <a href="../data/pdos/pdos2.zip">压缩包pdos2.zip</a>
中给出的方案，已经验证，与 <a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a>
完全一致</p>
<h3 id="lammps-的-compute_vacf-版本">LAMMPS 的 compute_vacf 版本</h3>
<p>根据 <a
href="https://docs.lammps.org/compute_vacf.html">compute_vacf</a>
中的</p>
<blockquote>
<p>If you want the quantities calculated by this compute to be
continuous when running from a restart file, then you should use the
same ID for this compute, as in the original run. This is so that the
fix this compute creates to store per-atom quantities will also have the
same ID, and thus be initialized correctly with time=0 atom velocities
from the restart file.</p>
</blockquote>
<p>不断更换 compute 的 <code>id</code> 并重新 <code>run</code>
可以实现不同 <code>参考时间 $t_0$</code> 的 <code>vacf</code>
计算，所以你可以这么做</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">compute 1 gPDOS vacf</span><br><span class="line">thermo_style custom step c_1[*]</span><br><span class="line">thermo 1</span><br><span class="line">run 1000</span><br><span class="line"></span><br><span class="line">compute 2 gPDOS vacf</span><br><span class="line">thermo_style custom step c_2[*]</span><br><span class="line">thermo 1</span><br><span class="line">run 1000</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>输入到 <code>log</code> 文件里的内容大概如下</p>
<figure>
<img src="/images/2025/lammps_log_compute_vacf.png" alt="log" />
<figcaption aria-hidden="true">log</figcaption>
</figure>
<p>图中每一个 run 后面跟的输出其实就是一个完整的 <code>vacf</code>
结果，但是之前所说为了避免这个时间参考点 <span
class="math inline">\(t_0\)</span> 的偶然性，需要不同的时间参考点 <span
class="math inline">\(t_0\)</span> 进行平均，也就是不断重复
<code>compute id vacf</code>（<code>id</code>需要不一样），然后把
<code>log</code> 里的这些 <code>run</code> 平均</p>
<p>不断重复 compute 和 run 建议使用 python 的 for 进行输出</p>
<p>这个方案，也与 <a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a>
的结果做了对比，效果几乎一样，详细查看前面的 <a
href="../data/pdos/pdos2.zip">压缩包pdos2.zip</a> 中的结果。</p>
<p>唯一的问题是保存的文件 log
也不算少，好处是，不会随着体系变大而变大，而且无需频繁读写、计算
vacf。</p>
<h2 id="效果对比">效果对比</h2>
<table>
<colgroup>
<col style="width: 49%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr>
<th>VACF</th>
<th>PDOS</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="/images/2025/acf.png" alt="alt text" /></td>
<td><img src="/images/2025/pdos.png" alt="alt text" /></td>
</tr>
</tbody>
</table>
<p>可以看到，我开发的 python 版本与 <a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a>
完全重合，一比一复制，我使用的 <code>LAMMPS</code>原生方案，与 <a
href="https://github.com/lingtikong/VACF_PDOS/">VACF_PDOS</a>
也基本一致。</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/685bd07.html">https://yuhldr.github.io/posts/685bd07.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>lammps</tag>
        <tag>vacf</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh代理问题</title>
    <url>/posts/d6442a48.html</url>
    <content><![CDATA[<p><code>git clone</code> 分两种情况</p>
<ul>
<li>他人的开源项目：<code>git clone https://github.com/bragefuglseth/keypunch</code></li>
<li>自己免密码的：<code>git clone git@github.com:bragefuglseth/keypunch.git</code></li>
</ul>
<h2 id="git-clone-httpsgithub.com">git clone https://github.com</h2>
<p>前一种，正常设置终端的代理就行，</p>
<p>比如在linux，<code>~/.bashrc</code> 或者 <code>~/.zshrc</code>
在中最上方添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;socks5://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已开启代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></table></figure>
<h2 id="git-clone-gitgithub.com">git clone git@github.com</h2>
<p>需要在 ~/.ssh/config 添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github</span><br><span class="line">    Port 443</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    ProxyCommand proxytunnel -p 127.0.0.1:7890 -d %h:%p</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中 <code>proxytunnel</code> 需要安装。</p>
</blockquote>
<p>网上内容要注意的是</p>
<ul>
<li><code>HostName</code> 是 <code>ssh.github.com</code> 而不是
<code>github.com</code>，</li>
<li><code>Port</code> 是 <code>443</code>，</li>
<li><code>ProxyCommand</code> 是
<code>proxytunnel</code>，所以需要安装这个 <a
href="https://github.com/proxytunnel/proxytunnel">proxytunnel</a>，linux直接用系统安装命令即可，比如<code>archlinux: sudo pacman -S proxytunnel</code></li>
<li><code>127.0.0.1:7890</code> 换成你的代理地址，并且拦截
<code>github.com</code>
后缀地址，比如对于<code>mihomo</code>或者<code>clash</code>添加如下：<code>- DOMAIN-SUFFIX,github.com,PROXY</code></li>
</ul>
<p>部分参考 <a
href="https://docs.github.com/en/authentication/troubleshooting-ssh/using-ssh-over-the-https-port#enabling-ssh-connections-over-https">Enabling
SSH connections over HTTPS</a></p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/d6442a48.html">https://yuhldr.github.io/posts/d6442a48.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>ssh git github</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>网站通过certbot免费支持https</title>
    <url>/posts/282ffae9.html</url>
    <content><![CDATA[<p>使用certbot全自动，点击这里的<a
href="https://certbot.eff.org/">certbot官网</a>，选择你的
<code>software</code> 和 <code>system</code>，我的是Nginx on Ubuntu
18，</p>
<p>不要使用
<code>sudo certbot certonly --nginx</code>，这个不能全自动</p>
<p>直接使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> certbot --nginx</span><br></pre></td></tr></table></figure>
<p>按照提示即可，可以翻译以下提示，这里不再叙述，因为他会自动选择所有的证书，直接颁发一个文件，对于多网址的简直不要太方便</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">cat</span> certbot.timer</span><br></pre></td></tr></table></figure>
<p>这个可以看到已经自动注入每天刷新两次，已经完成，细节看上面官网即可</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/282ffae9.html">https://yuhldr.github.io/posts/282ffae9.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>certbot</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu24.04使用docker</title>
    <url>/posts/f0d02c9.html</url>
    <content><![CDATA[<p>按照官网 <a
href="https://docs.docker.com/compose/install/linux/#install-using-the-repository">docker</a>
进行安装</p>
<p>这里大概列一下命令，还是要看官网，有可能有更新</p>
<h2 id="添加仓库">添加仓库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ca-certificates curl</span><br><span class="line"><span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line"><span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the repository to Apt sources:</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>
<p>激活，并开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意最新版没有 <code>docker-compose</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="版本说明">版本说明</h2>
<p>当前测试版本为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-ce/noble,now 5:26.1.1-1~ubuntu.24.04~noble amd64</span><br><span class="line">docker-compose-plugin/noble,now 2.27.0-1~ubuntu.24.04~noble amd64</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/f0d02c9.html">https://yuhldr.github.io/posts/f0d02c9.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu24.04使用docker搭建halo</title>
    <url>/posts/3d9a91dc.html</url>
    <content><![CDATA[<p>先按照 <a href="f0d02c9.html">这里配置docker</a></p>
<p>然后使用 <code>docker compose</code> 配置，更新简单</p>
<h2 id="创建docker-compose文件">创建docker-compose文件</h2>
<p>创建 <code>docker-compose.yaml</code> 文件，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">services:</span><br><span class="line">  halo:</span><br><span class="line">    <span class="comment"># https://hub.docker.com/r/halohub/halo/tags</span></span><br><span class="line">    image: halohub/halo:2.15.0</span><br><span class="line">    container_name: halo</span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      halodb:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    networks:</span><br><span class="line">      - icpcs</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/docker_apps/halo:/root/.halo2</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8095:8090&quot;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:8090/actuator/health/readiness&quot;</span>]</span><br><span class="line">      interval: 30s</span><br><span class="line">      <span class="built_in">timeout</span>: 5s</span><br><span class="line">      retries: 5</span><br><span class="line">      start_period: 30s          </span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - --spring.r2dbc.url=r2dbc:pool:postgresql://halodb/halo</span><br><span class="line">      - --spring.r2dbc.username=halo</span><br><span class="line">      <span class="comment"># PostgreSQL 的密码，请保证与下方 POSTGRES_PASSWORD 的变量值一致。</span></span><br><span class="line">      - --spring.r2dbc.password=dveerwvc</span><br><span class="line">      - --spring.sql.init.platform=postgresql</span><br><span class="line">      <span class="comment"># 外部访问地址，请根据实际需要修改</span></span><br><span class="line">      - --halo.external-url=https://icpcs.lzu.edu.cn/doc</span><br><span class="line">  halodb:</span><br><span class="line">    <span class="comment"># https://hub.docker.com/_/postgres/tags</span></span><br><span class="line">    image: postgres:15.4</span><br><span class="line">    container_name: halodb</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - icpcs</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/docker_apps/postgresql:/var/lib/postgresql/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    healthcheck:</span><br><span class="line">      <span class="built_in">test</span>: [ <span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;pg_isready&quot;</span> ]</span><br><span class="line">      interval: 10s</span><br><span class="line">      <span class="built_in">timeout</span>: 5s</span><br><span class="line">      retries: 5</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_PASSWORD=dveerwvc</span><br><span class="line">      - POSTGRES_USER=halo</span><br><span class="line">      - POSTGRES_DB=halo</span><br><span class="line">      - PGUSER=halo</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  icpcs:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">     config:</span><br><span class="line">       - subnet: 10.14.0.0/16</span><br><span class="line">         gateway: 10.14.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>注意，<code>10.14.0</code> 不要与本地网络其他ip冲突</li>
<li>版本为 <code>halohub/halo:2.15.0</code> 可以在 <a
href="https://hub.docker.com/r/halohub/halo/tags">docker-hub</a>
查看有哪些版本</li>
<li>数据库密码为 <code>dveerwvc</code> 上面出现了两次，修改的话注意</li>
<li><code>postgresql</code> 数据库版本不要轻易修改</li>
</ul>
<h2 id="创建本地数据目录">创建本地数据目录</h2>
<p>这里数据都放在了 <code>/data/docker_apps/halo</code> 和
<code>/data/docker_apps/postgresql</code>
这里，你也可以放在其他地方，但是注意上面docker-compose文件中对应的路径也要修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/docker_apps/halo</span><br><span class="line"><span class="built_in">mkdir</span> /data/docker_apps/postgresql</span><br></pre></td></tr></table></figure>
<h2 id="安装">安装</h2>
<p>在 <code>docker-compose.yaml</code> 文件所在目录，执行</p>
<blockquote>
<p>注意最新版没有 <code>docker-compose</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="更新">更新</h2>
<p>直接再次在 <code>docker-compose.yaml</code>
文件所在目录运行这个命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/3d9a91dc.html">https://yuhldr.github.io/posts/3d9a91dc.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
  </entry>
  <entry>
    <title>ubuntu24.04使用docker搭建portainer</title>
    <url>/posts/4f61fe20.html</url>
    <content><![CDATA[<p>先按照 <a href="f0d02c9.html">这里配置docker</a></p>
<p>然后使用 <code>docker compose</code> 配置，更新简单</p>
<h2 id="创建docker-compose文件">创建docker-compose文件</h2>
<p>创建 <code>docker-compose.yaml</code> 文件，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line"></span><br><span class="line">  portainer:</span><br><span class="line">    <span class="comment"># https://hub.docker.com/r/portainer/portainer-ce/tags</span></span><br><span class="line">    image: portainer/portainer-ce:2.20.2</span><br><span class="line">    container_name: portainer</span><br><span class="line">    <span class="built_in">command</span>: -H unix:///var/run/docker.sock</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 9005:9443</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">      - /data/docker_apps/portainer:/data</span><br><span class="line">    networks:</span><br><span class="line">      - icpcs</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  icpcs:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">     config:</span><br><span class="line">       - subnet: 10.16.0.0/16</span><br><span class="line">         gateway: 10.16.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>注意，<code>10.16.0</code> 不要与本地网络其他ip冲突</li>
<li>版本为 <code>portainer/portainer-ce:2.20.2</code> 可以在 <a
href="https://hub.docker.com/r/portainer/portainer-ce/tags">docker-hub</a>
查看有哪些版本</li>
<li><code>redis</code> 和 <code>mysql</code> 数据库版本不要轻易修改</li>
</ul>
<h2 id="创建本地数据目录">创建本地数据目录</h2>
<p>这里数据都放在了 <code>/data/docker_apps/portainer</code>
这里，你也可以放在其他地方，但是注意上面docker-compose文件中对应的路径也要修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/docker_apps/portainer</span><br></pre></td></tr></table></figure>
<h2 id="安装">安装</h2>
<p>在 <code>docker-compose.yaml</code> 文件所在目录，执行</p>
<blockquote>
<p>注意最新版没有 <code>docker-compose</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="更新">更新</h2>
<p>直接再次在 <code>docker-compose.yaml</code>
文件所在目录运行这个命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/4f61fe20.html">https://yuhldr.github.io/posts/4f61fe20.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
  </entry>
  <entry>
    <title>ubuntu24.04使用gitlab-runner</title>
    <url>/posts/d9e06133.html</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot;</span> | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure>
<p>注意你的域名</p>
<p><a href="https://xxx.cn/gitlab/admin/runners">runners</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br></pre></td></tr></table></figure>
<p>点右上角,<code>注册一个实例</code>,有个安装教程,按照linux那个就可以</p>
<blockquote>
<p>注意注册的url <code>xxx.xxx.xxx.xxx</code> 要改成
<code>localhost</code></p>
</blockquote>
<p>注意那个用户创建,这会导致缓存文件在
<code>/home/gitlab-runner</code>,并且新建了一个用户,所有自动化都是用这个用户执行的,也就是说,它权限很低,很安全</p>
<blockquote>
<p>注意.不能用root,因为会导致万一自动化文件文件写错,出现数据被篡改</p>
</blockquote>
<p>可以通过设置用户组,提高某个文件的执行,详细的看下面的<a
href="#使用">使用</a></p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/d9e06133.html">https://yuhldr.github.io/posts/d9e06133.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>gitlab</tag>
        <tag>gitlab-runner</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu24.04使用docker搭建nextcloud</title>
    <url>/posts/ec194a20.html</url>
    <content><![CDATA[<p>先按照 <a href="f0d02c9.html">这里配置docker</a></p>
<p>然后使用 <code>docker compose</code> 配置，更新简单</p>
<h2 id="创建docker-compose文件">创建docker-compose文件</h2>
<p>创建 <code>docker-compose.yaml</code> 文件，内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    <span class="comment"># https://hub.docker.com/_/mysql/tags</span></span><br><span class="line">    image: mysql:8.3.0</span><br><span class="line">    container_name: mysql</span><br><span class="line">    <span class="built_in">command</span>: --default-authentication-plugin=mysql_native_password</span><br><span class="line">    restart: always</span><br><span class="line">    volumes: </span><br><span class="line">      - /data/docker_apps/mysql:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_HOST=mysql</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=12345678</span><br><span class="line">      - MYSQL_DATABASE=nextcloud</span><br><span class="line">      - MYSQL_USER=oc_icpcs</span><br><span class="line">      - MYSQL_PASSWORD=dveewewrwvc</span><br><span class="line">    networks:</span><br><span class="line">      - icpcs</span><br><span class="line">  redis:</span><br><span class="line">    <span class="comment"># https://hub.docker.com/_/redis/tags</span></span><br><span class="line">    image: redis:7.2.4</span><br><span class="line">    <span class="built_in">command</span>: redis-server /etc/redis/redis.conf --appendonly <span class="built_in">yes</span> --requirepass <span class="string">&#x27;nc_redis&#x27;</span></span><br><span class="line">    restart: always</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /data/docker_apps/redis/redis.conf:/etc/redis/redis.conf</span><br><span class="line">      - /data/docker_apps/redis/data:/data</span><br><span class="line">    container_name: redis</span><br><span class="line">    networks:</span><br><span class="line">      - icpcs</span><br><span class="line">  nextcloud:</span><br><span class="line">    <span class="comment"># https://hub.docker.com/_/nextcloud/tags</span></span><br><span class="line">    image: nextcloud:29.0.0</span><br><span class="line">    container_name: nextcloud</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/docker_apps/nextcloud:/var/www/html</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - redis</span><br><span class="line">    ports:</span><br><span class="line">      - 81:80</span><br><span class="line">    links:</span><br><span class="line">      - mysql</span><br><span class="line">      - redis</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_HOST=mysql</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=12345678</span><br><span class="line">      - MYSQL_DATABASE=nextcloud</span><br><span class="line">      - MYSQL_USER=oc_icpcs</span><br><span class="line">      - MYSQL_PASSWORD=dveewewrwvc</span><br><span class="line">      - REDIS_HOST=redis</span><br><span class="line">      - REDIS_HOST_PASSWORD=nc_redis</span><br><span class="line">    networks:</span><br><span class="line">      - icpcs</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  icpcs:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">     config:</span><br><span class="line">       - subnet: 10.15.0.0/16</span><br><span class="line">         gateway: 10.15.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>注意，<code>10.15.0</code> 不要与本地网络其他ip冲突</li>
<li>版本为 <code>nextcloud:29.0.0</code> 可以在 <a
href="https://hub.docker.com/_/nextcloud/tags">docker-hub</a>
查看有哪些版本</li>
<li>数据库密码为 <code>dveewewrwvc</code>
上面出现了两次，修改的话注意</li>
<li><code>redis</code> 和 <code>mysql</code> 数据库版本不要轻易修改</li>
</ul>
<h2 id="创建本地数据目录">创建本地数据目录</h2>
<p>这里数据都放在了 <code>/data/docker_apps/mysql</code> 和
<code>/data/docker_apps/nextcloud</code> 和
<code>/data/docker_apps/redis</code>
这里，你也可以放在其他地方，但是注意上面docker-compose文件中对应的路径也要修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/docker_apps/mysql</span><br><span class="line"><span class="built_in">mkdir</span> /data/docker_apps/postgresql</span><br><span class="line"><span class="built_in">mkdir</span> /data/docker_apps/redis</span><br></pre></td></tr></table></figure>
<p>如果要绑定在二级目录，配置文件中，这两个应该起到了作用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/docker_apps/nextcloud/config/config.php</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;overwrite.cli.url&#x27;</span> =&gt; <span class="string">&#x27;https://xxxx.cn/nc/&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;overwritehost&#x27;</span> =&gt; <span class="string">&#x27;xxxx.cn&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;overwritewebroot&#x27;</span> =&gt; <span class="string">&#x27;/nc&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;overwriteprotocol&#x27;</span> =&gt; <span class="string">&#x27;https&#x27;</span>,</span><br></pre></td></tr></table></figure>
<p>同时 nginx 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/nc.conf</span><br></pre></td></tr></table></figure>
<p>下面只是部分，可能需要修改</p>
<p><code>client_max_body_size 1024m;</code> 很重要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen   82;</span><br><span class="line">    server_name  xxxx.cn;</span><br><span class="line"></span><br><span class="line">    absolute_redirect off;</span><br><span class="line">    #上传会被限制</span><br><span class="line">    client_max_body_size 1024m;</span><br><span class="line"></span><br><span class="line">    location = /.well-known/carddav &#123;</span><br><span class="line">        return 301 https://$server_name/nc/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/caldav &#123;</span><br><span class="line">        return 301 https://$server_name/nc/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/host-meta &#123;</span><br><span class="line">        return 301 https://$server_name/nc/public.php?service=host-meta;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/host-meta.json &#123;</span><br><span class="line">        return 301 https://$server_name/nc/public.php?service=host-meta-json;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/webfinger &#123;</span><br><span class="line">        return 301 https://$server_name/nc/index.php/.well-known/webfinger;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/nodeinfo &#123;</span><br><span class="line">        return 301 https://$server_name/nc/index.php/.well-known/nodeinfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /nc/ &#123;</span><br><span class="line">        #add_header Set-Cookie &quot;__Host-Prefix=true; Path=/nc; Secure; SameSite=Strict&quot;;</span><br><span class="line">        add_header Strict-Transport-Security &quot;max-age=15552000; includeSubDomains; preload;&quot; always;</span><br><span class="line">        add_header X-Download-Options noopen;        </span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">        proxy_pass     http://localhost:81/;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nextloud配置">nextloud配置</h2>
<p>初始化 <a
href="http://localhost:81">网址路径</a>，需要填写数据库用户名密码在上面文件中，即</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- MYSQL_USER=oc_icpcs</span><br><span class="line">- MYSQL_PASSWORD=dveewewrwvc</span><br></pre></td></tr></table></figure>
<p>用户名 <code>oc_icpcs</code>，密码 <code>dveewewrwvc</code>，用的
<code>mysql</code></p>
<h2 id="安装">安装</h2>
<p>在 <code>docker-compose.yaml</code> 文件所在目录，执行</p>
<blockquote>
<p>注意最新版没有 <code>docker-compose</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="更新">更新</h2>
<p>直接再次在 <code>docker-compose.yaml</code>
文件所在目录运行这个命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/ec194a20.html">https://yuhldr.github.io/posts/ec194a20.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
        <tag>nextcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu24.04搭建slurm集群</title>
    <url>/posts/49ae9ac0.html</url>
    <content><![CDATA[<blockquote>
<p>警告，ubuntu作为服务器nfs有大问题，<a
href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2062568">请看这里</a>，因此我后来使用了opensuse-leap系统，挺好用。</p>
</blockquote>
<p>不换系统也行，不要使用默认的nfs4加载，使用nfs3（如下的<code>,vers=3</code>），因为opensuse-leap系统用nfs4有时候也会出现挂载不上，暂时懒得找了，直接用nfs3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">icpcs:/opt /opt nfs defaults,vers=3 0 2</span><br></pre></td></tr></table></figure>
<p>先配置基础服务</p>
<h2 id="mysql">mysql</h2>
<blockquote>
<p>slurm 的数据库服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mysql-server</span><br><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建slurm单独的mysql用户，只本地访问即可</span></span><br><span class="line"><span class="comment"># 密码 mysql_slurm_passwd 后面用到了，注意同步修改</span></span><br><span class="line">create user <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;mysql_slurm_passwd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建另一个，这个不强制，但是建议，如果不创建，后面slurm配置需要改，所以还是创建吧</span></span><br><span class="line">create database slurm_job_db;</span><br><span class="line"></span><br><span class="line">grant all on slurm_job_db.* TO <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now mysql</span><br></pre></td></tr></table></figure>
<h2 id="munge">munge</h2>
<blockquote>
<p>slurm 的加密服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install munge</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nodes 1 14 <span class="string">&quot;scp&quot;</span> <span class="string">&quot;:/etc/munge/munge.key /etc/munge/&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; chown munge:munge /etc/munge/munge.key&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now munge.service</span><br></pre></td></tr></table></figure>
<h2 id="nfs">nfs</h2>
<blockquote>
<p>主要目录子节点共享主节点</p>
</blockquote>
<p>子节点共享 <code>/home</code> <code>/usr/local</code>
<code>/opt</code> 三个目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nfs-kernel-server</span><br></pre></td></tr></table></figure>
<p>主节点允许共享</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/home 192.168.3.0/24(rw,sync,no_subtree_check)&quot;</span> &gt;&gt; /etc/exports</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/local 192.168.3.0/24(rw,sync,no_subtree_check)&quot;</span> &gt;&gt; /etc/exports</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/opt 192.168.3.0/24(rw,sync,no_subtree_check)&quot;</span> &gt;&gt; /etc/exports</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now nfs-server.service</span><br></pre></td></tr></table></figure>
<p>子节点需要配置</p>
<p>删除旧的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; mv /opt /opt_old &amp;&amp; mkdir /opt&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; mv /home /home_old &amp;&amp; mkdir /home&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; mv /usr/local /usr/local_old &amp;&amp; mkdir /usr/local&quot;</span></span><br></pre></td></tr></table></figure>
<p>子节点，挂载新的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; echo &quot;</span>icpcs:/opt /opt nfs defaults 0 2<span class="string">&quot; &gt;&gt; /etc/fstab&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; echo &quot;</span>icpcs:/usr/local /usr/local nfs defaults 0 2<span class="string">&quot; &gt;&gt; /etc/fstab&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; echo &quot;</span>icpcs:/home /home nfs defaults 0 2<span class="string">&quot; &gt;&gt; /etc/fstab&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>警告，ubuntu作为服务器nfs有大问题，<a
href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2062568">请看这里</a>，因此我后来使用了opensuse-leap系统，挺好用。</p>
</blockquote>
<p>不换系统也行，不要使用默认的nfs4加载，使用nfs3（如下的<code>,vers=3</code>），因为opensuse-leap系统用nfs4有时候也会出现挂载不上，暂时懒得找了，直接用nfs3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">icpcs:/opt /opt nfs defaults,vers=3 0 2</span><br></pre></td></tr></table></figure>
<p>子节点，激活共享分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; systemctl daemon-reload &amp;&amp; mount -a &amp;&amp; df -Th | grep icpcs&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="nis">nis</h2>
<blockquote>
<p>子节点共享主节点的共享账户信息</p>
</blockquote>
<p>(参考这里)[https://blog.csdn.net/snow5255/article/details/131531103]</p>
<p>主节点和子节点，安装nis并激活</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nis</span><br></pre></td></tr></table></figure>
<p>主节点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只共享 `192.168.3` 开头的</span></span><br><span class="line">vim /etc/ypserv.securenets</span><br><span class="line"><span class="comment"># 注释掉如下两行</span></span><br><span class="line"><span class="comment"># 0.0.0.0		0.0.0.0</span></span><br><span class="line"><span class="comment"># ::/0</span></span><br><span class="line"><span class="comment"># 添加这一行</span></span><br><span class="line"><span class="comment"># 255.255.255.0		192.168.3.0</span></span><br><span class="line"></span><br><span class="line">vim /etc/yp.conf </span><br><span class="line"><span class="comment"># 添加如下一行</span></span><br><span class="line"><span class="comment"># domain cluster server icpcs</span></span><br><span class="line"></span><br><span class="line">vim /etc/defaultdomain</span><br><span class="line"><span class="comment"># 添加如下一行</span></span><br><span class="line"><span class="comment"># cluster</span></span><br><span class="line"><span class="comment"># 激活</span></span><br><span class="line">domainname cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活主节点服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now ypserv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">/usr/lib/yp/ypinit -m</span><br></pre></td></tr></table></figure>
<p>子节点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; echo &#x27;domain cluster server icpcs&#x27; &gt; /etc/yp.conf&quot;</span></span><br><span class="line"></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; echo &#x27;cluster&#x27; &gt; /etc/defaultdomain&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; yptest&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活节点服务</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; systemctl enable --now ypbind.service&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="slurm服务">slurm服务</h2>
<p>主节点安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install libopenmpi-dev slurmdbd slurmctld slurm-wlm-mysql-plugin slurm-wlm-ipmi-plugins</span><br></pre></td></tr></table></figure>
<p>子节点安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; apt install libopenmpi-dev slurmd slurm-wlm-mysql-plugin slurm-wlm-ipmi-plugins&quot;</span></span><br></pre></td></tr></table></figure>
<p>主节点注意，<code>/usr/lib/systemd/system/slurmctld.service</code>
中的<code>Group</code>和<code>User</code>修改为
<code>root</code>，slurm用户无法管理</p>
<p>可参考 <a
href="https://slurm.schedmd.com/configurator.html">配置</a>，这里比较新</p>
<p>配置文件可参考</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/slurm/slurm.conf</span></span><br><span class="line"></span><br><span class="line">ClusterName=cluster</span><br><span class="line">SlurmctldHost=icpcs</span><br><span class="line">MaxJobCount=10000</span><br><span class="line">MpiDefault=pmix</span><br><span class="line">ProctrackType=proctrack/cgroup</span><br><span class="line">ReturnToService=1</span><br><span class="line">SlurmctldPidFile=/var/run/slurmctld.pid</span><br><span class="line">SlurmctldPort=6817</span><br><span class="line">SlurmdPidFile=/var/run/slurmd.pid</span><br><span class="line">SlurmdPort=6818</span><br><span class="line">SlurmdSpoolDir=/var/spool/slurmd</span><br><span class="line">SlurmdUser=root</span><br><span class="line">StateSaveLocation=/var/spool/slurmctld</span><br><span class="line">SwitchType=switch/none</span><br><span class="line">TaskPlugin=task/affinity,task/cgroup</span><br><span class="line">InactiveLimit=0</span><br><span class="line">KillWait=30</span><br><span class="line">MinJobAge=300</span><br><span class="line">SlurmctldTimeout=120</span><br><span class="line">SlurmdTimeout=300</span><br><span class="line">Waittime=0</span><br><span class="line"></span><br><span class="line">DefMemPerCPU=100</span><br><span class="line"><span class="comment">#DefMemPerNode=100</span></span><br><span class="line"></span><br><span class="line">SchedulerType=<span class="built_in">sched</span>/backfill</span><br><span class="line">SelectType=<span class="keyword">select</span>/cons_tres</span><br><span class="line">SelectTypeParameters=CR_CPU_Memory</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">PriorityFlags=CALCULATE_RUNNING</span><br><span class="line">PriorityType=priority/multifactor</span><br><span class="line">PriorityWeightAge=1000</span><br><span class="line">PriorityWeightFairshare=100000</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">AccountingStorageHost=localhost</span><br><span class="line">AccountingStoragePass=/var/run/munge/munge.socket.2</span><br><span class="line">AccountingStorageType=accounting_storage/slurmdbd</span><br><span class="line">AccountingStorageUser=slurm</span><br><span class="line">JobCompHost=localhost</span><br><span class="line">JobCompLoc=slurm_job_db</span><br><span class="line">JobCompPass=mysql_slurm_passwd</span><br><span class="line">JobCompType=jobcomp/mysql</span><br><span class="line">JobCompUser=slurm</span><br><span class="line">JobAcctGatherType=jobacct_gather/cgroup</span><br><span class="line"></span><br><span class="line">SlurmctldDebug=info</span><br><span class="line">SlurmctldLogFile=/var/log/slurm/slurmctld.log</span><br><span class="line">SlurmdDebug=info</span><br><span class="line">SlurmdLogFile=/var/log/slurm/slurmd.log</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">NodeName=node[1-2] CPUs=144 Sockets=4 CoresPerSocket=18 ThreadsPerCore=2 RealMemory=1031534  State=UNKNOWN</span><br><span class="line"></span><br><span class="line">PartitionName=ptt1 Nodes=node[1-2] MaxTime=INFINITE State=UP AllowAccounts=icpcs</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/slurm/cgroup.conf</span></span><br><span class="line">CgroupAutomount=<span class="built_in">yes</span></span><br><span class="line">CgroupMountpoint=/sys/fs/cgroup</span><br><span class="line"></span><br><span class="line"><span class="comment">#the behavior of this particular plugin</span></span><br><span class="line">ConstrainCores=<span class="built_in">yes</span></span><br><span class="line">ConstrainRAMSpace=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/slurm/slurmdbd.conf</span></span><br><span class="line">ArchiveEvents=<span class="built_in">yes</span></span><br><span class="line">ArchiveJobs=<span class="built_in">yes</span></span><br><span class="line">ArchiveResvs=<span class="built_in">yes</span></span><br><span class="line">ArchiveSteps=no</span><br><span class="line">ArchiveSuspend=no</span><br><span class="line">ArchiveTXN=no</span><br><span class="line">ArchiveUsage=no</span><br><span class="line">AuthInfo=/var/run/munge/munge.socket.2</span><br><span class="line">AuthType=auth/munge</span><br><span class="line">DbdHost=localhost</span><br><span class="line">DebugLevel=info</span><br><span class="line">PurgeEventAfter=1month</span><br><span class="line">PurgeJobAfter=12month</span><br><span class="line">PurgeResvAfter=1month</span><br><span class="line">PurgeStepAfter=1month</span><br><span class="line">PurgeSuspendAfter=1month</span><br><span class="line">PurgeTXNAfter=12month</span><br><span class="line">PurgeUsageAfter=24month</span><br><span class="line">LogFile=/var/log/slurm/slurmdbd.log</span><br><span class="line">PidFile=/var/run/slurmdbd.pid</span><br><span class="line">SlurmUser=slurm</span><br><span class="line">StoragePass=mysql_slurm_passwd</span><br><span class="line">StorageType=accounting_storage/mysql</span><br><span class="line">StorageUser=slurm</span><br><span class="line">StorageHost=localhost</span><br><span class="line">StoragePort=3306</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now slurmctld.service</span><br><span class="line">systemctl <span class="built_in">enable</span> --now slurmdbd.service</span><br><span class="line"></span><br><span class="line">./nodes 1 14 <span class="string">&quot;scp&quot;</span> <span class="string">&quot;:/etc/slurm/cgroup.conf /etc/slurm/&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;scp&quot;</span> <span class="string">&quot;:/etc/slurm/slurm.conf /etc/slurm/&quot;</span></span><br><span class="line">./nodes 1 14 <span class="string">&quot;ssh&quot;</span> <span class="string">&quot; systemctl enable --now slurmd&quot;</span></span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/49ae9ac0.html">https://yuhldr.github.io/posts/49ae9ac0.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>slurm</tag>
      </tags>
  </entry>
  <entry>
    <title>archlinux使用btrfs文件系统以及休眠</title>
    <url>/posts/c33d26e5.html</url>
    <content><![CDATA[<p>具体怎么使用btrfs安装archlinux这里不细说，大概列一下命令、注意点，也可以看最后的参考文件</p>
<h2 id="使用btrfs安装系统">使用btrfs安装系统</h2>
<p>主要命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda3 /mnt</span><br><span class="line">btrfs subvolume create /mnt/@</span><br><span class="line">btrfs subvolume create /mnt/@home</span><br><span class="line">btrfs subvolume create /mnt/@usr_local</span><br><span class="line">btrfs subvolume create /mnt/@opt</span><br><span class="line">btrfs subvolume create /mnt/@swap</span><br><span class="line">btrfs subvolume create /mnt/@var</span><br><span class="line"></span><br><span class="line"><span class="comment"># /var 仅用写时复制</span></span><br><span class="line">chattr +C /mnt/@var</span><br><span class="line">chattr +C /mnt/@swap</span><br><span class="line"></span><br><span class="line">umont /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount /dev/sda3 /mnt -o subvol=@</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/boot</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/home</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/var</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br><span class="line">mount /dev/sda3 /mnt/home -o subvol=@home</span><br><span class="line">mount /dev/sda3 /mnt/var -o subvol=@var</span><br><span class="line">mount /dev/sda3 /mnt/swap -o subvol=@swap</span><br><span class="line">lsblk                     <span class="comment"># 检查挂载情况</span></span><br></pre></td></tr></table></figure>
<p>一般安装系统时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加了
<code>compress=zstd,</code>可以支持压缩，节省空间，但是⚠️不建议使用压缩，会导致vscode、idea等出现问题，无法实时显示文件变动等</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span></span><br><span class="line"><span class="comment"># /dev/nvme0n1p5</span></span><br><span class="line">UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0	/         	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=256,subvol=/@	0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># /dev/nvme0n1p1 LABEL=SYSTEM_DRV</span></span><br><span class="line">UUID=6E26-4BAA      	/boot      	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro	0 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># /dev/nvme0n1p5</span></span><br><span class="line">UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0	/home     	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=257,subvol=/@home	0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># /dev/nvme0n1p5</span></span><br><span class="line">UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0	/var      	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=258,subvol=/@var	0 0</span><br><span class="line">UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0	/swap      	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=264,subvol=/@swap	0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># /dev/nvme0n1p5</span></span><br><span class="line">UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0	/opt      	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=259,subvol=/@opt	0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># /dev/nvme0n1p5</span></span><br><span class="line">UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0	/usr/local	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=261,subvol=/@usr_local	0 0</span><br></pre></td></tr></table></figure>
<p>如果手动添加挂载，注意每一条中的
<code>subvolid=264,subvol=/@opt</code> 对应</p>
<p>如下可以看到id <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> btrfs subvolume list /mnt</span><br></pre></td></tr></table></figure></p>
<h3 id="注意点">注意点</h3>
<ul>
<li>修改 <code>mkinitcpio.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/mkinitcpio.conf</span><br></pre></td></tr></table></figure>
<p>在 <code>MODULES=()</code> 中添加修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MODULES=(btrfs)</span><br></pre></td></tr></table></figure>
<ul>
<li>内核参数</li>
</ul>
<p>对于 bootctl 必须要有如下类似代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">options root=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 rw rootflags=subvol=/@  quiet splash</span><br></pre></td></tr></table></figure>
<h3 id="bootctl启动">bootctl启动</h3>
<p>我使用 <code>bootctl</code> 启动</p>
<p>就是不想要 <code>grub</code>，注意双系统 efi 分区大一些，方便就一个
<code>/boot</code>，<code>efi</code> 直接挂载在 <code>/boot</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> bootctl install</span><br></pre></td></tr></table></figure>
<p>配置文件为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /boot/loader/entries/arch-boot.conf</span><br><span class="line">title arch-boot</span><br><span class="line">linux vmlinuz-linux</span><br><span class="line">initrd initramfs-linux.img</span><br><span class="line">initrd intel-ucode.img</span><br><span class="line">options root=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 rw rootflags=subvol=/@ resume=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 resume_offset=30305772 quiet splash</span><br></pre></td></tr></table></figure>
<p>其中 <code>86f86555-c1c5-4a78-9d77-b0e4b16c7be0</code> 出现两次</p>
<ul>
<li><p>启动必需</p>
<p><code>root=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 rw rootflags=subvol=/@</code></p></li>
<li><p>休眠必需</p>
<p><code>resume=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 resume_offset=30305772</code></p></li>
</ul>
<p>而这一串数字，是 <code>btrfs</code> 系统的分区 <code>uuid</code></p>
<p>可以通过以下查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk -f</span><br></pre></td></tr></table></figure>
<p>再更新即可生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> bootctl update</span><br></pre></td></tr></table></figure>
<p>查看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> bootctl status</span><br><span class="line"><span class="comment"># sudo bootctl list</span></span><br></pre></td></tr></table></figure>
<p>临时启动另一个系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># auto-windows 是在 sudo bootctl list 中找到的 `id`</span></span><br><span class="line"><span class="built_in">sudo</span> bootctl set-oneshot auto-windows</span><br></pre></td></tr></table></figure>
<p>启动屏幕</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S plymouth</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 initramfs</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/mkinitcpio.conf</span><br><span class="line"><span class="comment"># 添加 resume 参数，必须在 filesystems 之后</span></span><br><span class="line"><span class="comment"># 我的如下，仅作参考</span></span><br><span class="line">HOOKS=(base udev plymouth autodetect modconf kms keyboard keymap consolefont block filesystems resume fsck)</span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line"><span class="built_in">sudo</span> mkinitcpio -P</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/388400709">Archlinux 安装简记
Xfce + Btrfs 2021.07</a></li>
<li><a href="https://wiki.archlinuxcn.org/wiki/Btrfs">Btrfs - Arch Linux
中文维基</a></li>
</ul>
<h2 id="休眠">休眠</h2>
<p>指的是，断电（关机），也能打开就使用，恢复之前的一切</p>
<p>需要交换空间 <code>swap</code> 也就是上面预留了
<code>/@swap</code>，并且 <code>/etc/fstab</code> 挂载了
<code>/swap</code></p>
<h3 id="swap文件">swap文件</h3>
<blockquote>
<p>注意</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount /dev/nvme0n1p4 /mnt/</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> btrfs subvolume create /mnt/@swap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放置写时复制</span></span><br><span class="line"><span class="built_in">sudo</span> chattr +C /mnt/@swap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看subvolid</span></span><br><span class="line"><span class="built_in">sudo</span> btrfs subvolume list /mnt</span><br><span class="line"></span><br><span class="line">UUID=你的<span class="built_in">id</span>	/swap      	btrfs     	rw,relatime,ssd,discard=async,space_cache=v2,subvolid=你刚才看到的subvolid,subvol=/@swap	0 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> mount -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我内存32g,所以给了36g，有些地方说两倍，但我不想</span></span><br><span class="line"><span class="comment"># 因为官方文件说，即使swap比内存小，成功休眠的可能性仍然很大。</span></span><br><span class="line"><span class="built_in">sudo</span> btrfs filesystem mkswapfile --size 36g --uuid clear /swap/swapfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line"><span class="built_in">sudo</span> swapon /swap/swapfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置fstab</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/swap/swapfile none swap defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要 btrfs-progs</span></span><br><span class="line"><span class="built_in">sudo</span> pacman -S btrfs-progs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查偏移值，看到一个数字30305772(每个人不一样)，</span></span><br><span class="line"><span class="comment"># 也就是用在上方内核参数 `resume_offset=30305772`</span></span><br><span class="line"><span class="built_in">sudo</span> btrfs inspect-internal map-swapfile -r /swap/swapfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意内核参数，参考上方 bootctl配置</span></span><br><span class="line"><span class="comment"># 一般是：resume=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 resume_offset=30305772</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 initramfs</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/mkinitcpio.conf</span><br><span class="line"><span class="comment"># 添加 resume 参数，必须在 filesystems 之后</span></span><br><span class="line"><span class="comment"># 我的如下，仅作参考</span></span><br><span class="line">HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block filesystems resume fsck)</span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line"><span class="built_in">sudo</span> mkinitcpio -P</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为我不想交换空间被使用，我只想作为休眠</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;vm.swappiness=10&quot;</span> &gt; /etc/sysctl.d/99-swappiness.conf</span><br></pre></td></tr></table></figure>
<p>修改swap文件大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> swapoff /swap/swapfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /swap/swapfile</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> btrfs filesystem mkswapfile --size 36g --uuid clear /swap/swapfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示偏移量</span></span><br><span class="line"><span class="built_in">sudo</span> btrfs inspect-internal map-swapfile -r /swap/swapfile</span><br><span class="line"><span class="comment"># 注意更改偏移量</span></span><br><span class="line"><span class="built_in">sudo</span> vim /boot/loader/entries/arch-boot.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 resume_offset=34022656</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="休眠方式">休眠方式</h3>
<ul>
<li>手动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl hibernate</span><br></pre></td></tr></table></figure>
<ul>
<li>电源键</li>
</ul>
<p>对于 <code>gnome45</code>
在设置-电源，最后有一个，<code>电源按钮行为</code>，选中休眠即可</p>
<p>或者按照下面的</p>
<ul>
<li>修改 logind.conf</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/logind.conf</span><br></pre></td></tr></table></figure>
<p>找到 <code>HandleLidSwitch</code> 这几行，取消注释
<code>#</code>，修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HandleLidSwitch=hibernate</span><br><span class="line">HandleLidSwitchExternalPower=hibernate</span><br></pre></td></tr></table></figure>
<p>分别为：没有充电器时合上盖子、插上充电器时合上盖子</p>
<p>点击电源键同理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HandlePowerKey=hibernate</span><br><span class="line">HandlePowerKeyLongPress=hibernate</span><br></pre></td></tr></table></figure>
<p>注意，还需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>然后重启才生效</p>
<h3 id="参考-1">参考</h3>
<ul>
<li><a
href="https://wiki.archlinuxcn.org/wiki/Btrfs#交换文件">Btrfs-交换文件</a></li>
<li><a
href="https://wiki.archlinuxcn.org/wiki/%E7%94%B5%E6%BA%90%E7%AE%A1%E7%90%86/%E6%8C%82%E8%B5%B7%E4%B8%8E%E4%BC%91%E7%9C%A0">电源管理/挂起与休眠</a></li>
<li><a href="https://sspai.com/post/78916">现代化的 Archlinux
安装，Btrfs、快照、休眠以及更多</a></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/c33d26e5.html">https://yuhldr.github.io/posts/c33d26e5.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>archlinux</tag>
        <tag>btrfs</tag>
        <tag>hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>gnome40扩展推荐</title>
    <url>/posts/52e60843.html</url>
    <content><![CDATA[<h2 id="当前在用">当前在用</h2>
<blockquote>
<p>2024-01-05</p>
</blockquote>
<h3 id="电池">电池</h3>
<ul>
<li><p><a
href="https://github.com/maniacx/Battery-Health-Charging">Battery Health
Charging</a>：充电禁止最大值</p></li>
<li><p><a
href="https://github.com/halfmexican/battery-usage-wattmeter-extension">Battery
Usage Wattmeter</a>：耗电功率</p></li>
<li><p><a href="https://github.com/pomoke/battery_time">Battery
time</a>：电池剩余使用时间</p></li>
</ul>
<h3 id="右上角显示图标">右上角显示图标</h3>
<p><a
href="https://extensions.gnome.org/extension/615/appindicator-support/">AppIndicator
and KStatusNotifierItem Support</a></p>
<blockquote>
<p>gnome40 以后，右上角的图标看不到了</p>
</blockquote>
<h3 id="状态栏-dock-等透明">状态栏 dock 等透明</h3>
<p><a href="https://github.com/aunetx/blur-my-shell">Blur my
Shell</a></p>
<h3 id="桌面图标">桌面图标</h3>
<p><a href="https://gitlab.com/smedius/desktop-icons-ng">Gtk4 Desktop
Icons NG (DING)</a></p>
<h3 id="显示网速cpu内存等">显示网速、cpu、内存等</h3>
<p><a href="https://github.com/fflewddur/tophat">tophat</a></p>
<h3 id="下拉终端">下拉终端</h3>
<p><a
href="https://extensions.gnome.org/extension/3780/ddterm/">ddterm</a></p>
<blockquote>
<p>能用 js 写这么复杂的东西也是服了，我已经参与它的中文翻译</p>
</blockquote>
<h3 id="剪贴板">剪贴板</h3>
<p><a href="https://extensions.gnome.org/extension/5278/pano/">Pano -
Clipboard Manager</a></p>
<blockquote>
<p>这个是真的离谱，基本上模仿 mac 上的 paster
开发的，开源，有能力可以贡献代码</p>
</blockquote>
<p>注意依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S libgda6</span><br></pre></td></tr></table></figure>
<p>fcitx5 自带的剪贴板，也挺还好用</p>
<h3 id="输入法">输入法</h3>
<blockquote>
<p>输入法更美观</p>
</blockquote>
<p><a
href="https://github.com/wengxt/gnome-shell-extension-kimpanel">Input
Method Panel</a></p>
<h3 id="下面图标栏-dock">下面图标栏 dock</h3>
<p><a
href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to
Dock</a></p>
<h3 id="农历">农历</h3>
<p><a
href="https://extensions.gnome.org/extension/675/lunar-calendar/">Lunar
Calendar 农历</a></p>
<p>注意说明中的下载并且运行安装</p>
<p><a
href="https://gitlab.gnome.org/Nei/ChineseCalendar/-/archive/20240107/ChineseCalendar-20240107.tar.gz">ChineseCalendar</a></p>
<h3 id="kde-connect">kde-connect</h3>
<p><a
href="https://extensions.gnome.org/extension/1319/gsconnect/">GSConnect</a></p>
<h3 id="bing-壁纸">bing 壁纸</h3>
<p><a
href="https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/">Bing
Wallpaper</a></p>
<h3 id="天气">天气</h3>
<p><a href="https://github.com/CleoMenezesJr/weather-oclock">Weather
O'Clock</a></p>
<h3 id="主题">主题</h3>
<h4 id="gtk3-与-gtk4-主题统一">gtk3 与 gtk4 主题统一</h4>
<p>直接用这个吧，是个软件：<a
href="https://github.com/lassekongo83/adw-gtk3">adw-gtk3</a></p>
<h4 id="窗口圆角">窗口圆角</h4>
<blockquote>
<p>vscode rustdesk 等，尖角与 gtk4 不统一</p>
</blockquote>
<p><a
href="https://github.com/flexagoon/rounded-window-corners">rounded-window-corners</a></p>
<h4 id="本地主题">本地主题</h4>
<blockquote>
<p>gtk3 与 gtk4 统一以后，不用也挺好</p>
</blockquote>
<p><a href="https://extensions.gnome.org/extension/19/user-themes/">User
Themes</a></p>
<p>主题推荐这个，作者很热情：<a
href="https://github.com/vinceliuice/Orchis-theme">GitHub -
vinceliuice/Orchis-theme</a></p>
<h3 id="最大化隐藏-title">最大化隐藏 title</h3>
<p><a href="https://gitlab.gnome.org/tuxor1337/hidetopbar">Hide Top
Bar</a></p>
<h2 id="其他">其他</h2>
<h3 id="颜色拾取">颜色拾取</h3>
<p><a
href="https://extensions.gnome.org/extension/3396/color-picker/">color-picker</a></p>
<blockquote>
<p>随便拾取屏幕上颜色</p>
</blockquote>
<h3 id="更新提示">更新提示</h3>
<p><a
href="https://extensions.gnome.org/extension/1010/archlinux-updates-indicator/">Arch
Linux Updates Indicator</a></p>
<p>注意依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S pacman-contrib gnome-menus</span><br></pre></td></tr></table></figure>
<h3 id="systemctl-服务管理">systemctl 服务管理</h3>
<p><a
href="https://extensions.gnome.org/extension/4174/systemd-manager/">Systemd
Manager</a></p>
<blockquote>
<p>如果你没听说过 <code>systemctl</code>
直接忽略这个吧，啊啊啊，这个是真的方便</p>
</blockquote>
<h2 id="暂时不想用">暂时不想用</h2>
<h3 id="面板图标排序">面板图标排序</h3>
<p><a
href="https://extensions.gnome.org/extension/4356/top-bar-organizer/">Top
Bar Organizer</a></p>
<p>上面面板图标太多？，用他排序，但是好像挺多
bug，比如只能看到系统指示器、以及 extensions
扩展指示器，第三方应用不行</p>
<h2 id="过时">过时</h2>
<blockquote>
<p>gnome45 2024-01-05</p>
</blockquote>
<h3 id="增大最大化面积">增大最大化面积</h3>
<p><a
href="https://extensions.gnome.org/extension/1732/gtk-title-bar/">GTK
Title Bar</a></p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/52e60843.html">https://yuhldr.github.io/posts/52e60843.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>linux环境变量</title>
    <url>/posts/289d0c5f.html</url>
    <content><![CDATA[<p>最简单的，我现在不想使用系统配置的 <code>PATH</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消管理员添加的</span></span><br><span class="line"><span class="built_in">unset</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="comment"># export LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="comment"># export LD_LIBRARY_PATH=$HOME/.local/lib64:$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<p>这样一般就可以了，注释的不用管，添加到 <code>~/.bashrc</code> 或者
<code>~/.zshrc</code></p>
<h2 id="openmpi">openmpi</h2>
<p>比如 fedora 的openmpi通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf installl openmpi openmpi-devel</span><br></pre></td></tr></table></figure>
<p>安装在了 <code>lm /usr/lib64/openmpi</code></p>
<p>哪有这么安装的。。。服了，还是archlinux好</p>
<p>这时候输入 <code>which mpirun</code> 找不到，配置下面的以后，ok</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OPENMPI_HOME=/usr/lib64/openmpi</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$OPENMPI_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$OPENMPI_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$OPENMPI_HOME</span>/lib:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line"><span class="comment">#export C_INCLUDE_PATH=$OPENMPI_HOME/include:$C_INCLUDE_PATH</span></span><br><span class="line"><span class="comment">#export CPLUS_INCLUDE_PATH=$OPENMPI_HOME/include:$CPLUS_INCLUDE_PATH</span></span><br></pre></td></tr></table></figure>
<h2 id="lammps">LAMMPS</h2>
<p>我不想把它编译到 <code>HOME</code> 里，我也不想编译到
<code>/usr</code>，因为卸载不方便</p>
<p>我更新在 <a href="./320.html">Linux系统源码编译安装LAMMPS</a>
了，直接看吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ************** LAMMPS **************</span></span><br><span class="line"><span class="built_in">export</span> LAMMPS_HOME=/opt/LAMMPS/apps</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$LAMMPS_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib64:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$LAMMPS_HOME</span>/lib/python3.10/site-packages:<span class="variable">$PYTHONPATH</span> </span><br><span class="line"><span class="comment"># ************************************</span></span><br></pre></td></tr></table></figure>
<p>注意的是，查看当前 python 的路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.path)</span><br></pre></td></tr></table></figure>
<p>一般如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;/opt/LAMMPS/apps/lib/python3.10/site-packages&#x27;</span>, <span class="string">&#x27;/usr/lib64/python310.zip&#x27;</span>, <span class="string">&#x27;/usr/lib64/python3.10&#x27;</span>, <span class="string">&#x27;/usr/lib64/python3.10/lib-dynload&#x27;</span>, <span class="string">&#x27;/home/yuhang/.local/lib/python3.10/site-packages&#x27;</span>, <span class="string">&#x27;/usr/lib64/python3.10/site-packages&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.10/site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><code>'/opt/LAMMPS/apps/lib/python3.10/site-packages'</code>
这个是自己加的</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/289d0c5f.html">https://yuhldr.github.io/posts/289d0c5f.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>lammps</tag>
        <tag>openmpi</tag>
        <tag>linux</tag>
        <tag>path</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网与打印机配置</title>
    <url>/posts/5401e6fb.html</url>
    <content><![CDATA[<p>自习室里有以下网络设备 - 几个交换机 - 一个小米的路由器 -
两台惠普打印机 -
几十台电脑（有台式机、笔记本；系统有mac、linux、windows）</p>
<blockquote>
<p>目的：这些电脑无需任何设置，全部直接连接到这两台打印机</p>
</blockquote>
<blockquote>
<p>补充说明，直接把小米路由器作为最上面即可。。。之前是因为有些人连了墙上其他的网线，闭环了</p>
</blockquote>
<h2 id="交换机设置">交换机设置</h2>
<p>这个一般不用改，标准交换就行，这个指的是，每个连上来的网线都会交给网络中心自动分配ip，每个电脑都需要自己认证，直接连接这几个交换机的所有设备，可以互相发现</p>
<h2 id="路由器设置">路由器设置</h2>
<p>我这里没有把路由器关联上，因为很多人的电脑没有网卡，如果把打印机放在路由器自己形成的196.的局域网，其他直接连接交换机的设备就连不上了（突然想到，或者我能不能把墙上的网线直接连接到路由器的wan口，其他交换机都放在路由器的lan口？不管了，不想改了【我最后还是按照这个改了，我真睿智。。。。】）</p>
<h2 id="打印机设置">打印机设置</h2>
<p>首先，自习室的网络需要登录认证才能联网，hplip
<code>打印机无法连接到外网</code></p>
<ul>
<li>打印机使用网线直接连接到交换机上</li>
<li>打印机设置里关掉ipv6</li>
<li>ipv4分配方式选择“自动”，不要 DHCP</li>
</ul>
<p>这时候，因为没法认证，打印机上会显示现在ip是 <code>169.254</code>
开头的ip，这个是为无法联网的设备分配的ip，不再一个局域网下面的设备ping不通</p>
<p>这里解释一下打印机里， - <code>Wi-Fi Direct</code>
，这个指的是连接打印机自己的热点，就可以连接到打印机，不建议这个，直接关了就行。
- 无线配置，也关了吧，没有网线稳定，也不能与网线同时存在</p>
<h2 id="电脑">电脑</h2>
<p>这时候其实在windows10或者11的设置里，设备管理，打印机，可以直接添加，就能看到打印机，不能的话，重启</p>
<p>连接上以后（还是不连接打印机就行，我记不清了）直接在电脑浏览器输入在打印机看到的
<code>169.254.</code> 开头的的ip，可以看到打印机的管理页面。</p>
<figure>
<img src="/images/2023/hplip_print.png" alt="惠普打印机管理页面" />
<figcaption aria-hidden="true">惠普打印机管理页面</figcaption>
</figure>
<p>我个人建议修改这个名字，好记一些：下图中几个 <code>color3008</code>
的名字，尤其是 <code>Bonjour</code></p>
<figure>
<img src="/images/2023/hplip_print_net.png" alt="设备名字" />
<figcaption aria-hidden="true">设备名字</figcaption>
</figure>
<h3 id="linux">linux</h3>
<p>ubuntu系统在设置打印里，一般也能直接看到，浏览器打开ip可以管理打印机，但是archlinux不能，其他系统参考下面的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">avahi-browse -a -v -r</span><br></pre></td></tr></table></figure>
<p>可以看到局域网下面的设备，这个是因为我的这个打印机支持
<code>LLMNR</code>，archlinux当前版本默认也支持，能看到打印机的ip，但是你会发现
<code>ping</code> 不通这个 <code>169.254.</code> 开头的的ip</p>
<p>这是因为 archlinux route 没有
<code>169.254.</code>，你可以这样查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip route show </span><br></pre></td></tr></table></figure>
<p>如果没有 <code>169.254.</code> 开头的的ip，你可以这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ip route add 169.254.0.0/16 dev enp4s0</span><br></pre></td></tr></table></figure>
<p>注意，<code>enp4s0</code>
大家的名字不一样，<code>ip route show</code>
第一行，<code>dev enp4s0 proto dhcp</code> 其中 <code>enp4s0</code>
就是</p>
<p>然后 <code>ping</code> 打印机的 <code>ip</code> 就可以了</p>
<p>如果是gnome桌面，这时候打开设置-打印机，就可以看到了</p>
<figure>
<img src="/images/2023/gnome-print.png" alt="Gnome打印机" />
<figcaption aria-hidden="true">Gnome打印机</figcaption>
</figure>
<h3 id="avahi-browse">avahi-browse</h3>
<p>前面这个命令输出很多信息，你可以这样减少无用信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">avahi-browse -at | grep -i printer</span><br></pre></td></tr></table></figure>
<p>输出类似如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ enp4s0 IPv4 print3008        Secure Internet Printer <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 color3008        Secure Internet Printer <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 print3008        Internet Printer     <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 color3008        Internet Printer     <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 print3008        UNIX Printer         <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 color3008        UNIX Printer         <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 print3008        PDL Printer          <span class="built_in">local</span></span><br><span class="line">+ enp4s0 IPv4 color3008        PDL Printer          <span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>这里也会包含刚才的网卡名字 <code>enp4s0</code></p>
<p>然后我查看 <code>color3008</code> 的ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">avahi-resolve -n color3008.local</span><br></pre></td></tr></table></figure>
<p>注意后面加了 <code>.local</code></p>
<h2 id="cups">cups</h2>
<p>一般linux里用的都是cups管理打印机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status cups</span><br></pre></td></tr></table></figure>
<p>如果看到绿色的 <code>active (running)</code>，说明安装并启动成功</p>
<p>浏览器打开 <a
href="http://localhost:631/">cups管理</a>，直接添加就行，密码是现在登录的用户和密码</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/5401e6fb.html">https://yuhldr.github.io/posts/5401e6fb.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cups</tag>
        <tag>hplip</tag>
        <tag>打印机</tag>
        <tag>局域网</tag>
      </tags>
  </entry>
  <entry>
    <title>复数与矩阵</title>
    <url>/posts/af3ac84b.html</url>
    <content><![CDATA[<h2 id="矩阵">矩阵</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">3</span></span><br><span class="line">a = np.array([[<span class="number">1</span> + <span class="number">2j</span>, <span class="number">3</span> - <span class="number">4j</span>], [<span class="number">5</span> + <span class="number">6j</span>, <span class="number">7</span> - <span class="number">8j</span>]])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每个标题可以点，维基百科有图、甚至动图，详细介绍</p>
</blockquote>
<h3 id="转置"><a
href="https://zh.wikipedia.org/zh-hans/%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5">转置</a></h3>
<blockquote>
<p>行变列，列变行，一般在右上角标注 <span
class="math inline">\(^T\)</span> 表示</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_zz = np.transpose(s)</span><br></pre></td></tr></table></figure>
<h3 id="共轭"><a
href="https://zh.wikipedia.org/wiki/%E5%85%B1%E8%BD%AD">共轭</a></h3>
<blockquote>
<p>这个是对复数的，就是把复数的复数部分，变成相反数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_ge = np.conj(s)</span><br></pre></td></tr></table></figure>
<h3 id="余子式"><a
href="https://zh.wikipedia.org/zh-hans/%E9%A4%98%E5%9B%A0%E5%AD%90%E7%9F%A9%E9%99%A3">余子式</a></h3>
<blockquote>
<p>除去这个元素所在行、所在列 剩下的矩阵行列式</p>
</blockquote>
<h3 id="行列式"><a
href="https://zh.wikipedia.org/zh-hans/%E8%A1%8C%E5%88%97%E5%BC%8F">行列式</a></h3>
<p>对于二维，交叉相乘相减，对于三维，选一行或者一列，这一行 “每个元素”
分别乘以 它的余子式，然后求和，以此类推</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">det_A = np.linalg.det(A)</span><br></pre></td></tr></table></figure>
<h3 id="单位矩阵"><a
href="https://zh.wikipedia.org/zh-hans/%E5%8D%95%E4%BD%8D%E7%9F%A9%E9%98%B5">单位矩阵</a></h3>
<blockquote>
<p>对角线为1，其他全部0，对于n维单位矩阵一般表示为 <span
class="math inline">\(I_n\)</span></p>
</blockquote>
<h3 id="求逆"><a
href="https://zh.wikipedia.org/zh-hans/%E9%80%86%E7%9F%A9%E9%98%B5">求逆</a></h3>
<blockquote>
<p>对于矩阵 <span class="math inline">\(AB=BA=I_n\)</span>
(单位矩阵)，一般在右上角标注 <span class="math inline">\(^{-1}\)</span>
表示</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inv_A = np.linalg.inv(A)  <span class="comment"># 计算逆矩阵</span></span><br></pre></td></tr></table></figure>
<h3 id="伴随矩阵"><a
href="https://zh.wikipedia.org/zh-hans/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5">伴随矩阵</a></h3>
<blockquote>
<p>每个元素的余子式的行列式值，组成的矩阵，再求转置</p>
</blockquote>
<p>如果这个矩阵可逆，也可以用下面的求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">det_A = np.linalg.det(A)  <span class="comment"># 计算行列式</span></span><br><span class="line">inv_A = np.linalg.inv(A)  <span class="comment"># 计算逆矩阵</span></span><br><span class="line"><span class="comment"># 下面这个不是矩阵乘法，仅仅是向量内积（点乘），也就是对应位置相乘</span></span><br><span class="line">adj_A = det_A * inv_A  <span class="comment"># 计算伴随矩阵</span></span><br></pre></td></tr></table></figure>
<h3 id="矩阵乘法"><a
href="https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%99%A3%E4%B9%98%E6%B3%95">矩阵乘法</a></h3>
<blockquote>
<p>注意，不要和向量的点乘、叉乘混淆，矩阵乘法没有方向，平时说的向量乘法相当于矩阵的叉乘</p>
</blockquote>
<p>记作<span class="math inline">\(C=AB或C=A\cdot B\)</span>
新矩阵每个元素=左行乘右列再求和，所以两个矩阵行列必须是<span
class="math inline">\(A(m, n),B(n,
k)\)</span>，前面的列数等于后面的行数，最后 <span
class="math inline">\(C\)</span>的形状是 <span
class="math inline">\(C(m,k)\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = [[<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">B = [[<span class="number">2</span>], [<span class="number">1</span>]]</span><br><span class="line"><span class="comment"># 虽然叫 dot 但是这不是向量点乘！</span></span><br><span class="line">C = np.dot(A, B)</span><br><span class="line"><span class="comment"># C = [[4]]</span></span><br><span class="line"><span class="comment"># 不能 C = A*B，因为它相当于 np.multiply 只是对应位置相乘，A和B的形状必须完全相同</span></span><br></pre></td></tr></table></figure>
<h2 id="向量">向量</h2>
<hr />
<p>下面的是对向量来说的，但是和矩阵相似，而且容易混淆</p>
<hr />
<h3 id="向量点乘内积"><a
href="https://zh.wikipedia.org/wiki/%E7%82%B9%E7%A7%AF">向量点乘（内积）</a></h3>
<blockquote>
<p>是标量！可以理解为投影。这个不是针对矩阵的，这个是向量计算的，得到的是一个数，，实际操作中，两个向量对应位置上的值
<code>相乘</code> 再 <code>相加</code> 的操作</p>
</blockquote>
<p><span class="math inline">\(\vec{a} = [x_1,y_1,z_1]\)</span>、<span
class="math inline">\(\vec{b} = [x_2,y_2,z_2]\)</span>， 夹角 <span
class="math inline">\(\theta\)</span></p>
<p><span class="math display">\[
\vec{a} \cdot \vec{b} = x_1x_2+y_1y_2+z_1z_2
\]</span> 方向，<span
class="math inline">\(x_1x_2\)</span>平行四边形对角线</p>
<p>这个其实类似于矩阵的乘法，只不过实际操作中，如果ab是二维的，需要转置一下b（这里b是一维的，不转置也行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 一维的不存在行、列，转置没有意义，如下，二维的必须要转置，按照矩阵乘法来，结果也不是32而是[[32]]</span></span><br><span class="line"><span class="comment"># a = [[1, 2, 3]]</span></span><br><span class="line"><span class="comment"># b = [[4, 5, 6]]</span></span><br><span class="line">bt = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(bt)</span><br><span class="line"><span class="comment"># [4 5 6]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.dot(a, bt))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(np.dot(a, b))</span><br><span class="line"><span class="comment"># 32</span></span><br></pre></td></tr></table></figure>
<p>但是numpy.dot中转置不转置，结果一样。。。。实际矩阵计算应该是
<code>[3]</code> 而不是 <code>3</code></p>
<p>应用，刚才说了，其实就是投影，也就是 <span
class="math inline">\(\cos\theta\)</span> <span class="math display">\[
\cos\theta = \frac{\vec{a}\vec{b}}{|\vec{a}||\vec{b}|}
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">3</span>**<span class="number">0.5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 求模</span></span><br><span class="line">a_ = np.linalg.norm(a)</span><br><span class="line">b_ = np.linalg.norm(b)</span><br><span class="line"><span class="built_in">print</span>(a_, b_)</span><br><span class="line"><span class="built_in">print</span>(np.dot(a, b) / (a_ * b_))</span><br><span class="line"><span class="comment"># 输出的是45°夹角余弦值</span></span><br></pre></td></tr></table></figure>
<h3 id="叉乘"><a
href="https://zh.wikipedia.org/wiki/%E5%8F%89%E7%A7%AF">叉乘</a></h3>
<p>外积（<code>cross</code> product）又称叉积、叉乘、向量积（vector
product）</p>
<blockquote>
<p>向量叉乘几何意义是面积，方向与二者垂直，结果是标量！</p>
</blockquote>
<p>！注意，不是 <a
href="https://zh.wikipedia.org/wiki/%E5%A4%96%E7%A7%AF">外积：Outer
product</a>，是 <code>np.cross</code> 而不是 <code>np.outer</code>！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">3</span>**<span class="number">0.5</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 求模</span></span><br><span class="line">a_ = np.linalg.norm(a)</span><br><span class="line">b_ = np.linalg.norm(b)</span><br><span class="line"><span class="built_in">print</span>(a_, b_)</span><br><span class="line"><span class="built_in">print</span>(np.cross(a, b) / (a_ * b_))</span><br><span class="line"><span class="comment"># 输出的是</span></span><br><span class="line"><span class="comment"># [0.   0.   1.73205081]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果a b是二维</span></span><br><span class="line"><span class="comment"># a = [1, 0]</span></span><br><span class="line"><span class="comment"># b = [1, 3**0.5]</span></span><br><span class="line"><span class="comment"># 垂直方向没有，输出的是一个数</span></span><br><span class="line"><span class="comment"># 1.73205081</span></span><br></pre></td></tr></table></figure>
<h2 id="numpy函数说明">numpy函数说明</h2>
<p>首先注意，<code>一维向量</code> 不等于 <code>一维矩阵</code></p>
<ul>
<li>一维向量 <code>[1, 2, 3]</code></li>
<li>一维矩阵 <code>[[1, 2, 3]]</code></li>
</ul>
<p>尤其是在使用 <code>dot</code> 时，结果完全不一样</p>
<h3 id="一维向量">一维向量</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 转置不变，因为不存在行列，转置无意义</span></span><br><span class="line">bt = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(bt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下几个结果完全一样</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dot_t&quot;</span>, np.dot(a, bt))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dot&quot;</span>, np.dot(a, b))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;inner_t&quot;</span>, np.inner(a, bt))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>, np.inner(a, b))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;matmul_t&quot;</span>, np.matmul(a, bt))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;matmul&quot;</span>, np.matmul(a, b))</span><br><span class="line"><span class="comment"># 32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于把ab看做二维的，然后把a转置，在矩阵相乘</span></span><br><span class="line"><span class="comment"># np.outer不是叉乘（np.cross）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;outer\n&quot;</span>, np.outer(a, b))</span><br><span class="line"><span class="comment">#  [[ 4  5  6]</span></span><br><span class="line"><span class="comment">#  [ 8 10 12]</span></span><br><span class="line"><span class="comment">#  [12 15 18]]</span></span><br></pre></td></tr></table></figure>
<p>一维向量，<code>dot</code>、<code>inner</code>、<code>matmul</code>
没任何区别</p>
<h3 id="一维矩阵">一维矩阵</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本来形状是 (1, 3)</span></span><br><span class="line">a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line">b = [[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="comment"># 转置变成 (3, 1)</span></span><br><span class="line">bt = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(bt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵乘法，前后两个矩阵形状必须是 (m,n)(n,k)=(m,k)</span></span><br><span class="line"><span class="comment"># 前面列，等于后面行，相乘结果(m,k)</span></span><br><span class="line"><span class="comment"># 不满足 np.dot 直接报错</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dot_t&quot;</span>, np.dot(a, bt))</span><br><span class="line"><span class="comment"># [[32]]</span></span><br><span class="line"><span class="comment"># print(&quot;dot&quot;, np.dot(a, b))</span></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;matmul_t&quot;</span>, np.matmul(a, bt))</span><br><span class="line"><span class="comment"># [[32]]</span></span><br><span class="line"><span class="comment"># print(&quot;matmul&quot;, np.matmul(a, b))</span></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.inner 要求正好相反，对于 bt 反而报错。。。。</span></span><br><span class="line"><span class="comment"># print(&quot;inner_t&quot;, np.inner(a, bt))</span></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;inner&quot;</span>, np.inner(a, b))</span><br><span class="line"><span class="comment"># [[32]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于把ab看做二维的，然后把a转置，在矩阵相乘</span></span><br><span class="line"><span class="comment"># np.outer不是叉乘（np.cross）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;outer\n&quot;</span>, np.outer(a, b))</span><br><span class="line"><span class="comment"># 结果和前面的一维向量没区别</span></span><br><span class="line"><span class="comment">#  [[ 4  5  6]</span></span><br><span class="line"><span class="comment">#  [ 8 10 12]</span></span><br><span class="line"><span class="comment">#  [12 15 18]]</span></span><br></pre></td></tr></table></figure>
<p>一维矩阵，<code>dot</code>、<code>inner</code>、<code>matmul</code>
结果没有区别，但是对于矩阵乘法定义上有区别，<code>行</code>、<code>列</code>
要求 <code>np.inner</code>不一样</p>
<p>但是推荐使用 <code>np.dot</code> 或者
<code>np.matmul</code>，使用时按照线性代数里的定义矩阵乘法即可</p>
<h3 id="高维矩阵">高维矩阵</h3>
<p>与一维矩阵没有区别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = [[<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">bt = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(bt)</span><br><span class="line"><span class="built_in">print</span>(np.shape(a))</span><br><span class="line"><span class="comment"># (2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(np.shape(b))</span><br><span class="line"><span class="comment"># (3, 2)</span></span><br><span class="line"><span class="built_in">print</span>(np.shape(bt))</span><br><span class="line"><span class="comment"># (2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;dot,t&quot;, np.dot(a, bt))</span></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dot\n&quot;</span>, np.dot(a, b))</span><br><span class="line"><span class="comment">#  [[40 46]</span></span><br><span class="line"><span class="comment">#  [58 67]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;matmul,t\n&quot;, np.matmul(a, bt))</span></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;matmul\n&quot;</span>, np.matmul(a, b))</span><br><span class="line"><span class="comment">#  [[40 46]</span></span><br><span class="line"><span class="comment">#  [58 67]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;inner&quot;, np.inner(a, b))</span></span><br><span class="line"><span class="comment"># error</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;inner,t\n&quot;</span>, np.inner(a, bt))</span><br><span class="line"><span class="comment">#  [[40 46]</span></span><br><span class="line"><span class="comment">#  [58 67]]</span></span><br></pre></td></tr></table></figure>
<p><code>np.dot</code> 或者 <code>np.matmul</code>
一样，速度方面懒得测试了</p>
<h2 id="复数">复数</h2>
<p>复数在python的表示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span> + <span class="number">1j</span>)</span><br></pre></td></tr></table></figure>
<p><a
href="https://zh.wikipedia.org/wiki/%E5%A4%8D%E6%95%B0_(%E6%95%B0%E5%AD%A6)">数学运算定义</a></p>
<p>加法： <span
class="math display">\[(a+b)+(c+d)=(a+c)+(b+d)i\]</span></p>
<p>减法：</p>
<p><span class="math display">\[(a+bi)-(c+di)=(a-c)+(b-d)i\]</span></p>
<p>乘法：</p>
<p><span class="math display">\[
\begin{align}
(a+bi)(c+di)&amp;=ac+bci+adi+bdi^2\\&amp;=(ac-bd)+(bc+adi)
\end{align}
\]</span></p>
<p>除法</p>
<p><span class="math display">\[
\begin{align}
\frac{(a+bi)}{(c+di)}
&amp;=\frac{(a+bi)(c-di)}{(c+di)(c-di)}\\
&amp;=\frac{ac+bci-adi-bdi^2}{c^2-(di)^2}\\
&amp;=\frac{(ac+bd)+(bc-ad)i}{c^2+d^2}\\
&amp;=(\frac{ac+bd}{c^2+d^2})+(\frac{bc-ad}{c^2+d^2})i
\end{align}
\]</span></p>
<h3 id="矩阵乘积">矩阵乘积</h3>
<p>不管 <code>np.inner</code> 了，测试 <code>np.dot</code> 或者
<code>np.matmul</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">1</span>+<span class="number">1j</span>, <span class="number">2</span>+<span class="number">2j</span>, <span class="number">3</span>+<span class="number">3j</span>], [<span class="number">2</span>+<span class="number">2j</span>, <span class="number">3</span>+<span class="number">3j</span>, <span class="number">4</span>+<span class="number">4j</span>]]</span><br><span class="line">b = [[<span class="number">4</span>+<span class="number">4j</span>, <span class="number">5</span>+<span class="number">5j</span>], [<span class="number">6</span>+<span class="number">6j</span>, <span class="number">7</span>+<span class="number">7j</span>], [<span class="number">8</span>+<span class="number">8j</span>, <span class="number">9</span>+<span class="number">9j</span>]]</span><br><span class="line">bt = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(bt)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>+<span class="number">1j</span>)*(<span class="number">4</span>+<span class="number">4j</span>))</span><br><span class="line"><span class="comment"># 8j</span></span><br><span class="line"><span class="built_in">print</span>((<span class="number">1</span>+<span class="number">1j</span>)*(<span class="number">4</span>+<span class="number">4j</span>) + (<span class="number">2</span>+<span class="number">2j</span>)*(<span class="number">6</span>+<span class="number">6j</span>) + (<span class="number">3</span>+<span class="number">3j</span>)*(<span class="number">8</span>+<span class="number">8j</span>))</span><br><span class="line"><span class="comment"># 80j</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>*<span class="number">4</span> + <span class="number">2</span>*<span class="number">6</span> + <span class="number">3</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 40</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dot\n&quot;</span>, np.dot(a, b))</span><br><span class="line"><span class="comment">#  [[0. +80.j 0. +92.j]</span></span><br><span class="line"><span class="comment">#  [0.+116.j 0.+134.j]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;matmul\n&quot;</span>, np.matmul(a, b))</span><br><span class="line"><span class="comment">#  [[0. +80.j 0. +92.j]</span></span><br><span class="line"><span class="comment">#  [0.+116.j 0.+134.j]]</span></span><br></pre></td></tr></table></figure>
<p>两个没区别</p>
<h2 id="其他">其他</h2>
<h3 id="正交归一">正交归一</h3>
<p>验证是否正交归一？</p>
<ul>
<li>对于实数矩阵，<code>矩阵</code> 乘以 <code>矩阵的转置</code>，</li>
<li>对于实数矩阵，<code>矩阵</code> 乘以
<code>矩阵的共轭转置</code>，</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1 = np.dot(A, np.conj(np.transpose(A)))</span><br><span class="line">t2 = np.dot(np.real(A), np.transpose(np.real(A)))</span><br></pre></td></tr></table></figure>
<p>得到的结果，应该是单位矩阵</p>
<h3 id="特征值">特征值</h3>
<p>注意有两个函数
<code>np.linalg.eigh()</code>，<code>np.linalg.eig()</code></p>
<ul>
<li><code>np.linalg.eig()</code>
用于计算任意矩阵的特征值和特征向量，</li>
<li><code>np.linalg.eigh()</code>
用于计算厄密矩阵或实对称矩阵的特征值和特征向量，即特征值一定为实数，因为矩阵是实数，所以特征值是排序的</li>
</ul>
<p>另外，模式能量计算中，频率是特征值的 <code>根号</code>！</p>
<h3 id="qr分解">QR分解</h3>
<p>找到正交基</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.linalg <span class="keyword">import</span> qr</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">H = np.random.randn(n, n)</span><br><span class="line">Q, R = qr(H)</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/af3ac84b.html">https://yuhldr.github.io/posts/af3ac84b.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>复数</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>文件管理视频文件缩略图预览</title>
    <url>/posts/a3d4c429.html</url>
    <content><![CDATA[<p>效果如图，</p>
<figure>
<img src="/images/2023/kde-dolphin.png" alt="kde dolphin" />
<figcaption aria-hidden="true">kde dolphin</figcaption>
</figure>
<p>默认，图片、pdf什么的，都可以预览，但是视频需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yi ffmpegthumbs</span><br><span class="line"></span><br><span class="line">spi kdegraphics-thumbnailers</span><br></pre></td></tr></table></figure>
<p>然后在 <code>dolphin</code>
设置里，如上图，<code>常规 - 预览图</code> 最下面 <code>视频文件</code>
勾选上</p>
<p>gnome桌面的 <code>nautilus</code></p>
<ul>
<li><code>ffmpegthumbnailer</code>：avi等视频预览</li>
<li><code>nautilus-image-converter</code>：比如图片、pdf预览</li>
<li><code>python-nautilus</code>：比如 <code>nextcloud-client</code>
需要这个</li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/a3d4c429.html">https://yuhldr.github.io/posts/a3d4c429.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>kde</tag>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>github自动化</title>
    <url>/posts/dabdcea.html</url>
    <content><![CDATA[<p>举个例子</p>
<ul>
<li><p>我写了软件 <a
href="https://github.com/yuhldr/ldr-translate">GitHub -
yuhldr/ldr-translate</a>，平时需要自己打包，然后上传发布，但是我不可能每次修改一些小问题都发布一次，这时候我可以用这个自动化自动发布
<code>beta</code> 版本：<a
href="https://github.com/yuhldr/ldr-translate/releases">releases</a></p></li>
<li><p>我写了个脚本，想每天某时运行一次，但是我没有服务器，也可以用它。</p></li>
</ul>
<p><code>github Actions</code> 可以实现上面的问题</p>
<p>实际的问题应用可以看这里的文件 <a
href="https://github.com/yuhldr/ldr-translate/blob/master/.github/workflows/main.yml">main.yml</a></p>
<p>我取其中一部分，做个说明</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个名字随便，只是为了区分不同的 `action`</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">AutoPkg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动的条件，我这里设置的是，每次提交代码都编译</span></span><br><span class="line"><span class="comment"># 被注释掉的 schedule 是定时触发，格式与linux 的 cron 一致</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># schedule:</span></span><br><span class="line">  <span class="comment">#   - cron: &quot;0 0 * * *&quot;</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;master&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;master&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一些固定的变量，可以用 $&#123;&#123; env.SOFTWARE_NAME &#125;&#125; 引用</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">TAG_NAME:</span> <span class="string">&quot;自动打包&quot;</span></span><br><span class="line">  <span class="attr">SOFTWARE_NAME:</span> <span class="string">&quot;ldr-translate&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次触发执行什么</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="comment"># 这个名字随意</span></span><br><span class="line">  <span class="attr">build-ldr-linux:</span></span><br><span class="line"><span class="comment"># 在什么服务器上运行，可以有</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-22.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="comment"># 自定义的一些初始化命令</span></span><br><span class="line">        <span class="string">rm</span> <span class="string">-rf</span> <span class="string">disk</span></span><br><span class="line">        <span class="string">make</span> <span class="string">clear</span></span><br><span class="line">        <span class="string">echo</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">rpm</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        sudo apt update -y</span></span><br><span class="line"><span class="string"></span><span class="comment"># 安装打包rpm所需要的工具</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">rpm</span></span><br><span class="line"><span class="comment"># 自定义的打包命令</span></span><br><span class="line">        <span class="string">make</span> <span class="string">rpm-gtk</span> <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="string">rpm-qt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布到release</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">Release</span> <span class="string">and</span> <span class="string">Upload</span> <span class="string">Release</span> <span class="string">Asset</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">softprops/action-gh-release@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">tag_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.TAG_NAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">prerelease:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">draft:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">files:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">disk/*</span></span><br></pre></td></tr></table></figure>
<p>实际应用的时候，建议写成 <code>Makefile</code>，然后在这里只是调用
<code>make</code> 命令，自己在电脑上测试也方便，</p>
<p>具体的可以参见</p>
<p><a href="https://github.com/yuhldr/ldr-translate">GitHub -
yuhldr/ldr-translate</a></p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/dabdcea.html">https://yuhldr.github.io/posts/dabdcea.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>python打包pip</title>
    <url>/posts/4e0c9d8f.html</url>
    <content><![CDATA[<p>我这里是自用的，打包直接安装了，方便多个地方引用，不需要写一堆路径</p>
<h2 id="最简打包">最简打包</h2>
<p>比如 - 你的打包的pip库名字是 <code>pytest</code> -
你封装的函数只有一个 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&quot;: ok&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(np.pi)</span><br></pre></td></tr></table></figure></p>
<p>你需要的工作</p>
<ul>
<li><p>创建最外层文件夹，名字随意 比如 <code>test</code></p></li>
<li><p>在 <code>test</code> 文件夹里创建 <code>pytest</code> 文件夹 &gt;
也就是你打包的pip库名字</p></li>
<li><p>在 <code>pytest</code> 文件夹里创建的函数文件
<code>__init__.py</code> &gt;
注意函数可以写在这里，也可以其他地方，但是这个文件必须有
<code>__init__.py</code> 里面的内容 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&quot;: ok&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(np.pi)</span><br></pre></td></tr></table></figure></p></li>
<li><p>在 <code>test</code> 文件夹里创建 <code>setup.py</code> 文件</p>
<p>里面的内容 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&#x27;pytest&#x27;</span>,</span><br><span class="line">    <span class="comment"># 版本号</span></span><br><span class="line">    version=<span class="string">&#x27;1.0&#x27;</span>,</span><br><span class="line">    author=<span class="string">&quot;你的名字&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;test@gmail.com&quot;</span>,</span><br><span class="line">    <span class="comment"># 你的打包的pip库名字</span></span><br><span class="line">    py_modules=[<span class="string">&quot;pytest&quot;</span>],</span><br><span class="line">    <span class="comment"># 你的依赖</span></span><br><span class="line">    install_requires=[<span class="string">&quot;numpy&quot;</span>],</span><br><span class="line">          <span class="comment"># 自动打包文件</span></span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    description=<span class="string">&quot;库的说明&quot;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>最后你的文件目录应该是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span></span><br><span class="line">    ├── pytest</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    └── setup.py</span><br></pre></td></tr></table></figure>
<p>最后安装，在 test 文件夹里执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install ./</span><br></pre></td></tr></table></figure>
<p>安装位置，以linux为例：<code>~/.local/lib/python3.10/site-packages/pytest/</code></p>
<p>如果前面没有错误，不会报错，安装成功</p>
<p>在其他文件里可以引用刚才的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pytest.fun(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a: ok</span></span><br><span class="line"><span class="comment"># 3.141592653589793</span></span><br></pre></td></tr></table></figure>
<h2 id="复杂">复杂</h2>
<ul>
<li><p>如果你需要写一些比较多的说明</p>
<p>在刚才的 <code>test</code> 文件夹里新建 <code>README.md</code></p>
<p>然后修改 <code>setup.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fh:</span><br><span class="line">    long_description = fh.read()</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">&#x27;pytest&#x27;</span>,</span><br><span class="line">    <span class="comment"># 版本号</span></span><br><span class="line">    version=<span class="string">&#x27;1.0&#x27;</span>,</span><br><span class="line">    author=<span class="string">&quot;你的名字&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;test@gmail.com&quot;</span>,</span><br><span class="line">    <span class="comment"># 你的打包的pip库名字</span></span><br><span class="line">    py_modules=[<span class="string">&quot;pytest&quot;</span>],</span><br><span class="line">    <span class="comment"># 你的依赖</span></span><br><span class="line">    install_requires=[<span class="string">&quot;numpy&quot;</span>],</span><br><span class="line">          <span class="comment"># 自动打包文件</span></span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    description=<span class="string">&quot;库的说明&quot;</span>,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>可能的需要封装的函数库比较复杂</p>
<p>比如有多个文件之间相互引用</p>
<p><code>a.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_a</span>():</span><br><span class="line">  <span class="keyword">return</span> np.pi * <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><code>b.py</code> 需要引用 <code>a.py</code>
中的函数，正常导入包你的这个包就可以，也就是自己引用自己</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pytest.get_a())</span><br></pre></td></tr></table></figure></li>
<li><p>可能你有多个文件夹</p>
<p>每一个文件夹里，必须有 <code>__init__.py</code>
这个文件，即使这个文件空白</p></li>
<li><p>可能你有一些常量放在了 <code>data.json</code> 文件里</p>
<p>首先在刚才的 <code>setuptools.setup(</code> 里添加
<code>include_package_data=True,</code></p>
<p>然后，在刚才的 <code>test</code> 文件夹里新建
<code>MANIFEST.in</code></p>
<p>里面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include data.json</span><br></pre></td></tr></table></figure>
<p>引用它，建议在 pytest 文件夹的 <code>__init__.py</code> 里写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">this_dir, this_filename = os.path.split(__file__)</span><br></pre></td></tr></table></figure>
<p>其他地方引用它</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line">file = pytest.this_dir + <span class="string">&quot;/data.json&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/4e0c9d8f.html">https://yuhldr.github.io/posts/4e0c9d8f.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>python中json解析中文处理</title>
    <url>/posts/a63b796.html</url>
    <content><![CDATA[<h2 id="读取">读取</h2>
<ul>
<li><p>读取字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&#123;a:1&#125;&quot;</span></span><br><span class="line">j_data = json.loads(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(j_data)</span><br></pre></td></tr></table></figure></li>
<li><p>读取文件</p>
<p>区别仅仅是，<code>load</code> 不要 <code>s</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># windows系统 open 读取可能需要指定编码</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    j_data = json.load(file)</span><br><span class="line">    <span class="built_in">print</span>(j_data)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="保存">保存</h2>
<ul>
<li><p>方法一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># windows系统 open 写入可能需要指定编码</span></span><br><span class="line"><span class="comment"># indent自动格式化</span></span><br><span class="line"><span class="comment"># ensure_ascii 中文显示没问题</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;文件名&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(data, file, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>方法二</p>
<p>区别仅仅是，<code>dump</code> 要 <code>s</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">s = json.dumps(data, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.json&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(s)</span><br></pre></td></tr></table></figure></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/a63b796.html">https://yuhldr.github.io/posts/a63b796.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>python正则表达式</title>
    <url>/posts/6bab798e.html</url>
    <content><![CDATA[<p>先写正则表达式 <code>re_log_data</code>，然后
<code>re.compile(re_log_data)</code> 预处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">re_log_data = <span class="string">r&quot;^\s*((-?[0-9]*(\.[0-9]*)?([eE][-]?)?[0-9]+)\s+)+(-?[0-9]*(\.[0-9]*)?([eE][-]?)?[0-9]+)?&quot;</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(re_log_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test_string = &#x27;4 binsize = 6.7, bins = 8 8 150&#x27;</span></span><br><span class="line">test_string = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       0    98.676962   -442025.34            0   -441271.54    18272.015      2306304</span></span><br><span class="line"><span class="string">    2000    96.406522   -442997.22            0   -442260.76   -13680.737      2306304</span></span><br><span class="line"><span class="string">    4000     106.9393   -443334.55            0   -442517.63   -6014.7622    2316968.2 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>接下来，开始用一些方法搜索</p>
<h2 id="findall">findall</h2>
<p>这个用法比较简单，大多时候这个就够了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = pattern.findall(test_string)</span><br></pre></td></tr></table></figure>
<p>一般自己打印出来看看，是元组、数组，还是其他，直接索引就可以了</p>
<h2 id="match">match</h2>
<p>只返回第一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = pattern.<span class="keyword">match</span>(test_string)</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><p><code>groups()</code> 会出现一些无用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.groups()</span><br><span class="line"><span class="comment">#  (&#x27;2316968.2 \n&#x27;, &#x27;2316968.2&#x27;, &#x27;.&#x27;, None, None, None, None)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 括号里变成数字 只是把 None 变成 这个数字</span></span><br><span class="line">result.groups(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#  (&#x27;2316968.2 \n&#x27;, &#x27;2316968.2&#x27;, &#x27;.&#x27;, 0, 0, 0, 0)</span></span><br><span class="line">result.groups(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#  (&#x27;2316968.2 \n&#x27;, &#x27;2316968.2&#x27;, &#x27;.&#x27;, 1, 1, 1, 1)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>group()</code></p>
<p>比较合适 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment">#        0    98.676962   -442025.34            0   -441271.54    18272.015      2306304</span></span><br><span class="line"><span class="comment">#     2000    96.406522   -442997.22            0   -442260.76   -13680.737      2306304</span></span><br><span class="line"><span class="comment">#     4000    106.9393   -443334.55            0   -442517.63   -6014.7622    2316968.2 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="finditer">finditer</h2>
<p>返回多个，每一个类似 <code>match</code></p>
<p><code>test_string</code> 换成如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">re_log_data = <span class="string">r&quot;^\s*((-?[0-9]*(\.[0-9]*)?([eE][-]?)?[0-9]+)\s+)+(-?[0-9]*(\.[0-9]*)?([eE][-]?)?[0-9]+)?&quot;</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(re_log_data)</span><br><span class="line"></span><br><span class="line">test_string = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4 binsize = 6.7, bins = 8 8 150</span></span><br><span class="line"><span class="string">dadafaf</span></span><br><span class="line"><span class="string">       0    98.676962   -442025.34            0   -441271.54    18272.015      2306304</span></span><br><span class="line"><span class="string">    2000    96.406522   -442997.22            0   -442260.76   -13680.737      2306304</span></span><br><span class="line"><span class="string">    4000     106.9393   -443334.55            0   -442517.63   -6014.7622    2316968.2 </span></span><br><span class="line"><span class="string">    ajdsiod</span></span><br><span class="line"><span class="string">adsncios</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = pattern.finditer(test_string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查找成功.&quot;</span>, result)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">        <span class="built_in">print</span>(s.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查找不成功.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>match</code> 找不到后面的</p>
<blockquote>
<p>当时没写完，我忘了这里准备写什么了……，或许是</p>
</blockquote>
<p>可以试一下把下面的打印看看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span>.group()</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/6bab798e.html">https://yuhldr.github.io/posts/6bab798e.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
  </entry>
  <entry>
    <title>archlinux安装xrdp的心酸路程</title>
    <url>/posts/fae93d3c.html</url>
    <content><![CDATA[<p>注意我的当前环境</p>
<ul>
<li>archlinux 2022.07.14</li>
<li>xrdp 0.9.19-2</li>
<li>kde-plasma 5.25.3-1</li>
</ul>
<h2 id="安装相关软件">安装相关软件</h2>
<p>首先，需要安装的不只 <code>xrdp</code>，总共如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S xrdp xorgxrdp-glamor pulseaudio-module-xrdp</span><br></pre></td></tr></table></figure>
<p>只 <code>xrdp</code> 会出现各种问题，尤其是在
<code>cat ~/.xorgxrdp.10.log</code>
里有很多报错，比如找不到屏幕什么的</p>
<h2 id="启动相关service">启动相关service</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now xrdp</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now xrdp-sesman</span><br></pre></td></tr></table></figure>
<p>注意，出现问题时可以通过如下两种方法查看上面两个的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status xrdp</span><br><span class="line"><span class="built_in">sudo</span> systemctl status xrdp-sesman</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐下面的</span></span><br><span class="line"><span class="built_in">tail</span> -f -n 30 /var/log/xrdp.log</span><br><span class="line"><span class="built_in">tail</span> -f -n 30 /var/log/xrdp-sesman.log</span><br></pre></td></tr></table></figure>
<h2 id="根据日志排除相关错误">根据日志排除相关错误</h2>
<p>安装以后，黑屏、闪退等各种问题</p>
<h3 id="错误1">错误1</h3>
<blockquote>
<p>这个大概是因为，在上面的日志里有一个 <code>channels</code>
相关的报错</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/xrdp/xrdp.ini </span><br></pre></td></tr></table></figure>
<p>找到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allow_channels=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改成</span></span><br><span class="line">allow_channels=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="错误2">错误2</h3>
<blockquote>
<p>这个大概是因为一些权限不足的报错</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/polkit-1/rules.d/49-nopasswd_global.rules</span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/* Allow members of the wheel group to execute any actions</span><br><span class="line"> * without password authentication, similar to <span class="string">&quot;sudo NOPASSWD:&quot;</span></span><br><span class="line"> */ </span><br><span class="line">polkit.addRule(<span class="keyword">function</span>(action, subject) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((  action.id == &quot;org.freedesktop.policykit.exec&quot;</span><br><span class="line">    || action.id == &quot;org.fedoraproject.FirewallD1.all&quot;</span><br><span class="line">    || action.id == &quot;org.fedoraproject.FirewallD1.config&quot;</span><br><span class="line">    || action.id == &quot;org.freedesktop.NetworkManager.settings.modify.system&quot;) &amp;&amp;</span><br><span class="line">      subject.isInGroup(&quot;wheel&quot;)) &#123;</span><br><span class="line">        <span class="built_in">return</span> polkit.Result.YES;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="错误3">错误3</h3>
<blockquote>
<p>这个大概是因为闪退、黑屏</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc</span><br></pre></td></tr></table></figure>
<p>然后注释掉如下最后几行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#twm &amp;</span></span><br><span class="line"><span class="comment">#xclock -geometry 50x50-1+1 &amp;</span></span><br><span class="line"><span class="comment">#xterm -geometry 80x50+494+51 &amp;</span></span><br><span class="line"><span class="comment">#xterm -geometry 80x20+494-0 &amp;</span></span><br><span class="line"><span class="comment">#exec xterm -geometry 80x66+0+0 -name login</span></span><br></pre></td></tr></table></figure>
<p>在最后添加，注意，我的是kde桌面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声音</span></span><br><span class="line">PULSE_SCRIPT=/etc/xrdp/pulse/default.pa pulseaudio --daemonize=no</span><br><span class="line">pulseaudio &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kde-plasma桌面</span></span><br><span class="line"><span class="built_in">export</span> DESKTOP_SESSION=plasma</span><br><span class="line">/usr/lib/plasma-dbus-run-session-if-needed startplasma-x11</span><br></pre></td></tr></table></figure>
<h3 id="错误4">错误4</h3>
<blockquote>
<p>这个大概也是因为一些权限问题</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/pam.d/xrdp-sesman</span><br></pre></td></tr></table></figure>
<p>原为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line">auth        include     system-remote-login</span><br><span class="line">account     include     system-remote-login</span><br><span class="line">password    include     system-remote-login</span><br><span class="line">session     include     system-remote-login</span><br></pre></td></tr></table></figure>
<p>改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line">auth        include     system-remote-login</span><br><span class="line">-auth           optional        pam_gnome_keyring.so</span><br><span class="line">-auth   optional  pam_kwallet5.so</span><br><span class="line"></span><br><span class="line">account     include     system-remote-login</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">password    include     system-remote-login</span><br><span class="line">-password       optional        pam_gnome_keyring.so use_authtok</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session         optional        pam_keyinit.so force revoke</span><br><span class="line">session     include     system-remote-login</span><br><span class="line">-session                optional        pam_gnome_keyring.so auto_start</span><br><span class="line">-session  optional  pam_kwallet5.so auto_start</span><br></pre></td></tr></table></figure>
<h3 id="错误5">错误5</h3>
<blockquote>
<p>注意，我不确定这个需不需要修改，但是目前我改了，如果远程没问题，就不要改了，这个很可能是因为我闲着没事</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/xrdp/startwm.sh</span><br></pre></td></tr></table></figure>
<p><code>wm_start</code> 函数中不是 <code>arch user</code>
的，都被我删了，这个函数，目前如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意只是 `wm_start` 这个函数里面的被我改了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#start the window manager</span></span><br><span class="line"><span class="function"><span class="title">wm_start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> [ -r /etc/locale.conf ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/locale.conf</span><br><span class="line">    <span class="built_in">export</span> LANG LANGUAGE</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># arch user</span></span><br><span class="line">  <span class="keyword">if</span> [ -r ~/.xinitrc ]; <span class="keyword">then</span></span><br><span class="line">    pre_start</span><br><span class="line">    . ~/.xinitrc</span><br><span class="line">    post_start</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  pre_start</span><br><span class="line">  xterm</span><br><span class="line">  post_start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对了期间还有，我也不确定有没有用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gpasswd -a <span class="variable">$USER</span> <span class="built_in">tty</span></span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/fae93d3c.html">https://yuhldr.github.io/posts/fae93d3c.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>archlinux</tag>
        <tag>xrdp</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装win11与ubuntu引导相关问题</title>
    <url>/posts/67b80cff.html</url>
    <content><![CDATA[<h2 id="ubuntu引导修复">ubuntu引导修复</h2>
<p>现在电脑一般支持 <code>uefi</code>
启动,但是仍然存在因为不小心没有开启相关开关,或者其他原因,导致根目录下没有对应的
<code>/boot/efi</code> 分区,对于有些电脑,可能是 <code>/efi</code>
分区,或者总总原因导致,此分区损害或者被删除</p>
<h3 id="efi分区">efi分区</h3>
<p>正常情况下 <code>uefi</code>
启动的,电脑都会有这个分区,在windows系统中,使用 <code>DG</code>
等软件也可以看到,一般分区为
<code>300M</code>,很小,因为这里只需要一个目录</p>
<p><code>/EFI/BOOT/bootx64.efi</code></p>
<p>如果装了双系统,这里可能多几个文件夹,比如</p>
<p><code>/EFI/ubuntu/</code></p>
<p>这里会有几个类似 <code>grubx64.efi</code> <code>grub.cfg</code>
的文件,这几个文件说明一些启动配置</p>
<ul>
<li>对于windows如果这个分区被不小心删除了,用 <code>微pe</code>
等刻录u盘,里面有恢复的工具</li>
<li>对于只安装了ubuntu等linux的,可以刻录ubuntu,u盘进入试用,可以进行相关操作</li>
</ul>
<h2 id="如果能进入grub">如果能进入grub</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>看到</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">hd0</span>) (<span class="name">hd0</span><span class="punctuation">,</span>gpt9) (<span class="name">hd0</span><span class="punctuation">,</span>gpt8) (<span class="name">hd0</span><span class="punctuation">,</span>gpt7) (<span class="name">hd0</span><span class="punctuation">,</span>gpt6) (<span class="name">hd0</span><span class="punctuation">,</span>gpt5) (<span class="name">hd0</span><span class="punctuation">,</span>gpt2) (<span class="name">hd0</span><span class="punctuation">,</span>gpt1)</span><br></pre></td></tr></table></figure>
<p>这个其实就是你的分区,
<code>(hd0)</code>,就是其中一硬盘,类之linux中看到的
<code>/dev/sda</code>,<code>(hd0,gpt1)</code>类似<code>/dev/sda1</code></p>
<p>注意你应该知道你的 <code>efi</code>分区在那里,或者你自己一个个看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 查看某个盘</span></span><br><span class="line"><span class="built_in">ls</span> (hd0,gpt1)/</span><br></pre></td></tr></table></figure>
<p>我的分区规则是</p>
<ul>
<li><code>/</code> 单独 <code>/dev/sda3</code></li>
<li><code>/boot</code> 单独 <code>/dev/sda2</code></li>
<li><code>/boot/efi</code> 单独 <code>/dev/sda1</code></li>
<li><code>/home</code> 单独 <code>/dev/sda4</code></li>
</ul>
<p>所以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> root=(hd0,gpt2)</span><br><span class="line"><span class="built_in">set</span> prefix=(hd0,gpt2)/grub</span><br><span class="line">insmod normal</span><br><span class="line">normal</span><br><span class="line"><span class="comment"># 即可启动，启动成功以后，更新一下grub的配文件</span></span><br></pre></td></tr></table></figure>
<p>如果还不行，内核也自己设置一下，因为有时候是因为内核问题启动错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linux /vmlinuz root=/dev/sda3</span><br><span class="line">initrd /initrd.img</span><br><span class="line">boot</span><br></pre></td></tr></table></figure>
<p>这时候你应该进入系统了,更新一下efi配置</p>
<h3 id="如果grub都进入错误">如果grub都进入错误,</h3>
<p>一种,你可以用<code>pe</code>类u盘,用<code>dg</code>之类的软件,创建对应的efi启动条目,有的主板也带有,自己添加即可</p>
<p>但是,也可以自己手动引导,虚拟机安装<code>win11</code>就遇到这个问题了</p>
<p>注意提示,第一条应该是,输入</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">fs0:</span></span><br></pre></td></tr></table></figure>
<p>回车,进入了<code>efi</code>分区,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> EFI</span><br></pre></td></tr></table></figure>
<ul>
<li>对于ubuntu,</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ubuntu &amp;&amp; <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>输入看到的类似 <code>grubx64.efi</code> 的文件名,回车,即可启动</p>
<ul>
<li>对于window11虚拟机</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">boot</span> &amp;&amp; <span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<p>输入看到的类似 <code>grubx64.efi</code> 的文件名,回车,即可启动</p>
<h2 id="windows11">windows11</h2>
<blockquote>
<p>虚拟机或者u盘安装时,windows11不符合要求,可以这样,目前测试可以正常更新,激活</p>
</blockquote>
<p>按 Shift+F10组合键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\Setup\LabConfig /v BypassTPMCheck /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\Setup\LabConfig /v BypassRAMCheck /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\Setup\LabConfig /v BypassSecureBootCheck /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure>
<p>等同于</p>
<p>按
Shift+F10组合键，在弹出的命令窗口中输入regedit并回车，打开注册表编辑器。
导航至" HKEY_LOCAL_MACHINE"，创建新项 “LabConfig”，并在此项内新建
BypassTPMCheck、BypassRAMCheck、BypassSecureBootCheck等三个DWORD (32位)
值，赋值均为1，如下图所示：</p>
<p>参考于</p>
<ul>
<li>https://www.modb.pro/db/148405</li>
<li>https://blog.csdn.net/bealei/article/details/124270047</li>
</ul>
<blockquote>
<p>对于直接下载windows11的iso文件,在windows10上升级的</p>
</blockquote>
<p>可以下载最新的 <code>windows10</code> 镜像,复制其中的
<code>sources/appraiserres.dll</code>
文件，懒得下载的可以试试我下载的这个文件<a
href="./../data/win/appraiserres.dll">/appraiserres.dll</a>，解压windows11的镜像文件，并替换win11中的此文件</p>
<p>安装时，会提示不符合要求，点接受即可</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/67b80cff.html">https://yuhldr.github.io/posts/67b80cff.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>uefi</tag>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>linux环境下连接windows共享的打印机</title>
    <url>/posts/7d18e834.html</url>
    <content><![CDATA[<p>首先，我用的是 <code>archlinux</code> 配合 <code>gnome</code>
桌面，<strong>最小安装</strong>
<code>gnome</code>，几乎不包含任何应用，手动安装
<code>gnome-control-center</code>（设置），<code>设置</code> 依赖
<code>smbclient</code>，因为最小安装，设置中 <code>打印机</code>
显示无法使用，再安装 <code>cups</code>，惠普打印机需要惠普驱动
<code>hplip</code>，所以所有的软件大概是</p>
<ul>
<li><code>gnome-control-center</code>：设置，含打印机，方便图形化配置</li>
<li><code>smbclient</code>：连接 windows 共享的打印机</li>
<li><code>cups</code>：打印</li>
<li><code>hplip</code>：惠普驱动</li>
</ul>
<blockquote>
<p>注意 archlinux
安装这些软件时，会安装相关依赖，这里不再列出，请自行查找：<a
href="https://aur.archlinux.org/packages">AUR (en) - Packages</a></p>
</blockquote>
<h2 id="查看ip与测试">查看ip与测试</h2>
<p>首先查看连接打印机并共享的window电脑（简写为
<code>win_print</code>）内网ip：<code>196.168.10.1</code>，需要知道共享时windows的用户名
<code>user_test</code> 和密码 <code>pw_12345678</code></p>
<p>你有的信息为</p>
<ul>
<li><code>196.168.10.1</code>：连接打印机并共享的window电脑内网ip</li>
<li><code>user_test</code>：共享时windows的用户名</li>
<li><code>pw_12345678</code>：共享时windows的密码</li>
</ul>
<p>直接在linux终端测试，注意此电脑需要与 <code>win_print</code>
在同一网络环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 196.168.10.1</span><br></pre></td></tr></table></figure>
<p>可以 <code>ping</code> 通</p>
<p>然后查看 smb，其中 <code>user_test</code> 为之前的
<code>win_print</code> 的用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient -L 196.168.10.1 -U user_test</span><br></pre></td></tr></table></figure>
<p>会提示输入密码，即 之前的 <code>win_print</code> 的密码
<code>pw_12345678</code></p>
<p>如果出现类似以下内容，请继续，否则，我也不知道了……，前面的
<code>ping</code> 以及依赖 <code>smbclient</code> 自行核对安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Password <span class="keyword">for</span> [MYGROUP\3008]:</span><br><span class="line"></span><br><span class="line">  Sharename       Type      Comment</span><br><span class="line">  ---------       ----      -------</span><br><span class="line">  ADMIN$          Disk      远程管理</span><br><span class="line">  C$              Disk      默认共享</span><br><span class="line">  D$              Disk      默认共享</span><br><span class="line">  user_test       Printer   HP LaserJet MFP M227-M231</span><br><span class="line">  IPC$            IPC       远程 IPC</span><br><span class="line">  <span class="built_in">print</span>$          Disk      打印机驱动程序</span><br><span class="line">SMB1 disabled -- no workgroup available</span><br></pre></td></tr></table></figure>
<h2 id="添加打印机">添加打印机</h2>
<p>在 <code>gnome</code>
设置里，有打印机选项，如果提示服务不可用，请自行按照自己的系统安装
<code>cups</code>，对于 <code>archlinux</code> 来说</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S cups</span><br></pre></td></tr></table></figure>
<p>开启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now cups</span><br></pre></td></tr></table></figure>
<p>安装驱动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S hplip</span><br></pre></td></tr></table></figure>
<p>重新打开 <code>设置-打印机</code></p>
<p>选择添加打印机，输入刚才的找到的ip：<code>196.168.10.1</code>，大概有一个条目显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">196.168.10.1</span><br><span class="line">服务器需要认证</span><br></pre></td></tr></table></figure>
<p>选择这个，然后会让输入帐号密码，即刚才的windows用户名密码</p>
<p>如果正确，然后可以看到打印机选项，类似如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">打印机名字</span><br><span class="line">位置://196.168.10.1</span><br></pre></td></tr></table></figure>
<p>选择即可，会让你选择驱动，惠普打印机就是 <code>Hewlett-Packard</code>
厂商，然后选择对应机器的驱动，尽量完全对上，一个都不要错，如果驱动比较少，说明你刚才驱动安装的有问题，添加以后，设置里就有了，我的是
<code>HP LaserJet Pro MFP M227-M231 Postscript</code></p>
<p>这时候打开cups浏览器端口<code>localhost:631</code>：<a
href="http://localhost:631/printers/">打印机 - CUPS 2.4.1</a></p>
<p>如果一切正常，这里会显示和 <code>gnome设置</code> 里一样的打印机</p>
<h2 id="测试打印机与踩坑">测试打印机与踩坑</h2>
<p>按理说，这时候打开一个pdf,或者其他的，选择打印，选中刚才的打印机，就可以了，但是会报错，报错信息在这里看</p>
<p><a href="http://localhost:631/printers/">打印机 - CUPS
2.4.1</a>，点击你添加的打印机，里面会有介绍错误信息</p>
<h3 id="错误一">错误一</h3>
<p>我遇到的第一个错误是，samba相关的，因为archlinux安装的，没有配置文件，按照这里的<a
href="https://wiki.archlinux.org/title/samba_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%89%E8%A3%85">Samba
(简体中文) - ArchWiki</a>，把这个文件 <a
href="https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD">https://git.samba.org/samba.git/?p=samba.git;a=blob_plain;f=examples/smb.conf.default;hb=HEAD</a>，下载到
<code>/etc/samba/smb.conf</code></p>
<h3 id="错误二">错误二</h3>
<p>然后又有错误，通知也提示 <code>需要凭证以继续打印</code>，</p>
<p><strong>需要先关闭cups</strong>，再修改这个文件(因为不关闭，这个文件会变，好像应该修改
<code>/etc/cups/cupsd.conf</code> 具体的我不知道)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop cups</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gedit /etc/cups/printers.conf</span><br></pre></td></tr></table></figure>
<p>如果有 <code>AuthInfoRequired none</code> 这一行，改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AuthInfoRequired username,password</span><br></pre></td></tr></table></figure>
<p>没有的话，直接添加这一行</p>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start cups</span><br></pre></td></tr></table></figure>
<p>再打印，应该会提示帐号密码，填写刚才 <code>windows</code>
的帐号密码就可以了，建议选中记住密码，但是注意，如果需要修改密码，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">seahorse</span><br></pre></td></tr></table></figure>
<p>没有这个软件的话，自己安装，中文名 <code>密码和密钥</code></p>
<h3 id="错误三">错误三</h3>
<p><a href="#错误二">错误二</a> 中的文件其中有一行应该是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DeviceURI smb://196.168.10.1/user_test</span><br></pre></td></tr></table></figure>
<p>这个就是 <a href="#查看ip与测试">查看ip与测试</a>
这里看到的信息，但是因为各种原因可能有问题，请自己编辑，编辑前请按照<a
href="#错误二">错误二</a>中 <strong>先关闭cups</strong></p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/7d18e834.html">https://yuhldr.github.io/posts/7d18e834.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>smb</tag>
      </tags>
  </entry>
  <entry>
    <title>archlinux安装回顾</title>
    <url>/posts/3513d90f.html</url>
    <content><![CDATA[<p>现在感觉，以前使用的 ubuntu
就是个渣渣，用了几年，对与软件本身的了解很差，而且这里的 yay 或者 pura
包含的软件实在是太丰富了！而且这种自动的源码编译得到的软件，使用效果要比打包的好很多，为了增加你的决心，先看成品，这个是
<code>kde plasma</code> 桌面，但是最近我又回到了 <code>gnome</code>
桌面（2023.5）</p>
<blockquote>
<p>今天，我已经把两个桌面安装了无数遍……</p>
</blockquote>
<figure>
<img src="/images/2022/linux/plasma.png" alt="archlinux-kde" />
<figcaption aria-hidden="true">archlinux-kde</figcaption>
</figure>
<h2 id="opensuse-使用">openSUSE 使用</h2>
<p>离开 Ubuntu
以后，我最开始尝试了滚动版和稳定版，但是体验很差，德国的这些开发者“太过严谨了”，严谨的有毒！</p>
<ul>
<li>你见过无法播放<code>avi</code>格式视频的<code>vlc</code>吗？</li>
<li>你能忍受买了人脸识别解锁，Ubuntu 正常，suse 完全卡死吗？</li>
<li>你能明白更新几天以后 kde 无法进入的无语吗？</li>
<li>……</li>
</ul>
<p>整个来说体验极差，kde 在 archlinux，eps 文件可以打开，在 openSUSE
不行，搜狗输入法 yay 安装正常，openSUSE
不行，反正就是问题极多，稳定版也是，不建议使用，而且百度、谷歌基本上找不到解决方案</p>
<h2 id="archlinux-从零开始">archlinux 从零开始</h2>
<p>我觉得吧，新手不要用，因为大概率搞不定，最后还怼
arch，需要什么基础呢？</p>
<ol type="1">
<li>大概知道分区挂载，以及多系统引导模式</li>
<li>知道 linux 以及 kde 常用的软件，因为软件基本上都需要自己安装，用
arch 就是为了简洁，不要直接安装 kde 完全版</li>
<li>大概知道 systemd 的使用方法</li>
<li>足够的时间去折腾，这个很重要</li>
</ol>
<p>KDE 桌面是真的完虐 gnome，archlinux
具体的安装我记不清了，有些坑以及整体安装逻辑还记得，这个逻辑很重要，因为一开始什么都不懂，安装以后重启到命令行，root
设置密码时，没分清 U 盘与电脑系统，直接无法进入</p>
<h3 id="安装逻辑流程">安装逻辑流程</h3>
<ol type="1">
<li><p>使用任意你喜欢的方式刻录 archlinux 到 u 盘，</p>
<ul>
<li><p>如果在使用 windows，可以用软碟通，</p></li>
<li><p>如果你在使用
linux，可以百度一下，一行命令就可以了，千万注意啊，你要足够熟悉分区
<code>sudo fdisk -l</code>，可以得到分区情况，根据大小判断，如果错误，可能导致某个盘<strong>数据彻底被删除</strong>！！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">dd</span> <span class="keyword">if</span>=archlinu镜像的完整路径 of=u盘的分区类似这个/dev/sde</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>自行修改电脑启动顺序，u 盘第一位，即可进入 archlinux 所在 U
盘系统，注意，完全是命令行</p>
<p>接下来，主要是</p>
<ul>
<li>确认挂载的分区<code>/</code> <code>/home</code> <code>/opt</code>
<code>/usr/local</code> 名称类似<code>/dev/sdbc2</code>，以及启动引导的
<code>efi</code> 所在分区，但是按照文档挂载以后安装即可</li>
<li>注意按照教程一步步走，不要跳：<code>pacstrap</code>开头的命令只是把
linux 最基础的东西安装到刚才挂载的分区上，这时候你是在 U
盘系统上，修改什么都没有意义，尽量在基础安装以后
<code>arch-chroot /根目录分区名字</code>
进入到安装好的系统中，进行其他操作，比如设置 root
密码，修改时区、语言等，千万不要再 U 盘系统修改，没意义</li>
<li>另外注意多系统引导，需要额外的软件
<code>os-prober</code>，还需要取消<code>GRUB_DISABLE_OS_PROBER</code>的注释</li>
<li>记得修改 root
默认密码（这个必须在装系统时修改，下面的启动到系统终端以后也行）</li>
</ul></li>
</ol>
<h3 id="大小坑">大小坑</h3>
<p>分区问题，对于</p>
<ul>
<li>注意双系统中的 <code>efi</code> 分区不要挂载在新系统的
<code>/boot</code> 里面，因为会导致 <code>grub</code> 以及一些
<code>img</code> 文件放在原来的 <code>efi</code> 分区，而这个分区是
<code>windows</code> 自己创建的，默认大小一般只有 <code>100M</code>
，随着主题自定义、重装系统，这个文件夹会越来越大，甚至报错</li>
</ul>
<p>软件问题</p>
<ul>
<li>linux 启动以后进入桌面系统的逻辑是：显示服务 xorg-登录管理器
sddm-桌面环境 plams（kde）</li>
<li>记得安装 plasma
桌面环境以后，还有终端（konsole）和文件管理器（dolphin）</li>
<li>记得添加普通用户</li>
<li>注意中文字体（我选择直接复制 windows
的字体），不然很无语，全是框框，对于中文环境可以不设置，进入 kde
桌面环境以后，设置页面里选择一下就好</li>
<li>注意很多东西都在 <code>yay</code> 里，而不是 <code>panman</code>
包管理，比如浏览器、搜狗输入法，yay
国内好像没法访问，我不知道，自行测试，如果不能访问，改为<a
href="https://zhuanlan.zhihu.com/p/102529503">国内镜像</a></li>
<li>ssh、cron、等等，全部没有……，需要什么安装什么，但是注意安装以后
<code>system enable</code> 使其开机自启！！</li>
<li>防火墙没必要就不要用，不然 kde-connect 会让你怀疑人生</li>
<li>howdy，记得设置正确摄像头、千万不要直接修改
<code>/etc/pam.d/system-auth</code>，会导致很多问题，比如别人 ssh
你的电脑，直接通过摄像头登陆了</li>
</ul>
<h3 id="代码参考">代码参考</h3>
<p>明白以后，<a
href="https://wiki.archlinux.org/title/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">官方文档</a>
与 <a href="https://zhuanlan.zhihu.com/p/433920079">知乎百度等文档</a>
配合着看，官方为主，其他为辅，双系统这个参考：<a
href="https://zhuanlan.zhihu.com/p/138951848">2021 Archlinux
双系统安装教程（超详细）</a></p>
<p>涉及双系统、常用软件等</p>
<h4 id="先挂载">先挂载</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  sdc1 为做准备安装新系统的磁盘分区</span></span><br><span class="line">mount /dev/sdc1 /mnt</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/efi</span><br><span class="line"><span class="comment"># sda1 为windows安装时自动创建的efi启动分区</span></span><br><span class="line">mount /dev/sda1 /mnt/efi</span><br><span class="line"></span><br><span class="line"><span class="comment"># btrfs</span></span><br><span class="line">mount /dev/nvme0n1p4 -o subvol=@gnome /mnt</span><br></pre></td></tr></table></figure>
<p>一些常用命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分区删除等</span></span><br><span class="line">cfdisk /dev/sd你的磁盘名字</span><br><span class="line"><span class="comment"># 分区格式化为 ext4</span></span><br><span class="line">mkfs.ext4 /dev/sd你要格式化的分区名字</span><br></pre></td></tr></table></figure>
<h4 id="初步安装">初步安装</h4>
<p>前面那一步，不要按照有些地方说的，把
<code>windows安装时自动创建的efi启动分区</code> 挂在
<code>/boot</code>，因为，grub 以及 linux 等<code>img</code>
文件都会安装在 <code>/boot</code> 里，但是 windows 的这个分区一般只有
100M,而且还有个问题，多个<code>arch</code>系统，会导致这里被重复覆盖，出现一些问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware</span><br></pre></td></tr></table></figure>
<h4 id="分区敲定">分区敲定</h4>
<p>这个可以最后，全部结束以后，再进行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<h4 id="切换新系统">切换新系统</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>
<h4 id="grub">grub</h4>
<p>官方文件在这里，中文的，请自行查看参考，防止更新：<a
href="https://wiki.archlinux.org/title/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%8E%A2%E6%B5%8B%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">GRUB
(简体中文) - ArchWiki</a></p>
<p>grub 多系统管理, uefi 启动，intel 芯片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S grub os-prober efibootmgr intel-ucode</span><br></pre></td></tr></table></figure>
<p>--efi-directory=/efi 是因为刚才的挂载路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=Arch</span><br></pre></td></tr></table></figure>
<p>为了取消双系统的注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;GRUB_DISABLE_OS_PROBER=false&quot;</span> &gt;&gt; /etc/default/grub</span><br></pre></td></tr></table></figure>
<p>生成 grub 启动文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>如果想美化，登录以后按照这里来，<a
href="https://github.com/vinceliuice/grub2-themes">vinceliuice/grub2-themes</a>
下载以后直接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./install</span><br></pre></td></tr></table></figure>
<h4 id="bootctl">bootctl</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bootctl install</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bootctl update</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title arch-kde</span><br><span class="line">linux img/kde/vmlinuz-linux</span><br><span class="line">initrd img/kde/initramfs-linux.img</span><br><span class="line">initrd intel-ucode.img</span><br><span class="line">options root=UUID=86f86555-c1c5-4a78-9d77-b0e4b16c7be0 rw rootflags=subvol=@kde quiet splash</span><br></pre></td></tr></table></figure>
<h4 id="其他设置">其他设置</h4>
<p>文本编辑、网络管理、git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S vim git base-devel</span><br></pre></td></tr></table></figure>
<p>设置 root 密码，尽量复杂一些</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>
<p>语言，这里设置以后，一会到 kde 设置桌面环境，还需要修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure>
<ul>
<li>输入 <code>/#en_US</code>、<code>回车</code> 输入 <code>n</code>
找到 UTF-8 那一行 输入<code>:i</code>、<code>回车</code>
删掉前面的#（取消注释）</li>
<li><code>esc</code> 按键退出</li>
<li>输入 <code>/#zh_CN</code>、<code>回车</code> 输入 <code>n</code>
找到 UTF-8 那一行 输入<code>:i</code>、<code>回车</code>
删掉前面的#（取消注释）</li>
<li><code>esc</code> 按键退出、输入<code>:wq</code> 保存并退出</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.conf</span><br></pre></td></tr></table></figure>
<p>添加 <code>LANG=en_US.UTF-8</code></p>
<p>hostname，我的是 ldr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>
<blockquote>
<p>vim 的使用方法上面语言配置已经大致介绍，不再重复</p>
</blockquote>
<p>添加 <code>echo "ldr" &gt; /etc/hostname</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<p>添加，必须和上面的 <code>/etc/hostname</code> 里面的 <code>ldr</code>
对应</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">::1 localhost</span><br><span class="line">127.0.0.1 ldr.localdomain ldr</span><br></pre></td></tr></table></figure>
<p>北京时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<h4 id="安装桌面">安装桌面</h4>
<p>显卡驱动自选，但是我不建议，因为 linux
内核里本来就有开源的显卡驱动了，对于需要 cuda 编程的 N
卡来说，你可以安装 <code>cudnn</code>，会自动把 <code>cuda</code>
<code>nvidia</code>
等安装上，同时会禁用开源驱动，重新编译内核，安装以后，不要轻易卸载，有时候会因为内核没有重新编译，导致一些奇怪问题</p>
<h4 id="新建用户">新建用户</h4>
<p>用户名，我的是 <code>yuh</code>，你的自己改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m yuh</span><br></pre></td></tr></table></figure>
<p>设置密码，一会 kde 可以用它登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd yuh</span><br></pre></td></tr></table></figure>
<h4 id="重启">重启</h4>
<p>退出系统，结束挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>取消挂载，可能会有报错，不用管，事不大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount -a</span><br></pre></td></tr></table></figure>
<p>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>有时候代理报错，更新一下时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="其他软件">其他软件</h4>
<p>配置其他源 <code>vim /etc/pacman.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"></span><br><span class="line">[arch4edu]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman-key --lsign-key <span class="string">&quot;farseerfc@archlinux.org&quot;</span>; <span class="built_in">sudo</span> pacman -Syyu; <span class="built_in">sudo</span> pacman -Sy archlinuxcn-keyring; <span class="built_in">sudo</span> pacman-key --recv-keys 7931B6D628C8D3BA; <span class="built_in">sudo</span> pacman-key --finger 7931B6D628C8D3BA; <span class="built_in">sudo</span> pacman-key --lsign-key 7931B6D628C8D3BA;</span><br></pre></td></tr></table></figure>
<p>kde 常用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S plasma spectacle ark gwenview yakuake python-pyqt6 kdegraphics-thumbnailers ffmpegthumbs kdeconnect konsole dolphin okular kate</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sddm NetworkManager</span><br></pre></td></tr></table></figure>
<p>gnome 常用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S gdm evince gnome-calculator gnome-console gnome-control-center gnome-remote-desktop gnome-text-editor gnome-weather loupe nautilus xdg-desktop-portal-gnome xdg-user-dirs-gtk power-profiles-daemon gst-plugins-good gnome-tweaks file-roller yaru-gnome-shell-theme yaru-gtk-theme yaru-gtksourceview-theme yaru-icon-theme yaru-session yaru-sound-theme seahorse amberol gvfs-google gvfs-mtp gvfs-onedrive extension-manager</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> gdm NetworkManager</span><br></pre></td></tr></table></figure>
<p>修改这个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/share/gnome-shell/modes/yaru.json</span><br></pre></td></tr></table></figure>
<p>改为 dark</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parentMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;colorScheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefer-dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stylesheetName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Yaru-dark/gnome-shell.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;themeResourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gnome-shell-theme.gresource&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iconsResourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gnome-shell-icons.gresource&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;enabledExtensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ubuntu-dock@ubuntu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ubuntu-appindicators@ubuntu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;ding@rastersoft.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>其他</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S openssh neofetch atuin networkmanager-openvpn microsoft-edge-stable-bin visual-studio-code-bin nextcloud-client fcitx5-im fcitx5-chinese-addons pnpm yarn python-pip python-pipreqs python-scipy python-setuptools python-matplotlib yay wget trash-cli texlive perl-yaml-tiny perl-file-homedir texlive-langchinese clash-premium-bin fuse2 xclip pandoc-bin hexo-cli rsync btrfs-progs sof-firmware plymouth noto-fonts-cjk vim git zsh</span><br></pre></td></tr></table></figure>
<p>其他 yay</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adw-gtk3 zotero-beta-bin gnome-network-displays-git input-leap-inputcapture wechat-universal-bwrap linuxqq hplip-lite wps-office-cn wps-office-fonts freetype2-wps</span><br></pre></td></tr></table></figure>
<p>不喜欢</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yr flatpak-kcm discover</span><br></pre></td></tr></table></figure>
<h4 id="mysql">mysql</h4>
<p>密码设置了 <code>12345678</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S mariadb</span><br><span class="line"><span class="built_in">sudo</span> mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now mysqld</span><br><span class="line"><span class="built_in">sudo</span> systemctl status mysqld</span><br><span class="line"><span class="built_in">sudo</span> mysqladmin -u root password <span class="string">&quot;12345678&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mysql -uroot -p12345678&quot;</span></span><br></pre></td></tr></table></figure>
<p>比如我要设置 slurm 相关的数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建slurm单独的mysql用户，只本地访问即可，所以密码12345678就可以</span></span><br><span class="line">create user <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;12345678&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建基础数据库</span></span><br><span class="line">create database slurm_acct_db;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许slurm用户访问</span></span><br><span class="line">grant all on slurm_acct_db.* TO <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建另一个，这个不强制，但是建议，如果不创建，后面slurm配置需要改，所以还是创建吧</span></span><br><span class="line">create database slurm_job_db;</span><br><span class="line"></span><br><span class="line">grant all on slurm_job_db.* TO <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>配置文件在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/my.cnf</span><br></pre></td></tr></table></figure>
<h2 id="nvidia-显卡">NVIDIA 显卡</h2>
<p>先说环境，注意我用的 <code>linux-lts</code> 而不是
<code>linux</code>，所以安装 <code>nvidia</code> 注意也变成了
<code>nvidia-lts</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">archlinux-keyring 20230504-1</span><br><span class="line">linux-api-headers 6.3-1</span><br><span class="line">linux-firmware 20230404.2e92a49f-1</span><br><span class="line">linux-firmware-whence 20230404.2e92a49f-1</span><br><span class="line">linux-lts 6.1.30-1</span><br><span class="line">linux-lts-headers 6.1.30-1</span><br><span class="line">util-linux 2.39-3</span><br><span class="line">util-linux-libs 2.39-3</span><br><span class="line"></span><br><span class="line">nvidia-lts 1:530.41.03-11</span><br><span class="line">nvidia-settings 530.41.03-1</span><br><span class="line">nvidia-utils 530.41.03-1</span><br></pre></td></tr></table></figure>
<h3 id="还原-bugs">还原 bugs</h3>
<p>我直接运行以下命令，然后 <code>重启</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yay -S nvidia-lts</span><br></pre></td></tr></table></figure>
<p><code>重启</code> 以后，输入 <code>nvidia-smi</code> 提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NVIDIA-SMI has failed because it couldn<span class="string">&#x27;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</span></span><br></pre></td></tr></table></figure>
<p>其实他的意思就是，现在驱动根本没起作用</p>
<h3 id="正确方法">正确方法</h3>
<p>以下内容全部是看文档解决的，<a
href="https://wiki.archlinuxcn.org/wiki/NVIDIA">文档在这里</a>，我忽略了显卡是否支持这一步骤，我的显卡
<code>GeForce 1060</code></p>
<ol start="0" type="1">
<li><p>安装驱动</p>
<blockquote>
<p>注意我用的 <code>linux-lts</code> 而不是 <code>linux</code>，所以安装
<code>nvidia</code> 注意也变成了 <code>nvidia-lts</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S nvidia-lts</span><br></pre></td></tr></table></figure></li>
<li><p>拉黑 <code>kms</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/mkinitcpio.conf</span><br></pre></td></tr></table></figure>
<p>找到这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HOOKS=(base udev autodetect modconf kms keyboard keymap consolefont block filesystems fsck)</span><br></pre></td></tr></table></figure>
<p>删除其中的 <code>kms</code>，防止 initramfs 包含 nouveau
模块</p></li>
<li><p>更新 <code>initramfs</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mkinitcpio -P</span><br></pre></td></tr></table></figure></li>
<li><p>更新 xorg 配置</p>
<blockquote>
<p>很重要，不然启动黑屏（但是 ssh 能连接上）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nvidia-xconfig</span><br></pre></td></tr></table></figure></li>
<li><p>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="其他">其他</h2>
<p>如果 <code>pandoc</code> 更新太频繁，不想（或者直接安装
<code>pandoc-bin</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>
<p>修改这一行，如果没有特殊需要，pandoc 其实安装
<code>yay pandoc-bin</code> 更好一些</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">IgnorePkg  = pandoc</span><br></pre></td></tr></table></figure>
<p>gnome 主题中，qt 应用不是黑色、gtk3 的老应用太丑</p>
<p><a href="https://github.com/lassekongo83/adw-gtk3">adw-gtk3</a>
可以解决</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/3513d90f.html">https://yuhldr.github.io/posts/3513d90f.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>archlinux</tag>
        <tag>kde</tag>
      </tags>
  </entry>
  <entry>
    <title>声子态密度计算</title>
    <url>/posts/d5c2f773.html</url>
    <content><![CDATA[<h2 id="声子态密度说明">声子态密度说明</h2>
<p>先理解一下声子态密度（PDOS）吧：</p>
<p>定义：单位频率间隔内的状态数(振动模式数目)</p>
<p>它与声子色散（PDC）关系是有关系的，前面一节，已经给出了色散关系的求解方法（虽然最后我也有点懵）</p>
<ul>
<li>色散关系其实就是每个波失对应的频率</li>
<li>声子态密度是，每个频率的声子对应的概率</li>
</ul>
<p>两者其实仅仅是横纵坐标交换，可以看这里，描述的挺形象的：<a
href="https://www.joezhouman.com/2021/03/04/PdosAndPdc.html">态密度（PDOS）曲线和声子色散曲线（PDC）的联系
- Joe ZhouMan's blog</a></p>
<hr />
<p>一般情况下，计算声子态密度就可以了，因为色散关系的线条实在是太多了（3N个：3个光学枝，3(N-1)个声学支），以石墨烯为例，每个晶胞2个原子，所以是6条线，但是如果要画石墨烯的，就太可怕了，随着直径增加，就太多了</p>
<ul>
<li>高频声子，更容易热输运</li>
</ul>
<p>一般情况，我是通过 <code>LAMMPS</code>
进行分子动力学模拟的，可以输出每一步某些或全部原子的速度、位置等信息，所以接下来，通过原子速度计算比较方便
所用到的是 <a
href="https://journals.aps.org/pr/abstract/10.1103/PhysRev.188.1407">Computer
Simulation of the Lattice Dynamics of Solids</a></p>
<p><span class="math display">\[
    PDOS(\omega)=\int \frac{&lt;\sum_{i} v_{i}\left(t_{0}\right) \cdot
v_{i}\left(t_{0}+t\right)&gt;}{&lt;\sum_{i} v_{i}\left(t_{0}\right)
\cdot v_{i}\left(t_{0}\right)&gt;} e^{-2 \pi i \omega t} d t
\]</span></p>
<p>主要使用这里的代码：</p>
<ul>
<li><a
href="https://zhuanlan.zhihu.com/p/390774537">基于LAMMPS原子速度轨迹文件计算声子态密度的python代码</a></li>
</ul>
<p>参考这些</p>
<ul>
<li><a
href="https://zhuanlan.zhihu.com/p/346345005">怎么用lammps输出原子速度计算声子谱</a></li>
<li><a
href="https://zhuanlan.zhihu.com/p/94977611">通过lammps输出速度计算VODS</a></li>
<li><a
href="https://zhuanlan.zhihu.com/p/212958088">关于Lammps计算声子态密度（PDOS）的Matlab接口文件改进</a></li>
</ul>
<h2 id="计算文件以及说明">计算文件以及说明</h2>
<h3 id="文件说明">文件说明</h3>
<p>我这里给一个已经测试过的、可以运行的代码，不用管代码什么意思，先运行了再说，里面包含
<code>matlab</code> 和 <code>python</code>
的代码，大致说一下运行逻辑</p>
<p>点我下载 <a
href="../data/pdos/pdos.zip">pdos</a>，文件解压以后，共6个文件</p>
<ul>
<li><p>4040CNT_20nm.in</p>
<p>lammps脚本文件</p></li>
<li><p>BNC.tersoff</p>
<p>势能文件</p></li>
<li><p>4040CNT_20nm.data</p>
<p>模型文件：20nm 长的碳纳米管，结构为 <code>m=n=40</code></p></li>
<li><p>Rebuild_data.m</p>
<p>matlab函数：处理lammps生成的速度、位移文件</p></li>
<li><p>find_pdos.m</p>
<p>matlab函数：计算pdos以及速度自关联函数</p></li>
<li><p>plot_pdos.m</p>
<p>matlab主函数：直接运行，计算声子态密度</p></li>
<li><p>pdos.py</p>
<p>python函数，计算声子态密度，与matlabb效果一直，并且部分中文注释</p></li>
</ul>
<p><code>4040CNT_20nm.in</code> 整个模拟是 20nm 长的碳纳米管，结构为
<code>m=n=40</code>，模拟分3个阶段（4个run）：</p>
<ul>
<li>松散100000步；</li>
<li>平衡100000步</li>
<li>然后输出5000步的原子（只有中间的 <strong>8-12nm</strong>
的纳米管部分）坐标速度信息（用来计算pdos）；</li>
<li>（与pdos无关，已经注释掉）非平衡模拟1500000步得到热整流系数</li>
</ul>
<h3 id="模拟计算步骤">模拟计算步骤</h3>
<ol type="1">
<li><p>LAMMPS运行脚本 <code>4040CNT_20nm.in</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lmp -<span class="keyword">in</span> 4040CNT_20nm.<span class="keyword">in</span></span><br></pre></td></tr></table></figure></p>
<p>这将会得到3个文件：</p>
<ul>
<li>log.4040CNT_20nm.txt：日子</li>
<li>log.lammps：日志</li>
<li>4040CNT_20nm_voutput_all.lammpstrj：第三个run5000步，输出的了中间8-12纳米的原子的速度位移坐标</li>
</ul></li>
<li><p>使用 4040CNT_20nm_voutput_all.lammpstrj 计算 pdos</p>
<ul>
<li><p>如果你用的是matlab：其中 <code>*.m</code> 结尾的matlab代码，运行
<code>plot_pdos.m</code> 即可</p></li>
<li><p>如果你和我一样喜欢开源的python，运行 <code>pdos.py</code>
即可，部分注释我用了中文，容易看一些</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python pdos.py</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>计算的是整体声子如果要计算某一个方向的，修改引用的速度，python文件153行</p>
<p>这将得到4个文件</p>
<ul>
<li><p>4040CNT_20nm_voutput_all.npy：<code>4040CNT_20nm_voutput_all.lammpstrj</code>
的txt文件保存为numpy的文件，方便读取，速度会快几十倍</p></li>
<li><p>4040CNT_20nm_voutput_all_vacf.npy：归一化的速度自关联函数数据</p></li>
<li><p>4040CNT_20nm_voutput_all_pdos.npy：pdos 数据</p></li>
<li><p>pdos.pdf：使用上面这个文件画出的分子态密度图</p>
<figure>
<img src="/images/2022/phy/pdos.png" alt="pdos" />
<figcaption aria-hidden="true">pdos</figcaption>
</figure>
<p>cnt热导率高，从声子角度来看，主要为高频声子，与这里基本上是对应的<a
href="https://pubs.rsc.org/en/content/articlelanding/2015/cp/c5cp03984c">Enhancement
of heat conduction in carbon nanotubes filled with fullerene
molecules</a></p>
<figure>
<img src="/images/2022/phy/cnt_pdos_all.png" alt="pdos" />
<figcaption aria-hidden="true">pdos</figcaption>
</figure></li>
</ul></li>
</ol>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/d5c2f773.html">https://yuhldr.github.io/posts/d5c2f773.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>lammps</tag>
        <tag>pdos</tag>
      </tags>
  </entry>
  <entry>
    <title>声子与色散关系复习-预习</title>
    <url>/posts/9553fedc.html</url>
    <content><![CDATA[<p>理解不够，后续再学习补充</p>
<h2 id="回顾色散关系求解过程">回顾色散关系求解过程</h2>
<p>先说单链的色散关系，与之前波动方程求解类似，再大致说一遍，如图单链</p>
<figure>
<img src="./../images/2022/dl.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<p>第n原子的位移为 <span
class="math inline">\(u_n\)</span>，之间的势能关系</p>
<p><span class="math display">\[ F_n=\beta (u_n-u_{n-1} +
u_{n+1}-u_n)\]</span></p>
<p>运动方程为：</p>
<p><span class="math display">\[F=ma \rightarrow
m\frac{d^2u_n}{dt^2}=\beta(u_{n+1}+u_{n-1}-2u_{n})\]</span></p>
<p>这样的线性齐次方程求解为</p>
<p><span class="math display">\[u_{nq}=Ae^{i(\omega t-naq)} \qquad
q=\frac{2\pi}{\lambda}\]</span></p>
<p><span class="math inline">\(q\)</span>
是波数，意思就是，位移与时间的关系有很多个解，<span
class="math inline">\(q\)</span> 可以取整数 <span
class="math inline">\(1,2,3,...\)</span>，<span
class="math inline">\(n\)</span> 指得还是第几个原子，具体为什么，看 <a
href="./38767">波动方程求解2-分离变量法</a></p>
<p><span class="math inline">\(\omega\)</span> 是角频率，<span
class="math inline">\(\lambda\)</span> 是波长</p>
<p>如果再把这个方程代回运动方程，可以得到</p>
<p><span
class="math display">\[\omega=2\sqrt{\frac{\beta}{m}}|sin\frac{1}{2}aq|\]</span></p>
<p>这个就是<strong>色散关系</strong>，可以看到原子频率与 <span
class="math inline">\(n\)</span>
无关，也就是说，所有原子以相同频率振动，区别仅仅是相位差，相邻原子的相位差为
<span class="math inline">\(qa\)</span></p>
<p>通常把 <span class="math inline">\(\omega\)</span> 与 <span
class="math inline">\(q\)</span> 的关系成为色散关系</p>
<p>对于均匀弹性介质，运动方程为</p>
<p><span
class="math display">\[\frac{d^2u}{dt^2}=\frac{E}{\rho}\frac{\partial^2u}{\partial
x^2}\]</span></p>
<p>可以得到色散关系为</p>
<p><span
class="math display">\[\omega=\sqrt{\frac{E}{\rho}}q\]</span></p>
<p>需要注意的是，这是<strong>格波</strong>，<span
class="math inline">\(x\)</span>只能取<span
class="math inline">\(na\)</span>格点位置的孤立值</p>
<h2 id="格波的物理意义">格波的物理意义</h2>
<p>前面求解中格波</p>
<p><span class="math display">\[u_{nq}=Ae^{i(\omega t-naq)}\]</span></p>
<p>原子振动以波的形式在晶体中传播，波的周期为 <span
class="math inline">\(\frac{2\pi}{q}\)</span>，即，原子相距 <span
class="math inline">\(\frac{2\pi}{q}\)</span> 时具有相同的振幅和相位</p>
<figure>
<img src="/images/2022/gebo.png" alt="格波" />
<figcaption aria-hidden="true">格波</figcaption>
</figure>
<p>这里的波数 <span class="math inline">\(q=q+\frac{2\pi}{a}\times
m\)</span></p>
<p>一维链的第一布里渊区即</p>
<p><span class="math display">\[-\frac{\pi}{a}&lt; q &lt;
\frac{\pi}{a}\]</span></p>
<p>第一布里渊区指得就是，像上面那个图一样，这些原子正好完成一个完整的振动周期</p>
<p>这个方程 <span class="math inline">\(u_{nq}=Ae^{i(\omega
t-naq)}\)</span> 和 <span
class="math inline">\(\omega=2\sqrt{\frac{\beta}{m}}|sin\frac{1}{2}aq|\)</span>可以看到</p>
<ol type="1">
<li>n固定，也就是只看某一个原子，q确定以后，随着时间t的变化，变化为正弦函数，改变q意味着，振动频率加快</li>
<li>t固定，也就是某一时刻，看整个链的原子，也是个正弦函数，波数q也就意味着，整个链也会由一个完整周期变为2个周期、3个周期、……、q个周期</li>
</ol>
<h2 id="布里渊区">布里渊区</h2>
<p>布里渊区一般在倒易空间，什么意思呢，其实就是<span
class="math inline">\(2\pi\)</span>除以现实中的向量，好处是后面的计算不至于波长出现无限</p>
<p>现实中的晶格之间向量为 <span class="math inline">\(\vec{a}_1 \quad
\vec{a}_2\)</span>，倒格子中的向量为 <span
class="math inline">\(\vec{b}_1 \quad
\vec{b}_2\)</span>，他们的关系是</p>
<p><span class="math display">\[\vec{b}_i \times \vec{a}_j = 2\pi
\delta_{ij}\]</span></p>
<p><span class="math display">\[\delta_{ij}=\begin{cases}
1 &amp;(i=j)\\
0\quad &amp;(i\neq j)
\end{cases}\]</span></p>
<h2 id="色散关系图解">色散关系图解</h2>
<p>前面求解出来 <span
class="math inline">\(\omega=2\sqrt{\frac{\beta}{m}}|sin\frac{1}{2}aq|\)</span>，如果把图画出来</p>
<p><img src="/images/2022/sesan.png" alt="色散" />，</p>
<h2 id="常见词">常见词</h2>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E9%95%BF">波长</a>
(<span class="math inline">\(\lambda\)</span>)，一个周期的长度</li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E6%95%B8">波数</a>
(<span class="math inline">\(q\)</span>或<span
class="math inline">\(k\)</span>)：每2<span
class="math inline">\(\pi\)</span>长度有多少个波长 <span
class="math inline">\(q=\frac{2\pi}{\lambda}\)</span>："角频率是单位时间内的角度变化，而波数为单位长度内的角度变化，因此波数即是空间上的角频率。波数对应矢量为波矢"。</li>
<li><a
href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%8C%85">波包</a>：点波包，看维基百科的动图</li>
<li>群速度：波包传播的速度</li>
<li>相速度，相位传播的速度，两个的区别在于，很多波不是完全大小一样的，把几个大小不同的波放一块是一个波包，这个波包的传递速度是群速度，无论大波还是小波，都有相位，比如都有波峰，而波峰的速度就是相速度，这个不太好理解，<a
href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E9%80%9F%E5%BA%A6">点我看动图</a>，所以一般相速度大于群速度</li>
<li>长波极限：波数<span class="math inline">\(q \rightarrow
0\)</span>即波长无穷大</li>
<li>声学支：<span class="math inline">\(q\rightarrow 0 \quad \omega
\rightarrow 0\)</span>，只有三个，也就是对应整体的三个自由度 <img
src="../images/2022/shengxuezhi.png" alt="声学支光学支图解" />，</li>
<li>态密度函数（PDOS）：单位频率间隔内的状态数(振动模式数目)，与声子色散关系的关联，<a
href="https://www.joezhouman.com/2021/03/04/PdosAndPdc.html">看这里</a></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/9553fedc.html">https://yuhldr.github.io/posts/9553fedc.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>phana</tag>
      </tags>
  </entry>
  <entry>
    <title>lammps声子谱配置与计算</title>
    <url>/posts/db8c1b0a.html</url>
    <content><![CDATA[<p>如果对lammps源码编译安装完全不懂，先看这个 <a
href="./320.html">Linux系统源码编译安装LAMMPS</a></p>
<p>其实也就是<code>安装依赖</code>、<code>下载源码</code>、<code>散步编译</code>就ok，下面简单写一下</p>
<h2 id="lammps依赖">lammps依赖</h2>
<p>为了能输出视频，对于ubuntu20.04需要安装依赖，顺带配置一下python支持，GPU就不配置了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -E apt-get install git python3-pip build-essential cmake automake libtool -y;</span><br></pre></td></tr></table></figure>
<p>lammps对python的支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-pip -y</span><br></pre></td></tr></table></figure>
<p>lammps视频输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ffmpeg gzip -y</span><br></pre></td></tr></table></figure>
<p>lammps并行支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libopenmpi-dev openmpi-bin openmpi-common openmpi-doc</span><br></pre></td></tr></table></figure>
<p>lammps声子依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fftw3 libfftw3-dev libfftw3-bin -y</span><br></pre></td></tr></table></figure>
<p>其中岂不是还缺一些东西，我也记不清了，安装时出现报错了直接百度，基本能找到</p>
<h2 id="编译安装lammps">编译安装lammps</h2>
<p>下载源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lammps/lammps.git</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -D PKG_PHONON=on -D PKG_KSPACE=on -D PKG_MANYBODY=<span class="built_in">yes</span> -D -D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on -D PKG_PYTHON=on ../cmake</span><br></pre></td></tr></table></figure>
<p>其中 <code>PKG_MANYBODY</code> 为我用的势能所需</p>
<h2 id="声子色谱">声子色谱</h2>
<p>我这里用的方法是上海交大的老师开源程序</p>
<p>lammps相关命令的接口为 <code>fix_phonon</code>，也就是这个页面：<a
href="https://github.com/lammps/lammps/tree/develop/src/PHONON">PHONON</a>，可以看到其中的说明，示例文件在这里
<a
href="https://github.com/lammps/lammps/tree/develop/examples/PACKAGES/phonon">phonon</a>，相关的开源主页在
<a
href="https://github.com/lingtikong/phana">lingtikong-phana</a>，<code>clone</code>
下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lingtikong/phana</span><br></pre></td></tr></table></figure>
<p><strong>其实</strong>直接使用编译好的文件
<code>precompiled/phana</code> 也行，可以跳过安装，直接进入测试步骤：<a
href="#重复示例">重复示例</a>。(但是我喜欢自己编译)</p>
<h3 id="安装">安装</h3>
<p>这个库，编译时依赖四个库
<code>clapack/3.2.1</code>、<code>tricubic/1.0</code>、<code>spglib/1.9.7</code>、<code>fftw/3.3.7</code>，其中
<code>clapack</code> 和 <code>tricubic</code>是必须的</p>
<blockquote>
<p>如果是mac，先自己百度把 <code>brew</code>
配置好，然后终端输入如下命令，安装
<code>gcc</code>、<code>libtool</code>、<code>automake</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install gcc libtool automake</span><br></pre></td></tr></table></figure>
<h4 id="phana依赖">phana依赖</h4>
<p><code>lib</code> 文件夹里，直接按照 <code>README</code>编译 clapack
和 tricubic</p>
<blockquote>
<p>如果要修改依赖的安装路径，比如 MAC电脑，建议安装到
<code>/usr/local/opt</code> 而不要安装到
<code>/opt</code>：每个<code>./configure</code>
后面的安装路径修改一下，并且 Makefile 里面的 <code>/opt/</code>
也对应修改一下</p>
</blockquote>
<h4 id="编译phana">编译phana</h4>
<p>如果是linux，这一步不建议，直接跳过自己编译，MAC电脑必须自己编译。</p>
<p>编译phana退项目根目录，只要两个必须库，需要注释掉几行代码，打开<code>Makefile</code>，</p>
<p>注释掉<code>spglib/1.9.7</code>、<code>fftw/3.3.7</code>相关的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # spglib, used to get the irreducible q-points</span></span><br><span class="line"><span class="comment"># # if SFLAG is not set, spglib won&#x27;t be used.</span></span><br><span class="line"><span class="comment"># SFLAG  = -DUseSPG</span></span><br><span class="line"><span class="comment"># SPGINC = -I/opt/spglib/1.9.7/include/spglib</span></span><br><span class="line"><span class="comment"># SPGLIB = -L/opt/spglib/1.9.7/lib -lsymspg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # FFTW 3， used to deduce the force constants in real space</span></span><br><span class="line"><span class="comment"># # if FFLAG is not set, fftw won&#x27;t be used.</span></span><br><span class="line"><span class="comment"># FFLAG  = -DFFTW3</span></span><br><span class="line"><span class="comment"># FFTINC = -I/opt/fftw/3.3.7/include</span></span><br><span class="line"><span class="comment"># FFTLIB = -L/opt/fftw/3.3.7/lib -lfftw3</span></span><br></pre></td></tr></table></figure>
<p>然后直接输入<code>sudo make</code>等待生成<code>phono</code>即可</p>
<h3 id="高级">高级</h3>
<p>另外两个库<code>spglib/1.9.7</code>、<code>fftw/3.3.7</code>也可以编译进去</p>
<h4 id="依赖">依赖</h4>
<p>这个项目不支持最新版的<code>spglib</code>，建议都按照对应的版本吧，版本信息都是在
<code>Makefile</code> 里查看到的</p>
<h5 id="spglib">spglib</h5>
<p><a
href="https://github.com/spglib/spglib/tags?after=v1.10.2">点我去这下载1.9.7</a>，别问我怎么知道的，多学习git与github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载解压</span></span><br><span class="line">wget https://github.com/spglib/spglib/archive/refs/tags/v1.9.7.zip</span><br><span class="line"></span><br><span class="line">unzip v1.9.7.zip &amp;&amp; <span class="built_in">cd</span> spglib-1.9.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看怎么编译</span></span><br><span class="line"><span class="built_in">cat</span> ./README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预编译，这些步骤需要automake libtool，前面已经安装了</span></span><br><span class="line"><span class="built_in">mkdir</span> m4 &amp;&amp; aclocal &amp;&amp; autoheader &amp;&amp; libtoolize &amp;&amp; <span class="built_in">touch</span> INSTALL NEWS README AUTHORS &amp;&amp; automake -acf &amp;&amp; autoconf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">./configure --prefix=/opt/spglib/1.9.7 &amp;&amp; make &amp;&amp; <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
<h5 id="fftw">fftw</h5>
<p>去官网下载3.3.7版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fftw.org/pub/fftw/fftw-3.3.7.tar.gz</span><br><span class="line"></span><br><span class="line">tar xzvf fftw-3.3.7.tar.gz &amp;&amp; <span class="built_in">cd</span> fftw-3.3.7</span><br><span class="line"></span><br><span class="line">./configure --prefix=/opt/fftw/3.3.7 &amp;&amp; make -j &amp;&amp; <span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
<h4 id="完全编译">完全编译</h4>
<p>回到刚才项目的根目录，<strong>不要注释</strong> 之前的那几行了</p>
<p>然后 <code>make</code> 编译，直至结束并出现 <code>phana</code>
这个文件，此时安装的那些依赖已经不需要了，只要这个可执行文件就可以了</p>
<h2 id="重复示例">重复示例</h2>
<p>把<code>lammps</code> 文件夹里的
<code>examples/PACKAGES/phonon</code> 复制到一个新的地方，然后打开</p>
<ul>
<li><p>in.graphene: lammps脚本文件</p></li>
<li><p>SiC.tersoff：势能</p></li>
<li><p>data.pos：lammps模型（一个10*10菱形的石墨烯）</p></li>
<li><p>map.in：石墨烯模型的晶格划分，每一列的含义分别是：</p>
<table>
<colgroup>
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
<col style="width: 20%" />
</colgroup>
<thead>
<tr>
<th>这个晶胞位于x轴第几个</th>
<th>y轴第几个</th>
<th>z轴第几个</th>
<th>这个原子是这个晶胞的第几个原子</th>
<th>原子编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>5</td>
</tr>
</tbody>
</table></li>
<li><p>in.disp:
刚才编译的phana用这个文件以及lmp模拟生成的文件可以生成disp.dat和pdisp.gnuplot，声子这一块我还没弄明白，后面学习一下再补充</p></li>
</ul>
<p>就只有这5个文件需要，其他的都是生成的</p>
<p>你可以运行一下模拟，也可以只是测试一下方才编译的phana</p>
<p>模拟·</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lmp -<span class="keyword">in</span> in.graphene</span><br><span class="line"><span class="comment"># 也可以并行，6指的是你的cpu核心数，而不是线程数，不要超线程</span></span><br><span class="line">mpirun -np 6 lmp -<span class="keyword">in</span> in.graphene</span><br></pre></td></tr></table></figure>
<p>这一步只是为了生成</p>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">phana Graphene.bin.6000000 &lt; in.disp</span><br></pre></td></tr></table></figure>
<p>生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">disp.dat和pdisp.gnuplot</span><br></pre></td></tr></table></figure>
<p>自动画图需要这个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gnuplot</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnuplot pdisp.gnuplot</span><br></pre></td></tr></table></figure>
<p>结束，生成图片 <code>pdisp.eps</code>
电脑一般都能打开，是个矢量图</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/db8c1b0a.html">https://yuhldr.github.io/posts/db8c1b0a.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>lammps</tag>
        <tag>phana</tag>
      </tags>
  </entry>
  <entry>
    <title>课题组集群slurm-21.08.5更新配置</title>
    <url>/posts/95da3501.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1c44ca4a9387dd0501ea78300b53df5b73dc1444db44d306dc12c4eaef9947a7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Slurm</category>
      </categories>
      <tags>
        <tag>icpcs</tag>
        <tag>slurm</tag>
      </tags>
  </entry>
  <entry>
    <title>brew切换国内源gitee</title>
    <url>/posts/23f4e01a.html</url>
    <content><![CDATA[<p>网上一般是清华或者中科大的，但是感觉很麻烦，而且gitee的更稳定，并且一句命令就可以了</p>
<p>这里 <a href="https://gitee.com/brew-cn">brew-cn</a></p>
<p>一句话即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://gitee.com/brew-cn/use-brew-cn/raw/master/install.sh | bash -</span><br></pre></td></tr></table></figure>
<p>如果恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://gitee.com/brew-cn/use-brew-cn/raw/master/uninstall.sh | bash -</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/23f4e01a.html">https://yuhldr.github.io/posts/23f4e01a.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装配置rocketchat</title>
    <url>/posts/7233442f.html</url>
    <content><![CDATA[<p>如果你有域名，可以设置二级目录作为聊天域名</p>
<p>可选创建网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker network create --subnet 172.18.0.1/16 ldr</span><br></pre></td></tr></table></figure>
<h2 id="mongo">mongo</h2>
<p>设置文件夹，防止更新时数据丢失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/data/docker/apps/mongo/data/db</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/data/docker/apps/mongo/data/configdb</span><br></pre></td></tr></table></figure>
<p>数据库mongo，映射到本地目录
<code>/home/data/docker/apps/mongo/data</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run --name mongo --hostname ldr --net ldr --restart=always -v /home/data/docker/apps/mongo/data/db:/data/db -v /home/data/docker/apps/mongo/data/configdb:/data/configdb  -d mongo --replSet rs0 --oplogSize 128</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker <span class="built_in">exec</span> -ti mongo mongo --<span class="built_in">eval</span> <span class="string">&quot;printjson(rs.initiate())&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="rocket.chat">rocket.chat</h2>
<p>设置文件夹，防止更新时数据丢失</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/data/docker/apps/rocketchat/app/uploads</span><br></pre></td></tr></table></figure>
<p>rocket.chat，映射到本地目录
<code>/home/data/docker/apps/rocketchat/app/uploads</code>，注意设置hostname，不然以后更新会出问题</p>
<p>注意这个换成你的网页地址 <code>https://test.com/chat</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run --name rocketchat --restart=always --hostname ldr --net ldr -p 82:3000 -v /home/data/docker/apps/rocketchat/app/uploads:/app/uploads --<span class="built_in">link</span> mongo --<span class="built_in">env</span> ROOT_URL=https://test.com/chat --<span class="built_in">env</span> MONGO_OPLOG_URL=mongodb://mongo:27017/local --<span class="built_in">env</span> MONGO_URL=mongodb://mongo:27017/meteor -d rocket.chat</span><br></pre></td></tr></table></figure>
<p>打开开</p>
<p>打开本地 <a href="http://localhost:82">http://localhost:82</a></p>
<p>nginx配置二级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location /chat/ &#123;</span><br><span class="line">    <span class="comment"># 指向当前的某个服务端口</span></span><br><span class="line">    proxy_pass http://localhost:82;</span><br><span class="line">    <span class="comment">#设置请求头，并将头信息传递给服务器端</span></span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/7233442f.html">https://yuhldr.github.io/posts/7233442f.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>chat</tag>
      </tags>
  </entry>
  <entry>
    <title>oneapi安装</title>
    <url>/posts/4bdf01b7.html</url>
    <content><![CDATA[<p><code>Intel Parallel Studio XE</code>
是付费的，学生账号可以免费试用一年，但是今年好像没找到如何续费，直接用替代产品
<code>oneAPI</code>，也是 <code>intel</code> 他们家的，这里下载，<a
href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/base-toolkit-download.html">Download
the Intel® oneAPI Base Toolkit</a></p>
<p>我选择的是 <code>apt</code> 或者 <code>yum</code>
的在线方法，方便以后更新，安装位置在 <code>/opt/intel/oneapi</code></p>
<h3 id="ubuntu">ubuntu</h3>
<ul>
<li>apt：<a
href="https://www.intel.com/content/www/us/en/develop/documentation/installation-guide-for-intel-oneapi-toolkits-linux/top/installation/install-using-package-managers/apt.html">APT官方安装文档</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \</span><br><span class="line">| gpg --dearmor | <span class="built_in">sudo</span> <span class="built_in">tee</span> /usr/share/keyrings/oneapi-archive-keyring.gpg &gt; /dev/null</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/oneAPI.list</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update -y &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install intel-basekit intel-hpckit -y</span><br></pre></td></tr></table></figure>
<h3 id="centos">centos</h3>
<ul>
<li>yum：<a
href="https://www.intel.com/content/www/us/en/develop/documentation/installation-guide-for-intel-oneapi-toolkits-linux/top/installation/install-using-package-managers/yum-dnf-zypper.html">YUM官方安装文档</a></li>
</ul>
<p>添加源，输入，回车</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tee</span> &gt; /tmp/oneAPI.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[oneAPI]</span></span><br><span class="line"><span class="string">name=Intel® oneAPI repository</span></span><br><span class="line"><span class="string">baseurl=https://yum.repos.intel.com/oneapi</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://yum.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>移动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /tmp/oneAPI.repo /etc/yum.repos.d</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y &amp;&amp; <span class="built_in">sudo</span> yum upgrade -y</span><br></pre></td></tr></table></figure>
<p>安装两个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install intel-basekit intel-hpckit</span><br></pre></td></tr></table></figure>
<h3 id="环境变量">环境变量</h3>
<p>不设置全局，因为关联的软件太多了，包括
<code>conda</code>、<code>python</code>、<code>ifort</code>、<code>c</code>
等，如果某些人使用</p>
<ul>
<li>临时使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/intel/oneapi/setvars.sh intel64</span><br></pre></td></tr></table></figure>
<p>应该显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:: initializing oneAPI environment ...</span><br><span class="line">   zsh: ZSH_VERSION = 5.8</span><br><span class="line">   args: Using <span class="string">&quot;<span class="variable">$@</span>&quot;</span> <span class="keyword">for</span> setvars.sh arguments: </span><br><span class="line">:: advisor -- latest</span><br><span class="line">:: ccl -- latest</span><br><span class="line">:: clck -- latest</span><br><span class="line">:: compiler -- latest</span><br><span class="line">:: dal -- latest</span><br><span class="line">:: debugger -- latest</span><br><span class="line">:: dev-utilities -- latest</span><br><span class="line">:: dnnl -- latest</span><br><span class="line">:: dpcpp-ct -- latest</span><br><span class="line">:: dpl -- latest</span><br><span class="line">:: inspector -- latest</span><br><span class="line">:: intelpython -- latest</span><br><span class="line">:: ipp -- latest</span><br><span class="line">:: ippcp -- latest</span><br><span class="line">:: ipp -- latest</span><br><span class="line">:: itac -- latest</span><br><span class="line">:: mkl -- latest</span><br><span class="line">:: mpi -- latest</span><br><span class="line">:: tbb -- latest</span><br><span class="line">:: vpl -- latest</span><br><span class="line">:: vtune -- latest</span><br><span class="line">:: oneAPI environment initialized ::</span><br></pre></td></tr></table></figure>
<ul>
<li>永久生效</li>
</ul>
<p>用户自己在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/intel/oneapi/setvars.sh intel64&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="测试">测试</h2>
<p>环境变量配置以后，查看ifort版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifort -V</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">应该显示</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">Intel(R) Fortran Intel(R) 64 Compiler Classic <span class="keyword">for</span> applications running on Intel(R) 64, Version 2021.5.0 Build 20211109_000000</span><br><span class="line">Copyright (C) 1985-2021 Intel Corporation.  All rights reserved.</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/4bdf01b7.html">https://yuhldr.github.io/posts/4bdf01b7.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>mpi</tag>
        <tag>intel</tag>
        <tag>fortran</tag>
        <tag>ifort</tag>
      </tags>
  </entry>
  <entry>
    <title>slurm集群用户使用指南</title>
    <url>/posts/d8e81662.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c873e85205081e73f2c9fba7ac48819e7be69d62c8ecb5f2b9562cea7620d602"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Slurm</category>
      </categories>
      <tags>
        <tag>icpcs</tag>
        <tag>slurm</tag>
      </tags>
  </entry>
  <entry>
    <title>slurm集群安装与踩坑详解</title>
    <url>/posts/bfa79f01.html</url>
    <content><![CDATA[<p>管理员部署 slurm
单机版或者集群版，单机版方便在自己电脑上直接提交一堆程序自动排队，无需等待一个计算完再计算另一个。</p>
<p>对于 ubuntu21.10 直接使用 apt 安装 slurm、openmpi
测试很完美，但是对于 ubuntu20.04 安装以后 mpi 有问题，后采用源码编译安装
<code>slurm</code>、<code>openmpi</code>、<code>lammps</code>，很完美！</p>
<p>由于服务器很多时候系统版本很
old，源安装不靠谱，推荐源码编译，我觉得能遇到的坑我遇到的差不多了……</p>
<ul>
<li>slurm: 21.08.5</li>
<li>openmpi: 4.1.2</li>
<li>lammps: 2021 年 12 月 25 日 git 版</li>
</ul>
<p>资料</p>
<ul>
<li><p>slurm</p>
<p><a href="https://slurm.schedmd.com/quickstart.html">官网文档：Slurm
Workload Manager - Quick Start User Guide</a></p>
<p><a href="https://slurm.schedmd.com/archive/">不同版本的文档</a></p>
<p><a href="https://github.com/SchedMD/slurm">源码 github</a></p>
<p><a
href="https://download.schedmd.com/slurm/">不同版本的压缩包下载</a></p></li>
<li><p>pmix: <a
href="https://github.com/openpmix/openpmix/releases">github
源码</a></p></li>
<li><p>openmpi：<a
href="https://www.open-mpi.org/">官网下载压缩包即可</a></p></li>
</ul>
<h2 id="slurm-初步了解">slurm 初步了解</h2>
<p>一般情况下，一台服务器(<code>master</code>)即主节点用来登录，提交程序，另外一堆服务器(<code>node1</code>
<code>node2</code> <code>node3</code> ... <code>nodex</code>
..)用来计算，这些服务器需要有</p>
<ul>
<li>一个共同的 linux 账户管理系统，方便快速创建 linux
用户，暂时不管这个（可以用NIS协议：ypbind，yp-tools），</li>
<li>需要时间同步，暂时也不管这个（可以用网络时间协议: ntp）</li>
<li>需要有一块硬盘在每一个服务器上都能访问上面的数据，方便计算，暂时也不管这个（可以用网络文件系统
NFS）</li>
</ul>
<p>因为下面都是以单机（就只有一台电脑，既可以提交程序，也可以计算程序）为例，其他先不管</p>
<p><code>slurm</code> 一般意义上包含 3 个程序</p>
<ul>
<li><code>slurmdbd</code>:
这个只在主节点(master)上运行，用来同步各个节点之间的数据，一般情况下依赖于
mysql 处理数据即可</li>
<li><code>slurmctld</code>: 这也只在 master
上运行，用来控制其他计算节点</li>
<li><code>slurmd</code>:
这个只在计算节点上运行，同时会把一些数据传递到主节点上。</li>
</ul>
<p>如果是单机版，上面三个程序都要在这一台电脑上运行，看了上面的，再看官网的这个图大概就明白了</p>
<figure>
<img src="./../images/2021-12-26-00-00-51.png" alt="图解slurm" />
<figcaption aria-hidden="true">图解slurm</figcaption>
</figure>
<p>图可见官网：<a
href="https://slurm.schedmd.com/quickstart.html">这里</a></p>
<p>除了这些，我们还需要一个 <code>slurm</code>
内部用户权限信息管理的软件
<code>munge</code>，如果需要并行，尤其是依赖于 <code>openmpi</code>
的并行程序，比如 <code>lammps</code>，我们必须在编译 <code>slurm</code>
时启动 <code>pmi</code> 插件，都 2021 年了，一般用 <code>pmix</code>
(<code>pmix_v3</code>) 标准即可，这个标准 slurm 源码安装默认不支持</p>
<h2 id="源安装">源安装</h2>
<p>虽然不靠谱，但是我觉得以后会靠谱的</p>
<p>不靠谱的原因是，<code>ubuntu2004</code> 的 <code>slurm</code> 是
<code>19.08</code>，不支持 <code>mpix_v4</code>，所以用 apt 直接安装的
openmpi（默认是 4.0 的版本）编译 lammps，在 surm 里使用时会报错</p>
<p>但是，<code>ubuntu21.10</code> 的 <code>slurm</code> 对
<code>openmpi4</code> 支持很好，为了深入了解
<code>slurm</code>、<code>mpi</code>、<code>lammps</code>，我认为还是选择源码安装，这里的源安装留个记录，因为没有教程的情况下，这个小幅度的成功，有利于继续</p>
<p>至于怎么知道你安装的 <code>slurm</code> 支持哪种
<code>mpi</code>，安装以后输入 <code>srun --mpi=list</code>
即可去，<strong><em>切记 <code>openmpi</code> 的版本与
<code>slurm</code> 支持的 <code>mpi</code> 完全符合</em></strong>。</p>
<h3 id="安装软件">安装软件</h3>
<p>对于 <code>ubuntu</code> 来说，centos 一般情况把 <code>apt</code>
换成 <code>yum</code> 就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装用户权限管理 munge</span></span><br><span class="line"><span class="built_in">sudo</span> apt install munge</span><br><span class="line"><span class="comment"># 安装slurmdbd的数据库支持mysql，目前最新版一般都是mysql8了</span></span><br><span class="line"><span class="built_in">sudo</span> apt install mysql-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装slurm基础插件</span></span><br><span class="line"><span class="comment"># 不同系统版本不一样，所以最好是先搜索一下，注意 slurm/impish 0.4.3-2build4  这个软件不是slurm！</span></span><br><span class="line"><span class="built_in">sudo</span> apt search slurm | grep slurm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们只需安装 `slurm-wlm` 即可，除了slurmdbd其他几个都会被自动安装</span></span><br><span class="line"><span class="comment"># 但是不同系统版本不一样，这个名字都可能不一样，对于ubuntu20.04和ubuntu21.10都是这个</span></span><br><span class="line"><span class="comment"># 但是版本也不一样，ubuntu20.04是slurm19，ubuntu21.04是slurm20，但是现在最新版是slurm21</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install slurm-wlm slurmdbd</span><br><span class="line"><span class="comment"># 注意，包含 `emulator` 的那两个不要安装，否则会报错</span></span><br></pre></td></tr></table></figure>
<p>这就安装完了，需要配置 数据库 和 slurm.conf 以及 slurmdbd.conf
两个文件，在后面的源码编译安装中会详细介绍</p>
<h2 id="源码编译安装">源码编译安装</h2>
<p>我都单独安装在 <code>/usr/local</code>
里面了，每个软件单独创建文件夹，没有撒在这个目录里，因此需要设置环境变量</p>
<p>我准备在 <code>~/code/slurm_data</code> 这个文件夹里编译</p>
<p>你怎么解压下载的源码都行，我用了 <a href="./fa905576.html">终端工具
oh-my-zsh 与 p10k 国内镜像安装</a> 的解压插件直接解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">x 压缩包文件名</span><br></pre></td></tr></table></figure>
<p>要注意，github 下载的这个 release 与 git clone 源码不一样，这个不用
auto-tool 那一步，直接三步走编译安装即可</p>
<h3 id="依赖">依赖</h3>
<p>对于ubuntu20.04依赖如下，其他的根据报错，自己修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -E apt-get install git build-essential libssl-dev mysql-client mysql-server libmysql++-dev ffmpeg python3-pip openssh-server cmake -y</span><br></pre></td></tr></table></figure>
<p>其中没有 <code>libmysql++-dev</code> slurm是没法使用mysql数据库的</p>
<p>对于 <code>opensuse</code> 系统数据库默认为 <code>mariadb</code>
所以需要的库为 <code>libmariadb-devel</code></p>
<p>我们需要</p>
<ul>
<li><p>mysql-server libmysql</p></li>
<li><p>munge</p></li>
<li><p>pmix</p>
<p>但是当前<code>slurm-21.08.5</code> 不支持最新版 pmix，需要这个<a
href="https://github.com/openpmix/openpmix/releases/tag/v3.2.3">pmix-3.2.3</a></p>
<p>怎么知道支持哪个？直接最新版，如果后面编译不支持，会有报错，这个在官网有说明，但是不在管理员文档里，在<a
href="https://slurm.schedmd.com/mpi_guide.html">用户文档</a>里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">checking <span class="keyword">for</span> pmix installation...</span><br><span class="line">configure: WARNING: unable to locate pmix installation</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="安装mysql">安装mysql</h4>
<p>这个各个系统更新都比较及时，直接安装吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install mysql-server</span><br></pre></td></tr></table></figure>
<p>但是注意这个还不够，编译slurm时会找不到，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt search libmysql | grep lib</span><br></pre></td></tr></table></figure>
<p>一般有一个类似这个的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libmysql++-dev/impish,now 3.2.5-2 amd64 [已安装]</span><br><span class="line">  MySQL C++ library bindings (development)</span><br></pre></td></tr></table></figure>
<p>安装上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libmysql++-dev</span><br></pre></td></tr></table></figure>
<h4 id="编译-munge">编译 munge</h4>
<p>去 github 下载，<a
href="https://github.com/dun/munge/releases">Releases ·
dun/munge</a></p>
<p><a
href="https://github.com/dun/munge/releases/download/munge-0.5.14/munge-0.5.14.tar.xz">https://github.com/dun/munge/releases/download/munge-0.5.14/munge-0.5.14.tar.xz</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/slurm_data</span><br><span class="line"></span><br><span class="line">wget https://github.com/dun/munge/releases/download/munge-0.5.14/munge-0.5.14.tar.xz</span><br><span class="line"></span><br><span class="line">x munge-0.5.14.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> munge-0.5.14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装目录 /usr/local/munge-0.5.14</span></span><br><span class="line">./configure --prefix=/usr/local/munge-0.5.14</span><br><span class="line"></span><br><span class="line"><span class="comment"># -j 指的是用所有cpu核心编译</span></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到刚才的目录</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个版本通用的连接</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s munge-0.5.14 munge &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<p>添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/profile.d/munge.sh</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MUNGE_HOME=/usr/local/munge</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MUNGE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MUNGE_HOME</span>/sbin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>重新打开 bash 以后生效</p>
<h4 id="编译-pmix">编译 pmix</h4>
<p>它又需要两个东西，注意版本号</p>
<ul>
<li>hwloc</li>
<li>libevent</li>
</ul>
<p>为什么我知道呢，因为直接会报错，所以先编译他们</p>
<p>pmix 也是去 github 找的，前面介绍了，slurm-21.08.5 只能用 pmix3</p>
<h5 id="编译-hwloc">编译 hwloc</h5>
<p><a href="https://github.com/open-mpi/hwloc/releases">Releases ·
open-mpi/hwloc</a>，我直接用的最新的，其实也是 2019 年的，下载这个文件
<a
href="https://github.com/open-mpi/hwloc/releases/download/hwloc-2.1.0/hwloc-2.1.0.tar.bz2">hwloc-2.1.0</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 hwloc，根据前面的介绍，去github找的</span></span><br><span class="line">wget https://github.com/open-mpi/hwloc/releases/download/hwloc-2.1.0/hwloc-2.1.0.tar.bz2</span><br><span class="line"></span><br><span class="line">x hwloc-2.1.0.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> hwloc-2.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装目录 /usr/local/hwloc-2.1.0</span></span><br><span class="line">./configure --prefix=/usr/local/hwloc-2.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># -j 指的是用所有cpu核心编译</span></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到刚才的目录</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个版本通用的连接</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s hwloc-2.1.0 hwloc &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<h5 id="编译-libevent">编译 libevent</h5>
<p><a href="https://github.com/libevent/libevent/releases">Releases ·
libevent/libevent</a>，我用的最新的，<a
href="https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz">libevent-2.1.12-stable.tar.gz</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 libevent，根据前面的介绍，去github找的</span></span><br><span class="line">wget https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz</span><br><span class="line"></span><br><span class="line">x libevent-2.1.12-stable.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> libevent-2.1.12-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装目录 /usr/local/libevent-2.1.12</span></span><br><span class="line">./configure --prefix=/usr/local/libevent-2.1.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># -j 指的是用所有cpu核心编译</span></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到刚才的目录</span></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个版本通用的连接</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s libevent-2.1.12 libevent &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<h5 id="最后编译-pmix">最后编译 pmix</h5>
<p>去 github 找，<a
href="https://github.com/openpmix/openpmix/releases">Releases ·
openpmix/openpmix</a>，前面说了，目前 slurm 只能用版本：</p>
<p><a
href="https://github.com/openpmix/openpmix/releases/download/v3.2.3/pmix-3.2.3.tar.bz2">https://github.com/openpmix/openpmix/releases/download/v3.2.3/pmix-3.2.3.tar.bz2</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 pmix，根据前面的介绍，去github找的</span></span><br><span class="line">wget https://github.com/openpmix/openpmix/releases/download/v3.2.3/pmix-3.2.3.tar.bz2</span><br><span class="line"></span><br><span class="line">x pmix-3.2.3.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pmix-3.2.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须置顶刚才的两个依赖路径，因为我把他们单独放在一个文件夹了，方便以后更新、删除</span></span><br><span class="line">./configure --prefix=/usr/local/pmix-3.2.3  --with-libevent=/usr/local/libevent --with-hwloc=/usr/local/hwloc</span><br><span class="line"></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s pmix-3.2.3 pmix &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<h3 id="编译安装-openmpi">编译安装 openmpi</h3>
<p>为了防止别人用其他方法安装的其他版本的 openmpi，在你的 slurm
里不能使用，你给他们编译好吧，注意必须使用
<strong>外部编译</strong>，即使用刚才的 pmix
和相关依赖编译安装，还缺少一个 <code>ucx</code>，一会 <code>slurm</code>
也可以用这个</p>
<h4 id="ucx">ucx</h4>
<p><a href="https://github.com/openucx/ucx/releases">Releases ·
openucx/ucx</a>，下载绿色的稳定版，直接下载初步编译的源码：</p>
<p><a
href="https://github.com/openucx/ucx/releases/download/v1.11.2/ucx-1.11.2.tar.gz">https://github.com/openucx/ucx/releases/download/v1.11.2/ucx-1.11.2.tar.gz</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 ucx，根据前面的介绍，去github找的</span></span><br><span class="line">wget https://github.com/openucx/ucx/releases/download/v1.11.2/ucx-1.11.2.tar.gz</span><br><span class="line"></span><br><span class="line">x ucx-1.11.2.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ucx-1.11.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须置顶刚才的两个依赖路径，因为我把他们单独放在一个文件夹了，方便以后更新、删除</span></span><br><span class="line"><span class="comment"># 对于archlinux，报错，最新版已经适配1.12.1</span></span><br><span class="line"><span class="comment"># 旧版可以参考这个解决，https://github.com/openucx/ucx/issues/7955</span></span><br><span class="line">./configure --prefix=/usr/local/ucx-1.11.2</span><br><span class="line"></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s ucx-1.11.2 ucx &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<h4 id="openmpi">openmpi</h4>
<p><a href="https://www.open-mpi.org/software/">官网下载</a>
最新的稳定版：<a
href="https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.2.tar.bz2">https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.2.tar.bz2</a>，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.2.tar.bz2</span><br><span class="line"></span><br><span class="line">x openmpi-4.1.2.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> openmpi-4.1.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须置顶刚才的两个依赖路径，因为我把他们单独放在一个文件夹了，方便以后更新、删除</span></span><br><span class="line">./configure --prefix=/usr/local/openmpi-4.1.2 --with-pmix=/usr/local/pmix --with-ucx=/usr/local/ucx --with-hwloc=/usr/local/hwloc --with-libevent=/usr/local/libevent</span><br><span class="line"></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s openmpi-4.1.2 openmpi &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<p>添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/profile.d/openmpi.sh</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OPENMPI_HOME=/usr/local/openmpi</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$OPENMPI_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$OPENMPI_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<p>重新打开 bash 以后生效</p>
<h3 id="编译-slurm">编译 slurm</h3>
<p><a href="https://download.schedmd.com/slurm/">官网下载</a>
最新的稳定版：<a
href="https://download.schedmd.com/slurm/slurm-21.08.5.tar.bz2">https://download.schedmd.com/slurm/slurm-21.08.5.tar.bz2</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://download.schedmd.com/slurm/slurm-21.08.5.tar.bz2</span><br><span class="line"></span><br><span class="line">x slurm-21.08.5.tar.bz2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> slurm-21.08.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须置顶刚才的两个依赖路径，因为我把他们单独放在一个文件夹了，方便以后更新、删除</span></span><br><span class="line">./configure --prefix=/usr/local/slurm-21.08.5 --with-pmix=/usr/local/pmix --with-munge=/usr/local/munge --with-hwloc=/usr/local/hwloc --with-ucx=/usr/local/ucx</span><br><span class="line"></span><br><span class="line">make -j</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s slurm-21.08.5 slurm &amp;&amp; <span class="built_in">cd</span> - &amp;&amp; <span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>
<p>添加环境变量，bash 全局的话可以放在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/profile.d/slurm.sh</span><br></pre></td></tr></table></figure>
<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SLURM_HOME=/usr/local/slurm</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SLURM_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SLURM_HOME</span>/sbin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$SLURM_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$SLURM_HOME</span>/lib/slurm:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<h3 id="连通节点与-master">连通节点与 master</h3>
<p>对于多台服务器需要，单机不需要</p>
<p>每一台服务器都如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有ssh，安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt install openssh-server openssh-sftp-server openssh-client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有，生成密钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加hosts</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;ip地址 名字&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="comment"># 比如</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;196.10.10.1 master&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;196.10.10.2 node1&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;196.10.10.3 node2&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>
<p>其中 <code>master</code> 可访问 <code>node</code></p>
<p>在 master 上输入，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master免密码访问node1</span></span><br><span class="line">ssh-copy-id node1</span><br><span class="line"><span class="comment"># 初次访问，必须</span></span><br><span class="line">ssh node1</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>包含数据库、slurm</p>
<h3 id="配置数据库">配置数据库</h3>
<blockquote>
<p>注意都是以源码编译安装为例，安装位置都是按照前面的来的</p>
</blockquote>
<p>接下来配置 <code>slurmdbd</code> 需要的数据库，这个即使源码安装
<code>slurm</code> 也需要</p>
<p>先修改个东西</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure>
<p>vim 会用吧，输入 <code>i</code> 添加下面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"> innodb_buffer_pool_size=1024M</span><br><span class="line"> innodb_log_file_size=64M</span><br><span class="line"> innodb_lock_wait_timeout=900</span><br></pre></td></tr></table></figure>
<p><code>:wq</code> 保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 然后启动mysql，并设置开机自启，如果只是开: sudo systemctl start mysql</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入mysql，默认root的mysql没有密码，不建议设置</span></span><br><span class="line"><span class="built_in">sudo</span> mysql</span><br></pre></td></tr></table></figure>
<p>创建 slurm 单独的用户和需要的数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建slurm单独的mysql用户，只本地访问即可，所以密码12345678就可以</span></span><br><span class="line">create user <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;12345678&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建基础数据库</span></span><br><span class="line">create database slurm_acct_db;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许slurm用户访问</span></span><br><span class="line">grant all on slurm_acct_db.* TO <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建另一个，这个不强制，但是建议，如果不创建，后面slurm配置需要改，所以还是创建吧</span></span><br><span class="line">create database slurm_job_db;</span><br><span class="line"></span><br><span class="line">grant all on slurm_job_db.* TO <span class="string">&#x27;slurm&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>下面的不要输入，但是有兴趣学习 mysql 可以入门</p>
<p>常用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除用户libmariadb-devel</span></span><br><span class="line"><span class="comment"># 查看有哪些数据库</span></span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个数据库的表格</span></span><br><span class="line">use slurm_acct_db;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个表格的杰哥</span></span><br><span class="line">describe 表格名字;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库和数据表</span></span><br><span class="line">drop database 数据库名;</span><br><span class="line">drop table 数据表名;</span><br></pre></td></tr></table></figure>
<h3 id="配置-slurmdbd.conf">配置 slurmdbd.conf</h3>
<blockquote>
<p>注意都是以源码编译安装为例，安装位置都是按照前面的来的</p>
</blockquote>
<p>详细可以看 <a
href="https://slurm.schedmd.com/slurmdbd.conf.html">官网
slurmdbd.conf</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArchiveEvents=yes</span><br><span class="line">ArchiveJobs=yes</span><br><span class="line">ArchiveResvs=yes</span><br><span class="line">ArchiveSteps=no</span><br><span class="line">ArchiveSuspend=no</span><br><span class="line">ArchiveTXN=no</span><br><span class="line">ArchiveUsage=no</span><br><span class="line">AuthInfo=/usr/local/munge/var/run/munge/munge.socket.2</span><br><span class="line">AuthType=auth/munge</span><br><span class="line">DbdHost=localhost</span><br><span class="line">DebugLevel=info</span><br><span class="line">PurgeEventAfter=1month</span><br><span class="line">PurgeJobAfter=12month</span><br><span class="line">PurgeResvAfter=1month</span><br><span class="line">PurgeStepAfter=1month</span><br><span class="line">PurgeSuspendAfter=1month</span><br><span class="line">PurgeTXNAfter=12month</span><br><span class="line">PurgeUsageAfter=24month</span><br><span class="line">LogFile=/var/log/slurmdbd.log</span><br><span class="line">PidFile=/var/run/slurmdbd.pid</span><br><span class="line">SlurmUser=root</span><br><span class="line">StoragePass=12345678</span><br><span class="line">StorageType=accounting_storage/mysql</span><br><span class="line">StorageUser=slurm</span><br><span class="line">StorageHost=localhost</span><br><span class="line">StoragePort=3306</span><br></pre></td></tr></table></figure>
<p>上面的配置直接复制的官网的，不同版本 slurm
有区别，但是我觉得区别不大，关键有几个点注意</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 使用munge</span><br><span class="line">AuthType=auth/munge</span><br><span class="line"></span><br><span class="line">; munge安装未知</span><br><span class="line">AuthInfo=/usr/local/munge/var/run/munge/munge.socket.2</span><br><span class="line"></span><br><span class="line">; 数据库位置，这个就行，因为slurmdbdb只在master上</span><br><span class="line">DbdHost=localhost</span><br><span class="line"></span><br><span class="line">; 我们就不要新建用户了，直接root更方便</span><br><span class="line">SlurmUser=root</span><br><span class="line"></span><br><span class="line">; 开启数据插件</span><br><span class="line">StorageType=accounting_storage/mysql</span><br><span class="line">; 数据库的新建用户</span><br><span class="line">StorageUser=slurm</span><br><span class="line">; 数据库这个用户的密码</span><br><span class="line">StoragePass=12345678</span><br><span class="line">; 数据库位置在master，也就是本地</span><br><span class="line">StorageHost=localhost</span><br><span class="line">; 数据库默认端口</span><br><span class="line">StoragePort=3306</span><br></pre></td></tr></table></figure>
<p>文件生成以后放在 <code>/usr/local/slurm/etc/slurmdbd.conf</code></p>
<p>如果是源安装，不在这里，而且不同版本不一样，一般是在<code>/etc/slurm-</code>
后面的名字不一样</p>
<h3 id="配置-slurm.conf">配置 slurm.conf</h3>
<blockquote>
<p>注意都是以源码编译安装为例，安装位置都是按照前面的来的</p>
</blockquote>
<p>这个去官网 <a
href="https://slurm.schedmd.com/configurator.html">Slurm System
Configuration Tool</a>
自动生成即可，不同版本不一样，其中比较重要的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 单机就是 localhost即可</span><br><span class="line">SlurmctldHost=localhost</span><br><span class="line"></span><br><span class="line">; 这个是mpi的默认值，用户输入 --mpi=mpix_v3 这时候会覆盖这个</span><br><span class="line">MpiDefault=pmix</span><br><span class="line"></span><br><span class="line">; 这个优先用cgroup，如果报错，换这个</span><br><span class="line">ProctrackType=proctrack/linuxproc</span><br><span class="line"></span><br><span class="line">; 下面这些都是数据库相关的，配置一下就行</span><br><span class="line">AccountingStorageHost=localhost</span><br><span class="line">; 合格是munge的位置</span><br><span class="line">AccountingStoragePass=/usr/local/munge/var/run/munge/munge.socket.2</span><br><span class="line">AccountingStorageType=accounting_storage/slurmdbd</span><br><span class="line">AccountingStorageUser=slurm</span><br><span class="line">JobCompHost=localhost</span><br><span class="line">JobCompLoc=slurm_job_db</span><br><span class="line">JobCompPass=12345678</span><br><span class="line">JobCompType=jobcomp/mysql</span><br><span class="line">JobCompUser=slurm</span><br><span class="line"></span><br><span class="line">; 这个是各个计算节点，单机的话直接 localhost就行，至于CPUs就是你的cpu核心数，错了也没事，一会开启时会有提示应该是多少，Sockets，cpu插槽数；CoresPerSocket每个插槽多少核心，ThreadsPerCore每个核心多少线程， RealMemory内存（不设置的话，用户申请--mem会报错）</span><br><span class="line">NodeName=localhost CPUs=6 Sockets=1 CoresPerSocket=6 ThreadsPerCore=1 RealMemory=32041 State=UNKNOWN</span><br><span class="line">PartitionName=ptt1 Nodes=ALL Default=YES MaxTime=INFINITE State=UP</span><br></pre></td></tr></table></figure>
<p>文件生成以后放在 <code>/usr/local/slurm/etc/slurm.conf</code></p>
<p>如果是源安装，不在这里，而且不同版本不一样，一般是在<code>/etc/slurm-</code>
后面的名字不一样</p>
<h2 id="管理员测试">管理员测试</h2>
<h3 id="开启">开启</h3>
<blockquote>
<p>注意都是以源码编译安装为例，安装位置都是按照前面的来的，
已经配置好了环境变量</p>
</blockquote>
<p>先开启 munge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root</span></span><br><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">munged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有报错，没有error就行</span></span><br><span class="line"><span class="built_in">cat</span> /usr/local/munge/var/log/munge/munged.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过几秒再看看，是否有问题</span></span><br><span class="line">ps aux | grep munge</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果包含类似这个的，就没问题</span></span><br><span class="line">root        1096  0.0  0.0 204152  3676 ?        Sl   12月25   0:01 /usr/local/munge/sbin/munged</span><br></pre></td></tr></table></figure>
<p>开启 slurmdbd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仍然在root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">slurmdbd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有报错，你启动以后的时间里没有error就行，之前的error没事</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/slurmdbd.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过几秒再看看，是否有问题</span></span><br><span class="line">ps aux | grep slurmdbd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果包含类似这个的，就没问题</span></span><br><span class="line">root        2631  0.0  0.0 288368 10012 ?        Ssl  12月25   0:00 /usr/local/slurm/sbin/slurmdbd -D</span><br></pre></td></tr></table></figure>
<p>开启 slurmctld</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仍然在root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">slurmctld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有报错，你启动以后的时间里没有error就行，之前的error没事</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/slurmctld.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过几秒再看看，是否有问题</span></span><br><span class="line">ps aux | grep slurmctld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果包含类似这个的，就没问题</span></span><br><span class="line">root        2631  0.0  0.0 288368 10012 ?        Ssl  12月25   0:00 /usr/local/slurm/sbin/slurmctld -D</span><br></pre></td></tr></table></figure>
<p>前面的没问题再开启 slurmd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仍然在root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line">slurmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有报错，你启动以后的时间里没有error就行，之前的error没事</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/slurmd.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错1，可能因为之前slurm.conf最后，服务器cpu等填的不对，这时候会有提示，根据那个改一下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错2，可能有cgroup相关的报错，之前slurm.conf，ProctrackType=proctrack/cgroup，改为ProctrackType=proctrack/linuxproc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过几秒再看看，是否有问题</span></span><br><span class="line">ps aux | grep slurmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果包含类似这个的，就没问题</span></span><br><span class="line">root        2631  0.0  0.0 288368 10012 ?        Ssl  12月25   0:00 /usr/local/slurm/sbin/slurmd -D</span><br></pre></td></tr></table></figure>
<h3 id="测试">测试</h3>
<p>重新打开 bash 以后生效</p>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srun --mpi=list</span><br></pre></td></tr></table></figure>
<p>正常能看到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srun: MPI types are...</span><br><span class="line">srun: pmix</span><br><span class="line">srun: pmix_v3</span><br><span class="line">srun: cray_shasta</span><br><span class="line">srun: none</span><br><span class="line">srun: pmi2</span><br></pre></td></tr></table></figure>
<h3 id="开机自启">开机自启</h3>
<p>一共 4 个自己编译安装的，用 systemd
进行管理启动，单机的话直接配置就行，如果是集群，</p>
<ul>
<li>master: munge slurmdbd slurmctld</li>
<li>node: munge slurmd</li>
</ul>
<h4 id="munge">munge</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/munge.service</span><br></pre></td></tr></table></figure>
<p>添加这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/systemd/system/munge.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=MUNGE authentication service</span><br><span class="line">Documentation=man:munged(8)</span><br><span class="line">After=network.target</span><br><span class="line">After=time-sync.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">EnvironmentFile=-/usr/local/mung/etc/default/munge</span><br><span class="line">ExecStart=/usr/local/munge/sbin/munged $OPTIONS</span><br><span class="line">PIDFile=/usr/local/munge/var/run/munge/munged.pid</span><br><span class="line">RuntimeDirectory=munge</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h4 id="slurmdbd">slurmdbd</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/slurmdbd.service</span><br></pre></td></tr></table></figure>
<p>添加这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /lib/systemd/system/slurmdbd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Slurm DBD accounting daemon</span><br><span class="line">After=network.target munge.service network-online.target mysql.service</span><br><span class="line">Wants=munge.service network-online.target mysql.service</span><br><span class="line">ConditionPathExists=/usr/local/slurm/etc/slurmdbd.conf</span><br><span class="line">Documentation=man:slurmdbd(8)</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/default/slurmdbd</span><br><span class="line">ExecStart=/usr/local/slurm/sbin/slurmdbd -D $SLURMDBD_OPTIONS</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">PIDFile=/var/run/slurmdbd.pid</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">TasksMax=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h4 id="slurmctld">slurmctld</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/slurmctld.service</span><br></pre></td></tr></table></figure>
<p>添加这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /lib/systemd/system/slurmctld.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Slurm controller daemon</span><br><span class="line">After=slurmdbd.service</span><br><span class="line">Wants=slurmdbd.service</span><br><span class="line">ConditionPathExists=/usr/local/slurm/etc/slurm.conf</span><br><span class="line">Documentation=man:slurmctld(8)</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/default/slurmctld</span><br><span class="line">ExecStart=/usr/local/slurm/sbin/slurmctld -D $SLURMCTLD_OPTIONS</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">PIDFile=/var/run/slurmctld.pid</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">TasksMax=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h4 id="slurmd">slurmd</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/slurmd.service</span><br></pre></td></tr></table></figure>
<p>添加这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /lib/systemd/system/slurmd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Slurm node daemon</span><br><span class="line">After=remote-fs.target slurmctld.service</span><br><span class="line">Wants=slurmctld.service</span><br><span class="line">ConditionPathExists=/usr/local/slurm/etc/slurm.conf</span><br><span class="line">Documentation=man:slurmd(8)</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/default/slurmd</span><br><span class="line">ExecStart=/usr/local/slurm/sbin/slurmd -D $SLURMD_OPTIONS</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">PIDFile=/var/run/slurmd.pid</span><br><span class="line">KillMode=process</span><br><span class="line">LimitNOFILE=131072</span><br><span class="line">LimitMEMLOCK=infinity</span><br><span class="line">LimitSTACK=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">TasksMax=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h4 id="测试systemd">测试systemd</h4>
<p>其实直接重启就行，如果不想重启，先把刚才测试的进程关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭slurm相关的</span></span><br><span class="line">ps aux | grep slurm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到类似这些</span></span><br><span class="line">root        2631  0.0  0.0 288368 10012 ?        Ssl  12月25   0:00 /usr/local/slurm/sbin/slurmdbd -D</span><br><span class="line">root        2632  0.0  0.0 766548 14736 ?        Ssl  12月25   0:36 /usr/local/slurm/sbin/slurmctld -D</span><br><span class="line">root        2633  0.0  0.0  73672  5860 ?        Ss   12月25   0:00 /usr/local/slurm/sbin/slurmd -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭，那些数字是从刚才里面找的</span></span><br><span class="line"><span class="built_in">kill</span> 2631 2632 2633</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭munge</span></span><br><span class="line">ps aux | grep munged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似</span></span><br><span class="line">root        1096  0.0  0.0 204152  3676 ?        Sl   12月25   0:01 /usr/local/munge/sbin/munged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="built_in">kill</span> 1096</span><br></pre></td></tr></table></figure>
<p>开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now mysql</span><br><span class="line">systemctl <span class="built_in">enable</span> --now munge</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now slurmdbd</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now slurmctld</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> --now slurmdbd</span><br></pre></td></tr></table></figure>
<p>查看开启状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status mysql</span><br><span class="line">systemctl status munge</span><br><span class="line"></span><br><span class="line">systemctl status slurmdbd</span><br><span class="line"></span><br><span class="line">systemctl status slurmctld</span><br><span class="line"></span><br><span class="line">systemctl status slurmdbd</span><br></pre></td></tr></table></figure>
<p>关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop mysql</span><br><span class="line">systemctl stop munge</span><br><span class="line"></span><br><span class="line">systemctl stop slurmdbd</span><br><span class="line"></span><br><span class="line">systemctl stop slurmctld</span><br><span class="line"></span><br><span class="line">systemctl stop slurmdbd</span><br></pre></td></tr></table></figure>
<p>开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysql</span><br><span class="line">systemctl start munge</span><br><span class="line"></span><br><span class="line">systemctl start slurmdbd</span><br><span class="line"></span><br><span class="line">systemctl start slurmctld</span><br><span class="line"></span><br><span class="line">systemctl start slurmdbd</span><br></pre></td></tr></table></figure>
<h3 id="查看集群">查看集群</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sinfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般应该是下面的</span></span><br><span class="line">PARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST</span><br><span class="line">ptt1*        up   infinite      1   idle localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更详细</span></span><br><span class="line">sinfo -N  -O <span class="string">&quot;nodelist:.6,partition:.10,available:.6,statelong:.12,memory:.12,allocmem:.10,freemem:.10,cpusstate:.16&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前计算任务</span></span><br><span class="line">squeue</span><br></pre></td></tr></table></figure>
<h3 id="添加用户">添加用户</h3>
<p>分3级
<code>Cluster</code>、<code>Account</code>、<code>User</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sacctmgr add cluster cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个只是分一下账户</span></span><br><span class="line">sacctmgr add account icpcs Cluster=cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个才是用户</span></span><br><span class="line">sacctmgr add user yuh Account=icpcs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">sacctmgr list Cluster</span><br><span class="line"></span><br><span class="line">sacctmgr list Account</span><br><span class="line"></span><br><span class="line">sacctmgr list User</span><br></pre></td></tr></table></figure>
<h3 id="管理员常用命令">管理员常用命令</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node1节点排空，不再接受程序提交</span></span><br><span class="line">scontrol update nodename=node1 state=drain reason=<span class="string">&#x27;停电节能&#x27;</span></span><br><span class="line"></span><br><span class="line">scontrol show node node5</span><br><span class="line"></span><br><span class="line"><span class="comment"># node8节点恢复</span></span><br><span class="line">scontrol update nodename=node8 state=resume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看ptt3分区状态</span></span><br><span class="line">sinfo -p ptt3</span><br><span class="line"><span class="comment"># 输出如下：单次运行最大14天</span></span><br><span class="line"><span class="comment"># PARTITION AVAIL  TIMELIMIT  NODES  STATE NODELIST</span></span><br><span class="line"><span class="comment"># ptt3         up 14-00:00:0      4  drain node[5-8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ptt3分区程序最大运行时间20160分钟。即14天</span></span><br><span class="line">scontrol update partition=ptt3 MaxTime=20160</span><br><span class="line"></span><br><span class="line"><span class="comment"># 彻底修改某个分区运行时间</span></span><br><span class="line">vim /usr/local/slurm/etc/slurm.conf</span><br><span class="line"><span class="comment"># 最后几行</span></span><br><span class="line"><span class="comment"># PartitionName=ptt3 Nodes=node[5-8] MaxTime=20160 State=UP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看任务</span></span><br><span class="line">sacct -j 264781</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某些用户user的账户account信息以及cpu限制</span></span><br><span class="line">sacctmgr list assoc format=Clusters,Account,User,qos,partition,GrpTRES,Priority</span><br></pre></td></tr></table></figure>
<h2 id="用户使用">用户使用</h2>
<p>看这里 ：<a href="./d8e81662.html">服务器与 SLURM 的使用</a></p>
<h2 id="lammps编译安装">LAMMPS编译安装</h2>
<p>看这里 ：<a href="./320.html">Linux系统源码编译安装LAMMPS</a></p>
<p>slurm提交请注意</p>
<p>申请一个核心一个线程，才最快即</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srun -n 72  --ntasks-per-core 1  --mem=5G lmp -<span class="keyword">in</span> file.in</span><br></pre></td></tr></table></figure>
<p>72为核心数，<code>--ntasks-per-core</code> 代表一个核心一个进程
<code>--mem=5G</code> 申请的内存，<code>file.in</code>
lammps脚本文件名</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/bfa79f01.html">https://yuhldr.github.io/posts/bfa79f01.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Slurm</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>lammps</tag>
        <tag>slurm</tag>
        <tag>mpi</tag>
        <tag>openmpi</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始-开发ubuntu版翻译软件</title>
    <url>/posts/f85bb316.html</url>
    <content><![CDATA[<h2 id="开发结果">开发结果</h2>
<p>先上图，开发结果如图：</p>
<p>软件可以随着系统主题，自动变化，翻译窗口如下：</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr>
<th style="text-align: center;">系统默认主题 yaru</th>
<th style="text-align: center;">第三方主题layan</th>
<th style="text-align: center;">第三方主题kimi</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><img src="../images/2021/lt/lt.png"
alt="主题2" /></td>
<td style="text-align: center;"><img
src="../images/2021/lt/lt-layan.png" alt="主题1" /></td>
<td style="text-align: center;"><img src="../images/2021/lt/lt-kimi.png"
alt="主题1" /></td>
</tr>
</tbody>
</table>
<h2 id="知识储备">知识储备：</h2>
<ol type="1">
<li>会一点点 <code>python</code>，起码能运行python程序</li>
<li>在使用 <code>ubuntu20.04</code> 系统</li>
</ol>
<h2 id="简介">简介</h2>
<p>灵感来源于这个软件：<a
href="https://github.com/fossfreedom/indicator-sysmonitor.git">indicator-sysmonitor开源项目</a>，so，我觉得我也可以……</p>
<p>目前基础功能已经完成如下</p>
<ol type="1">
<li>复制即可自动翻译，状态栏可暂停复制即翻译</li>
<li>系统截图到剪贴板，自动OCR识别并翻译</li>
<li>有时候一句话在文献里分成上下两页，复制半句翻译有问题，这时候点击左上角
<code>追加</code>，接下来复制的内容，会和前一次的复制内容，一起翻译</li>
</ol>
<p>源码以及具体如何使用看这里：</p>
<p><a
href="https://github.com/yuhldr/ldr-translate.git">开源项目：ldr-translate（兰译）</a></p>
<h2 id="开发过程">开发过程</h2>
<h3 id="环境依赖">环境依赖</h3>
<p>用的<code>python</code>语言，使用 <code>Gtk3</code>
相关的接口，在ubuntu20.04下可以直接开发，常驻状态栏用到了依赖
<code>gir1.2-appindicator3-0.1</code>，python用到了依赖
<code>requests</code></p>
<p>如果是ubuntu20.04最小安装，需要如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install make git python3-pip  gir1.2-appindicator3-0.1 </span><br></pre></td></tr></table></figure>
<h3 id="开发工具">开发工具</h3>
<p>用的 <a
href="https://code.visualstudio.com/">vscode，点我下载</a>，vscode侧栏安装几个依赖，搜索
<code>git</code> 安装前4个依赖，搜索 <code>python</code>
安装第一个依赖</p>
<h3 id="开发简介">开发简介</h3>
<p><a
href="https://github.com/yuhldr/ldr-translate.git">以开源开源：ldr-translate（兰译）</a></p>
<p>界面相关两个文件 <code>ldr-translate.py</code> 和
<code>ui_translate.py</code></p>
<ul>
<li><code>ldr-translate.py</code>：入口文件，运行它即可，或创建状态栏上的翻译小图标，并绑定复制信号，系统复制即可调用翻译窗口
<ul>
<li>状态栏 appindicator.Indicator()
<ul>
<li>菜单：Gtk.Menu()
<ul>
<li>翻译窗口显示或关闭：Gtk.MenuItem()</li>
<li>复制即翻译：开、关：Gtk.MenuItem()</li>
<li>分割线：Gtk.SeparatorMenuItem()</li>
<li>版本版权信息：Gtk.MenuItem()
<ul>
<li>版权信息窗口：Gtk.AboutDialog()</li>
</ul></li>
<li>完全退出：Gtk.MenuItem()</li>
</ul></li>
</ul></li>
</ul></li>
<li><code>ui_translate.py</code>：翻译窗口，界面关系如下
<ul>
<li>翻译主界面：Gtk.Window
<ul>
<li>标题栏：Gtk.HeaderBar()
<ul>
<li>设置：开发中：Gtk.Button()</li>
<li>关闭：Gtk.Button()</li>
</ul></li>
<li>主界面：Gtk.Box()
<ul>
<li>显示复制文本：
<ul>
<li>Gtk.ScrolledWindow()</li>
<li>Gtk.TextView()</li>
</ul></li>
<li>中间菜单：Gtk.Box()
<ul>
<li>翻译按钮：Gtk.Button()</li>
<li>翻译为某种语言：Gtk.ComboBoxText()</li>
<li>追加模式：Gtk.CheckButton()</li>
</ul></li>
<li>显示翻译以后的文本：
<ul>
<li>Gtk.ScrolledWindow()</li>
<li>Gtk.TextView()</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><code>config.py</code>：配置信息，比如百度等接口api</li>
<li><code>api/translate.py</code>：整合百度、腾讯等接口，方便扩展</li>
<li><code>api/server/baidu.py</code>：百度OCR和翻译接口</li>
<li><code>/ui/icon.png</code>、<code>/ui/icon.svg</code>：软件图标</li>
<li><code>data</code>：一些缓存文件或保存的配置</li>
</ul>
<h3 id="资料">资料</h3>
<p>上面这些控件怎么用，我一开始百度的，但是不靠谱，最后才找到一个好用的api文档，有解释，有示例，有图片，看这里</p>
<ul>
<li><a
href="https://athenajc.gitbooks.io/python-gtk-3-api/content/">Python
Gtk+3 API · Python GTK+ 3 API</a></li>
</ul>
<h3 id="用户安装">用户安装</h3>
<p>目前还不会打包，直接使用的make，挺简单，用户下载并解压源码，打开终端，进入源码文件夹，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装完成，终端输入 <code>ldr-translate</code> 或者直接点击
<code>兰译</code> 图标
<img src="/images/2021/lt/icon.png" width = "36" height = "36" alt="图片名称" align=center />，即可运行</p>
<blockquote>
<p>具体怎么使用，看源码的 <code>README.md</code></p>
</blockquote>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/f85bb316.html">https://yuhldr.github.io/posts/f85bb316.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>python</tag>
        <tag>gtk</tag>
      </tags>
  </entry>
  <entry>
    <title>终端工具oh-my-zsh与p10k国内镜像安装</title>
    <url>/posts/fa905576.html</url>
    <content><![CDATA[<h2 id="准备">准备</h2>
<p>确保已经可以用</p>
<ul>
<li>wget</li>
<li>zsh</li>
<li>curl</li>
<li>vim</li>
</ul>
<p>ubuntu可以这样安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install zsh wget curl vim</span><br></pre></td></tr></table></figure>
<p>mac可以用brew，类似</p>
<h2 id="oh-my-zsh">oh-my-zsh</h2>
<h3 id="安装">安装</h3>
<h4 id="如果你可以访问github">如果你可以访问github</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="如果你不能访问github">如果你不能访问github</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里用了<a href="https://gitee.com/mirrors/oh-my-zsh/">gitee的
oh-my-zsh 镜像</a>，建议安装以后，把 <code>~/.oh-my-zsh</code>
的git都换成这个镜像</p>
<blockquote>
<p>如果还是因为外网的问题卡住，可以这样</p>
</blockquote>
<ul>
<li>下载镜像脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>修改镜像脚本中的仓库地址</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ./install.sh</span><br></pre></td></tr></table></figure>
<p>不会用vim的话，其他编辑器也行，把第45、46行（可能行数不一样）下面内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">REPO=<span class="variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://github.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPO=<span class="variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://gitee.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>执行安装脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh install.sh</span><br></pre></td></tr></table></figure>
<p>执行以后可以删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> ./install.sh</span><br></pre></td></tr></table></figure>
<p>三个插件：自动补全、高亮、建议 <code>zsh-syntax-highlighting</code>
<code>zsh-autosuggestions</code>
<code>zsh-completions</code>，下面用的都是我链接到gitee的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/yuhldr/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting &amp;&amp; git <span class="built_in">clone</span> https://gitee.com/yuhldr/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions &amp;&amp; git <span class="built_in">clone</span> https://gitee.com/yuhldr/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>
<p>原版 github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>编辑配置 <code>zsh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>在最后添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快捷</span></span><br><span class="line"><span class="built_in">alias</span> c=<span class="string">&#x27;clear&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> lm=<span class="string">&#x27;ls -l --block-size=m&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> lk=<span class="string">&#x27;ls -l --block-size=k&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> lg=<span class="string">&#x27;ls -l --block-size=g&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -a&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/sbin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$HOME</span>/.local/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改这一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure>
<p>替换修改为，用vim就行，其他也可，看自己习惯</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    extract</span><br><span class="line">    z</span><br><span class="line">    sublime</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-completions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    <span class="built_in">sudo</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>z 文件夹名：跳转用过的文件</li>
<li>sudo: 键盘左上角按两次 esc，前面追加sudo</li>
<li>extract：x 压缩包名字；可以解压压缩文件</li>
</ul>
<blockquote>
<p>如果你用了clash代理，可以看 <a href="./46614.html">这里</a></p>
</blockquote>
<p>生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h2 id="p10k可选">p10k(可选)</h2>
<p>上面已经可以自动补全等，但是如果想更方便，比如显示git的各种信息，可以进一步设置，字体需要root权限，而且zsh必须5.1以上，<code>centos</code>默认不满足，输入<code>echo $ZSH_VERSION</code>查看</p>
<p>可让管理员参考这里安装，其实也可以自己安装在自己的目录里</p>
<blockquote>
<p><code>centos7</code> 请把其他更新sudo yum update -y，再编译安装</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y</span><br><span class="line"><span class="built_in">sudo</span> yum install -y git make ncurses-devel gcc autoconf man</span><br><span class="line">git <span class="built_in">clone</span> -b zsh-5.7.1 https://github.com/zsh-users/zsh.git /tmp/zsh</span><br><span class="line"><span class="built_in">cd</span> /tmp/zsh</span><br><span class="line">./Util/preconfig</span><br><span class="line">./configure</span><br><span class="line"><span class="built_in">sudo</span> make -j 20 install.bin install.modules install.fns</span><br></pre></td></tr></table></figure>
<h3 id="下载字体">下载字体</h3>
<blockquote>
<p>需要安装字体</p>
</blockquote>
<ul>
<li><p>如果你可以访问github</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf</span><br></pre></td></tr></table></figure></p></li>
<li><p>如果你不能访问github</p>
<blockquote>
<p>貌似需要登录 <code>gitee</code> 才能下载</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/yuhldr/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="安装字体">安装字体</h3>
<blockquote>
<p>需要sudo权限</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/share/fonts/my</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> MesloLGS\ NF\ Regular.ttf /usr/share/fonts/my</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> mkfontscale</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> mkfontdir</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span>  fc-cache -fv</span><br></pre></td></tr></table></figure>
<h3 id="终端字体设置">终端字体设置</h3>
<h4 id="ubuntu2004">ubuntu2004</h4>
<ul>
<li>自带的终端，右上角设置里，可以设置字体，选择刚才安装的那个即可
<code>MesloLGS NF</code></li>
<li>guake下拉终端，设置里也可以设置字体，选择
<code>MesloLGS NF</code></li>
</ul>
<h4 id="vscode">vscode</h4>
<p>设置json文件（快捷键 ctrl shift p）,添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;terminal.integrated.fontFamily&quot;</span>: <span class="string">&quot;&#x27;MesloLGS NF&#x27;&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>记得，必须完全退出vscode，重新打开才能生效</p>
<h4 id="mac">mac</h4>
<p>自带终端貌似不行，用 <code>item2</code> 设置里也可以设置字体，选择
<code>MesloLGS NF</code></p>
<h3 id="安装p10k">安装p10k</h3>
<ul>
<li><p>如果你可以访问github</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure></p></li>
<li><p>如果你不能访问github</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="配置p10k">配置p10k</h3>
<p>设置主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>把其中 <code>ZSH_THEME=</code> 开头的一行修改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure>
<p>按照提示一步步来即可，选取你喜欢的样式，记住，前面字体设置有问题的话，这里前几步选择是没法看到漂亮的图的，</p>
<h3 id="进一步配置">进一步配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.p10k.zsh </span><br></pre></td></tr></table></figure>
<p>修改这一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">typeset</span> -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(</span><br></pre></td></tr></table></figure>
<p>这一行下面有很多，有些被注释掉了，你可以去掉前面的注释符号
<code>#</code>，比如我把这两行注释去掉了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">load</span><br><span class="line">ram</span><br></pre></td></tr></table></figure>
<p>下面这两个分别代表内网ip和外网ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip</span><br><span class="line">public_ip </span><br></pre></td></tr></table></figure>
<p>有点长，占位置，不建议去掉注释</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/fa905576.html">https://yuhldr.github.io/posts/fa905576.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>oh-my-zsh</tag>
        <tag>p10k</tag>
      </tags>
  </entry>
  <entry>
    <title>git高级使用</title>
    <url>/posts/594541bc.html</url>
    <content><![CDATA[<p>git平时使用，各个IDE都有图形化操作，只是创建、推送、拉取，很容易，没什么说的，但是，有时候会出现一些奇怪的问题，或者仓库越来越大，这时候一般是因为什么都不懂，就开始使用图形化界面造成的</p>
<h2 id="初步认识git">初步认识git</h2>
<p>git，一种版本管理、合作开发的工具，个人使用可以视为云备份，接下来全部以个人使用为例，不涉及团队协作，开发环境为
<code>ubuntu2004</code>、<code>vscode</code>，云备份以
<code>github</code> 和 <code>gitee</code> 为例</p>
<blockquote>
<p>好处，再也不怕论文被 <code>女朋友</code>
删除了，随便删，额，前提是女朋友不懂git或者只懂皮毛，没女朋友的没这烦恼
~</p>
</blockquote>
<h3 id="什么时候需要用git">什么时候需要用git</h3>
<ul>
<li>使用 <code>latex</code> 写论文</li>
<li>学习、开发python等项目，需要不断更新迭代</li>
<li>记笔记，尤其是会不断翻看、修改的笔记</li>
</ul>
<blockquote>
<p>以上几种情况下，你可以随时找到任何时刻（提交记录）笔记，可以查看比较前后修改内容，可以多处云备份</p>
</blockquote>
<h3 id="git与githubgiteegitlab关系">git与github、gitee、gitlab关系</h3>
<p>git只是一个版本管理工具，可以脱离后者，后者基本上相当于一个云备份，可以多人协助，也可以在线修改</p>
<h2 id="从创建第一个项目开始">从创建第一个项目开始</h2>
<h3 id="本地">本地</h3>
<p>如果你本地已经有项目 <code>test</code> 了，打开路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<ul>
<li>安装git</li>
</ul>
<p>windows可以去官网，linux和mac我建议用源安装，mac可以
<code>brew</code> 百度怎么用，我这里 <code>ubuntu</code> 用的apt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git</span><br></pre></td></tr></table></figure>
<ul>
<li><p>配置</p>
<p>你的邮箱，用常用的，如果是开源项目，别人可能通过这个联系你</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的昵称名&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>这时候其实是在当前目录创建了一个 <code>.git</code>
文件夹，里面有些信息</p>
<blockquote>
<p>注意，要先创建忽略文件，再提交！</p>
</blockquote></li>
<li><p>忽略文件 <code>.gitignore</code></p>
<p>创建忽略文件的目的是，不要什么文件都记录历史，一些间接生成或者缓存文件，没必须，全部追踪会导致git项目越来越大</p>
<p>比如用 <code>latex</code>
写论文，编译时，会产生很多文件，都没必要，甚至最后生成的pdf文件都可以不记录，因为凡是无法用
<code>IDE</code> 直接打开的，就无法增量追踪</p>
<p>忽略文件即当前目录创建文件</p>
<p><code>.gitignore</code>，编写规则，可以直接是文件夹整个忽略，可以是某类型文件忽略</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略test开头的所有文件夹或文件</span></span><br><span class="line"><span class="built_in">test</span>*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略mac系统产生的无意义文件</span></span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略node的库文件</span></span><br><span class="line">node_modules/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略python的缓存编译</span></span><br><span class="line">__pycache__/</span><br></pre></td></tr></table></figure>
<p>这个很多，不同类型项目有不同的忽略，比如在 <code>gitee</code>
上创建新项目时，可以选择编程语言，勾选
<code>忽略文件</code>，会自动创建适用于此语言的忽略文件，必须注意，初始化以后，一定要做好这个，不然后期比较麻烦</p></li>
<li><p>提交</p>
<p>分两步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交说明，你做了什么，简洁一些&quot;</span></span><br></pre></td></tr></table></figure>
<p>会自动记录时间，所以提交说明里不需要时间</p></li>
</ul>
<h3 id="vscode">vscode</h3>
<p>其实上面初始化、提交、甚至查看历史记录，都可以用vscode处理，尤其是历史记录，vscode方便很多</p>
<ul>
<li>安装vscode</li>
</ul>
<p><a
href="https://code.visualstudio.com/download">官方下载</a>，国内可能比较慢</p>
<ul>
<li><p>安装扩展</p>
<figure>
<img src="/images/2021/2021-11-02-18-05-24.png" alt="vscode扩展" />
<figcaption aria-hidden="true">vscode扩展</figcaption>
</figure>
<p>这几个必须安装</p>
<p>第1个：编辑页面右上角，点时间那个小圆圈，可以查看提交历史</p>
<figure>
<img src="/images/2021/2021-11-02-18-13-56.png" alt="git 历史" />
<figcaption aria-hidden="true">git 历史</figcaption>
</figure>
<p>第3个：可以看到整个项目提交情况，文件变化，包括分支</p>
<figure>
<img src="/images/2021/2021-11-02-18-19-18.png" alt="git log" />
<figcaption aria-hidden="true">git log</figcaption>
</figure></li>
</ul>
<h3 id="关联到云端">关联到云端</h3>
<p>建议配置一下 github、gitee的ssh密钥，关联时，选择 <code>ssh</code>
那个url，以后就不用输入密码了</p>
<p>有空再写，先把命令放在这里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看目前关联了哪些</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程</span></span><br><span class="line">git remote add-url origin 把我换成远程连接</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改连接</span></span><br><span class="line">git remote set-url origin 把我换成远程连接</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再加一个</span></span><br><span class="line">git remote add-url origin1 把我换成远程连接</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h2 id="git高级命令">git高级命令</h2>
<p>不到万不得已，不要乱玩下面的，平时会提交、推送、拉取就行</p>
<p>从某次提交（这次提交之前都属于这个分支）新建分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch  master 96a99d1</span><br></pre></td></tr></table></figure>
<p>后面那个id是 commit 以后生成的，平时输入前一两位，<code>tab</code>
快捷键就能补全了，我不知道这是不是和我配置的 <code>oh-my-zsh</code> 和
<code>p10k</code> 有关系</p>
<figure>
<img src="/images/2021/2021-11-02-18-26-16.png" alt="git tab" />
<figcaption aria-hidden="true">git tab</figcaption>
</figure>
<p>删除分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D tmp</span><br></pre></td></tr></table></figure>
<p>切换到某个分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master </span><br></pre></td></tr></table></figure>
<p>切换到某次提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 9dcc66c</span><br></pre></td></tr></table></figure>
<p>合并分支，比如现在你在 <code>master</code> 分支，你想把
<code>tmp</code> 分支合并到 <code>master</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge tmp</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/594541bc.html">https://yuhldr.github.io/posts/594541bc.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu常用软件</title>
    <url>/posts/59423.html</url>
    <content><![CDATA[<h2 id="普通用户免密码">普通用户免密码</h2>
<p>为了安全，密码设置的比较复杂，防止已经授权的普通用户总是需要输入密码</p>
<p>如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line"></span><br><span class="line">vim /etc/sudoers.d/yuh</span><br></pre></td></tr></table></figure>
<p>添加如下，其中<code>test</code> 改成你的用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>    ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>
<p>设置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 /etc/sudoers.d/yuh</span><br></pre></td></tr></table></figure>
<p><code>ctrl-D</code>
退出root，如新打开终端测试，如果还不行，重启试试</p>
<h2 id="双系统时间">双系统时间</h2>
<p>双系统时间显示不一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl set-local-rtc 1 --adjust-system-clock</span><br></pre></td></tr></table></figure>
<h2 id="自动登录">自动登录</h2>
<p>如果第一次提示填写密钥环（两个输入框）时，你输入了密码（这时候你可以不输入，直接点击确认），以后即使自动登录了，还总是让输入密钥解锁</p>
<figure>
<img src="./../images/2021/2021-11-20%2018-33-22.png"
alt="打开软件：密码秘钥" />
<figcaption aria-hidden="true">打开软件：密码秘钥</figcaption>
</figure>
<p>在如图<code>登录</code> 两个字
<code>右键</code>，选择，<code>更改密码</code>，需要输入当前的登录密码，然后，不要输入东西，直接确认，提示是否不加密，确认即可</p>
<h2 id="主题">主题</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install chrome-gnome-shell gnome-tweak-tool</span><br></pre></td></tr></table></figure>
<p><a href="https://www.gnome-look.org/p/1357889">Orchis gtk
theme</a></p>
<p>多系统管理：</p>
<p><a href="https://github.com/vinceliuice/grub2-themes">GitHub -
vinceliuice/grub2-themes: Modern Design theme for Grub2</a></p>
<h2 id="vscode-markdown">vscode markdown</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install xclip</span><br></pre></td></tr></table></figure>
<p><a
href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste
Image - Visual Studio Marketplace</a></p>
<p><a
href="https://marketplace.visualstudio.com/items?itemName=kukushi.pasteurl">Paste
URL - Visual Studio Marketplace</a></p>
<h2 id="flameshot">flameshot</h2>
<p>官网：<a href="https://flameshot.org/">Flameshot</a></p>
<p>到这里下载，不建议直接snap，它把所有的依赖都放一块了，体积太大,80多M，建议用这里的
<code>deb</code>，只有几百k，软件自己会提醒更新</p>
<p><a
href="https://github.com/flameshot-org/flameshot/releases">Releases ·
flameshot-org/flameshot</a></p>
<p>系统设置快捷键设置</p>
<p>命令：<code>flameshot gui</code></p>
<h2 id="stretchly">stretchly</h2>
<p>github下载：<a
href="https://github.com/hovancik/stretchly/releases">Releases ·
hovancik/stretchly</a></p>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install stretchly</span><br></pre></td></tr></table></figure>
<h2 id="indicator-sysmonitor">indicator-sysmonitor</h2>
<p>网速信息</p>
<p><a href="https://github.com/fossfreedom/indicator-sysmonitor">GitHub
- indicator-sysmonitor</a></p>
<h2 id="mathpix">Mathpix</h2>
<p>主页：<a href="https://mathpix.com/">Mathpix Snip</a></p>
<h2 id="glade">glade</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap install glade</span><br></pre></td></tr></table></figure>
<h2 id="scienceplots">SciencePlots</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install SciencePlots</span><br></pre></td></tr></table></figure>
<p>用latex时报错了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line"></span><br><span class="line">fmtutil-sys --all</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/59423.html">https://yuhldr.github.io/posts/59423.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插件开发与npm包发布</title>
    <url>/posts/25445.html</url>
    <content><![CDATA[<h2 id="npm项目">npm项目</h2>
<blockquote>
<p>当前hexo版本为 <code>5.4.0</code>，NexT版本 <code>8.8.0</code></p>
</blockquote>
<p>整个项目地址</p>
<ul>
<li><a href="https://github.com/yuhldr/hexo-md-imgs">github</a></li>
<li><a href="https://www.npmjs.com/package/hexo-md-imgs/">npm库</a></li>
</ul>
<h3 id="使用方法">使用方法</h3>
<p><code>sudo npm install hexo-md-imgs</code></p>
<h3 id="问题">问题</h3>
<p>hexo编写markdown文件时，插入图片，图片可以放在
<code>source/images</code>
目录里（NexT主题的赞赏码也是放在这里），但问题是，在markdown里如果要预览图片，代码应该是</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">图</span>](<span class="link">/source/images/图片文件名</span>)</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">图</span>](<span class="link">../images/图片文件名</span>)</span><br></pre></td></tr></table></figure>
<p>这样markdown里可以预览了，但是这样编译出来的是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/source/images/图片文件名&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/图片文件名&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这在网页里是无法显示图片的，因为 <code>html</code> 里路径应该是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/2021-04/gitalk.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="原理">原理</h3>
<p>这个插件就是在 <code>hexo s</code> 编译以后，更换图片的url，从而保证
<code>markdown</code> 图片预览与网页中图片一致</p>
<p>很简单就几行代码，主要是学习一下 <code>hexo插件开发</code> 和
<code>npm库发布</code></p>
<h2 id="hexo插件开发">hexo插件开发</h2>
<p>其实也就是 npm库 开发</p>
<ol type="1">
<li><p>新建目录 <code>hexo-test</code></p>
<blockquote>
<p>为了使用hexo的语法，插件名必须 <code>hexo-</code> 开头</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> hexo-test &amp;&amp; <span class="built_in">cd</span> hexo-test</span><br></pre></td></tr></table></figure></p></li>
<li><p>初始化</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p>
<p>根据提示输入包名等信息</p>
<p>这个只是创建了一个<code>package.json</code>，里面包含包名、作者、描述、版本等信息</p></li>
<li><p>创建js文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> index.js</span><br></pre></td></tr></table></figure></p>
<p>代码写在这里，我是为了在 <code>hexo s</code> 以后替换，所以看 <a
href="https://hexo.io/zh-cn/api/filter#%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%97%E8%A1%A8">官网文档</a>，用的
<code>after_post_render</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data) &#123;</span><br><span class="line">    data.content = data.content.replace(/&lt;img src=<span class="string">&quot;(..|\/source)\/images\/.*?&gt;/g, function(match, capture) &#123;</span></span><br><span class="line"><span class="string">        return match.replace(&quot;</span>/source/images<span class="string">&quot;, &quot;</span>/images<span class="string">&quot;).replace(&quot;</span>../images<span class="string">&quot;, &quot;</span>/images<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return data;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>测试</p>
<p>在 <code>hexo-test</code> 里面运行</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ln</span></span><br></pre></td></tr></table></figure></p>
<p>在hexo的博客项目 <code>yuhldr</code> 文件夹里运行</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ln</span> hexo-test</span><br></pre></td></tr></table></figure></p>
<p>在博客项目里，找到 <code>package.json</code> 的
<code>dependencies</code> 中添加依赖
<code>"hexo-md-imgs": "^1.0.0",</code></p>
<p>其实这也就类似于 <code>npm install hexo-md-imgs</code>，且此时对
<code>hexo-md-imgs</code> 的修改会直接反映到博客中。</p></li>
</ol>
<h2 id="npm库发布">npm库发布</h2>
<ol type="1">
<li><p>在这里注册一个账号 <a href="https://www.npmjs.com/">网站</a></p>
<blockquote>
<p>注意，在浏览器里激活邮箱，直接在qq邮箱点激活，有问题，如果不激活，发布时会报错</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a package version that is forbidden by your security policy, or</span><br><span class="line">npm ERR! 403 on a server you <span class="keyword">do</span> not have access to.</span><br></pre></td></tr></table></figure></p></li>
<li><p>npm源保证是官方的</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></p>
<p>应该查看到</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://registry.npmjs.org/</span><br></pre></td></tr></table></figure></p>
<p>如果不是，更换一下</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure></p></li>
<li><p>npm添加账户信息</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure></p>
<p>按照提示输入刚才注册的账号密码和邮箱</p></li>
<li><p>发布</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure></p>
<p>邮箱必须验证，不然发布会报错，而且保证包名唯一，可以先去 <a
href="https://www.npmjs.com/">官网</a> 搜一下</p></li>
<li><p>忽略</p>
<p>某个文件只是说明不需要发布的话，当前目录新建 <code>.npmignore</code>
文件，添加忽略，与 <code>git</code> 类似</p></li>
</ol>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/25445.html">https://yuhldr.github.io/posts/25445.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Js</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>python微分求解</title>
    <url>/posts/13877.html</url>
    <content><![CDATA[<p>这里用简单函数</p>
<blockquote>
<p>假设我们现在知道原函数 <span
class="math inline">\(f(x)=x^2\)</span></p>
</blockquote>
<p>那么二阶微分方程为： <span
class="math display">\[f&#39;&#39;(x)+f&#39;(x)+(-2-2\times x) =
0\]</span> 初始条件 <span class="math display">\[f(0)=0 \quad
f&#39;(0)=0\]</span></p>
<p>先看代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> odeint</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eq_ode</span>(<span class="params">x, ys</span>):</span><br><span class="line">    <span class="keyword">return</span> -ys[<span class="number">1</span>] + <span class="number">2</span> + <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fvdp</span>(<span class="params">x, ys</span>):</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        ys[<span class="number">1</span>],</span><br><span class="line">        eq_ode(x, ys),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eq_sim</span>(<span class="params">x, f</span>):</span><br><span class="line">    <span class="keyword">return</span> sy.diff(f, x, <span class="number">2</span>) + sy.diff(f, x, <span class="number">1</span>) + (-<span class="number">2</span> - <span class="number">2</span> * x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值求解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_ode</span>():</span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1000</span>)</span><br><span class="line">    y0 = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    ys = odeint(fvdp, y0, x, tfirst=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    y, = plt.plot(x, ys[:, <span class="number">0</span>], label=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    y1, = plt.plot(x, ys[:, <span class="number">1</span>], label=<span class="string">&#x27;y\&#x27;&#x27;</span>)</span><br><span class="line">    y2, = plt.plot(x, eq_ode(x, ys[:, <span class="number">0</span>]), label=<span class="string">&#x27;y\&#x27;\&#x27;&#x27;</span>)</span><br><span class="line">    plt.legend(handles=[y, y1, y2])</span><br><span class="line">    plt.savefig(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析式求解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slove_sim_eq</span>():</span><br><span class="line">    x = sy.symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    f = sy.Function(<span class="string">&#x27;f&#x27;</span>)(x)</span><br><span class="line">    s = sy.dsolve(eq_sim(x, f), f)</span><br><span class="line">    sy.pprint(s)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">slove_sim_eq()</span><br><span class="line"></span><br><span class="line">solve_ode()</span><br></pre></td></tr></table></figure>
<h2 id="解析式求解">解析式求解</h2>
<p>使用 <code>sympy</code> 库 <code>dsolve</code> 函数</p>
<p>微分方程在 <code>eq_test</code> 函数里，其中 3 个注释掉了，分别是</p>
<p><span class="math display">\[f&#39;&#39;(x)+sin(x)=0 \quad
f&#39;&#39;(x)+x^2=0 \quad f&#39;&#39;(x)+f(x)=0\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二阶常系数齐次微分方程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eq_test</span>(<span class="params">x, f</span>):</span><br><span class="line">    <span class="comment"># return sy.diff(f(x), x, 2) + sy.sin(x)  # f&#x27;&#x27;+sin(x)=0</span></span><br><span class="line">    <span class="comment"># return sy.diff(f, x, 2) + x**2  # f&#x27;&#x27;+x^2=0</span></span><br><span class="line">    <span class="comment"># return sy.diff(f, x, 2) + f  # f(x)&#x27;&#x27;+f(x)=0</span></span><br><span class="line">    <span class="keyword">return</span> sy.diff(f, x, <span class="number">2</span>) + sy.diff(f, x, <span class="number">1</span>) + (-<span class="number">2</span> - <span class="number">2</span> * x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 化简方程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slove_eq</span>():</span><br><span class="line">    x = sy.symbols(<span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 约定变量</span></span><br><span class="line">    f = sy.Function(<span class="string">&#x27;f&#x27;</span>)(x)  <span class="comment"># 约定函数</span></span><br><span class="line">    s = sy.dsolve(eq_test(x, f), f)</span><br><span class="line">    <span class="comment"># 美化输出，在vscode-ipynb里，甚至可以输出为latex</span></span><br><span class="line">    sy.pprint(s)</span><br><span class="line">    <span class="built_in">print</span>(sy.printing.latex(s))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">slove_eq()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用函数 <code>sympy</code>，<code>eq_test</code>
函数即为微分方程，<code>sy.pprint</code>可以美化输出，<code>print(sy.printing.latex(s))</code>可以输出为
latex 代码</p>
<p>解析解：</p>
<p><span class="math display">\[\displaystyle f{\left(x \right)} = C_{1}
+ C_{2} e^{- x} + x^{2}\]</span></p>
<h2 id="数值求解">数值求解</h2>
<p><code>scipy</code> 里内置函数 <code>odeint, solve_ivp</code>
两个都可以，区别如下</p>
<table style="width:100%;">
<colgroup>
<col style="width: 11%" />
<col style="width: 51%" />
<col style="width: 12%" />
<col style="width: 24%" />
</colgroup>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th>速度</th>
<th>区别</th>
</tr>
</thead>
<tbody>
<tr>
<td>odeint</td>
<td>微分方程数值求解</td>
<td>快</td>
<td>参数简洁，推荐</td>
</tr>
<tr>
<td>solve_ivp</td>
<td>如果使用 <code>method='LSODA'</code> 与 <code>odeint</code>
一样</td>
<td>相对慢一些</td>
<td>通用，含多个计算方式</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> odeint, solve_ivp</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eq</span>(<span class="params">t, ys</span>):</span><br><span class="line">    <span class="keyword">return</span> -ys[<span class="number">1</span>] + <span class="number">2</span> + <span class="number">2</span> * t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fvdp</span>(<span class="params">t, ys</span>):</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        ys[<span class="number">1</span>],</span><br><span class="line">        eq(t, ys),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_second_order_ode</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    求解二阶ODE</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    t = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">1000</span>)</span><br><span class="line">    tspan = (<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># ! 注意啊，这个初值一定要对应上面t的初值</span></span><br><span class="line">    y0 = [<span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 初值条件</span></span><br><span class="line">    <span class="comment"># 初值[1.0, 2.0]表示y(0)=1,y&#x27;(0)=2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回y，其中y[:,0]是y[0]的值，就是最终解，y[:,1]是y&#x27;(x)的值，tfirst为了与下面的solve_ivp定义的fvdp2中（y，t）顺序保持一致</span></span><br><span class="line">    y_ = odeint(fvdp, y0, t, tfirst=<span class="literal">True</span>)</span><br><span class="line">    ys = np.transpose(y_)</span><br><span class="line">    title = <span class="string">&quot;ode&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y_ = solve_ivp(fvdp, t_span=tspan, method=&quot;LSODA&quot;, y0=y0, t_eval=t)</span></span><br><span class="line">    <span class="comment"># ys = y_.y</span></span><br><span class="line">    <span class="comment"># title = &quot;ivp&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ys)</span><br><span class="line"></span><br><span class="line">    y = ys[<span class="number">0</span>]</span><br><span class="line">    y_1 = ys[<span class="number">1</span>]</span><br><span class="line">    y_2 = eq(t, ys)</span><br><span class="line"></span><br><span class="line">    y2, = plt.plot(t, y, label=<span class="string">&#x27;y(0)&#x27;</span>)</span><br><span class="line">    y2_1, = plt.plot(t, y_1, label=<span class="string">&#x27;y(1)&#x27;</span>)</span><br><span class="line">    y2_2, = plt.plot(t, y_2, label=<span class="string">&#x27;y(2)&#x27;</span>)</span><br><span class="line">    plt.legend(handles=[y2, y2_1, y2_2])</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.savefig(<span class="string">&quot;test_&quot;</span> + title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve_second_order_ode()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="odeint-函数">odeint 函数</h3>
<p><code>odeint</code> 函数一般只需要传递 3 个参数</p>
<p>微分方程矩阵函数、自变量、初始值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">odeint(fvdp, y0, t, tfirst=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="微分方程矩阵函数">微分方程矩阵函数</h4>
<p>对于高阶，需要构造微分方程函数
<code>fvdp</code>，即最开始提到的方程为</p>
<p><span class="math display">\[
f&#39;&#39;(x)+f&#39;(x)+(-2-2x) = 0 \quad f(0)=0  \quad f&#39;(0)=0
\]</span></p>
<p>要把这个二阶方程全部转化为矩阵</p>
<p><span class="math display">\[[y&#39;, y&#39;&#39;]\]</span></p>
<p>即 <code>fvdp</code> 函数的返回值，这个函数的参数为 <code>t</code>
自变量，<code>y</code> 因变量的导数矩阵 <span class="math inline">\([y,
y&#39;]\)</span></p>
<blockquote>
<p><code>odeint</code> 函数的参数顺序 <code>(y, t)</code>，如果要与
<code>solve_ivp</code> 一致参数顺序变成
<code>(t, y)</code>，<code>odeint</code> 函数多传递一个参数
<code>tfirst=True</code></p>
</blockquote>
<p>所以，返回值 <span
class="math inline">\(y&#39;=y[1]\)</span>，<code>y''</code> 用微分方程
(<span class="math inline">\(f&#39;&#39;(x)+f&#39;(x)+(-2-2x) =
0\)</span>) 表示</p>
<p><span class="math inline">\(y&#39;&#39;=-y[1]+2+2t\)</span></p>
<p>最终 <code>fvdp</code> 函数返回值</p>
<p><span class="math display">\[[y&#39;, y&#39;&#39;]=[y[1],
-y[1]+2+2t]\]</span></p>
<h4 id="自变量">自变量</h4>
<p>用 numpy 数组表示即可 <code>t = np.linspace(0, 5, 1000)</code></p>
<h4 id="初始值">初始值</h4>
<p>注意与自变量对应，二阶微分方程初始值为</p>
<p><span class="math display">\[[f(t_0), f&#39;(t_0)]\]</span></p>
<blockquote>
<p>这里的<span
class="math inline">\(t_0\)</span>必须是自变量的第一个值，不然会有很大的误差</p>
</blockquote>
<h4 id="返回值">返回值</h4>
<p><code>odeint</code> 函数返回值只有 ys=<span
class="math inline">\([[y], [y&#39;]]\)</span>
，但是注意转置一下，行列不太方便，如果不转置</p>
<p><span class="math inline">\(y=ys[:, 0] \qquad y&#39;=ys[:,
1]\)</span></p>
<h3 id="solve_ivp-函数">solve_ivp 函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_ = solve_ivp(fvdp, t_span=tspan, method=<span class="string">&quot;LSODA&quot;</span>, y0=y0, t_eval=t)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>微分方程矩阵函数</code></li>
</ul>
<p><code>solve_ivp</code> 不一样的仅仅只有参数顺序，这个函数参数应该是
<code>(t, y)</code> 与 matlab 是一致的，</p>
<ul>
<li>自变量</li>
</ul>
<p>这个也有区别，自变量数组在 <code>t_eval=t</code>，但是还需要一个
<code>t_span=(min, max)</code>，其中 <code>max min</code>
为自变量数组的最大值最小值，如果只有<code>t_span</code>，取得值太少，不行</p>
<ul>
<li>初始值</li>
</ul>
<p>与 <code>odeint</code> 一致</p>
<ul>
<li>返回值</li>
</ul>
<p>ys = y_.y</p>
<p><span class="math inline">\(y=ys[0] \qquad y&#39;=ys[1]\)</span></p>
<h3 id="总结">总结</h3>
<p>还是用 <code>odeint</code>吧，参数少一些，方便</p>
<h2 id="其他">其他</h2>
<p>solve_ivp 积分：</p>
<blockquote>
<p>详细看<a
href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html">官网文档</a>，包含各种方法的具体参考文献</p>
</blockquote>
<ul>
<li><p>'RK45'（默认）：显式 Runge-Kutta
5(4)阶。假设四阶方法的精度控制误差，但使用五阶精确公式（完成局部外推）采取步骤。四次插值多项式用于密集输出[2]。可应用于复杂领域。</p></li>
<li><p>'RK23'：显式 Runge-Kutta (2)3
阶。假设二阶方法的精度，控制误差，但使用三阶精确公式（完成局部外推）采取步骤。三次
Hermite 多项式用于密集输出。可应用于复杂领域。</p></li>
<li><p>'DOP853'：8 阶显式 Runge-Kutta。最初用 Fortran
编写的“DOP853”算法的 Python 实现。精确到 7 阶的 7
阶插值多项式用于密集输出。可应用于复杂领域。</p></li>
<li><p>'Radau'：5 阶 Radau IIA 的隐式
Runge-Kutta。误差由三阶精确嵌入公式控制。满足搭配条件的三次多项式用于密集输出。</p></li>
<li><p>'BDF'：基于导数逼近的后向微分公式的隐式多步变阶（1 到
5）方法。使用准恒定步长方案，并使用 NDF
修改提高精度。可应用于复杂领域。</p></li>
<li><p>'LSODA'：具有自动刚度检测和切换功能的 Adams/BDF 方法。这是来自
ODEPACK 的 Fortran 求解器的封装。</p></li>
</ul>
<p>显式 Runge-Kutta
方法（'RK23'、'RK45'、'DOP853'）应用于非刚性问题，隐式方法（'Radau'、'BDF'）应用于刚性问题。在
Runge-Kutta 方法中，建议使用“DOP853”进行高精度求解（rtol 和 atol
的值较低）。</p>
<p>如果不确定，请先尝试运行“RK45”。如果它进行了异常多次的迭代、发散或失败，则您的问题可能很僵硬，您应该使用“Radau”或“BDF”。'LSODA'
也可以是一个很好的通用选择，但它可能不太方便，因为它包装了旧的 Fortran
代码。</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/13877.html">https://yuhldr.github.io/posts/13877.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>微分方程求解</tag>
      </tags>
  </entry>
  <entry>
    <title>FPU单链选择定则</title>
    <url>/posts/53634.html</url>
    <content><![CDATA[<p>前两篇，已经模拟计算了单链 <span class="math inline">\(\alpha
\beta\)</span> 两种模型，并且复现了 <span
class="math inline">\(\alpha\)</span>模型的FPU经典图，接下来，在 <span
class="math inline">\(\beta\)</span>
模型下推导选择定则，并且做相关模拟验证。</p>
<h2 id="推导">推导</h2>
<p><span class="math inline">\(N+1\)</span> 个原子，两端原子固定，中间
<span class="math inline">\(N\)</span> 个非线性弹簧连接，</p>
<p><span class="math display">\[x_0 (t)=\dot{x}_0(t)= x_{N}(t) =
\dot{x}_N (t)=0\]</span></p>
<p>第j个原子受力（<span
class="math inline">\(j=1,2,...,N-1\)</span>）</p>
<p><span class="math display">\[
\begin{aligned}
F_j =&amp; [(x_{j+1}-x_{j})-(x_j-x_{j-1})] \\
    &amp;+ \alpha  [(x_{j+1}-x_{j})^2-(x_j-x_{j-1})^2] \\
    &amp;+  \beta[(x_{j+1}-x_{j})^3-(x_j-x_{j-1})^3]
\end{aligned}
\]</span></p>
<p>哈密顿量为：</p>
<p><span class="math display">\[
    H=\sum_{j=1}^{N}\left[\dot{x}_{j}^{2} /
2+\left(x_{j}-x_{j-1}\right)^{2} /
2+\alpha\left(x_{j}-x_{j-1}\right)^{3} /
3+\beta\left(x_{j}-x_{j-1}\right)^{4} / 4\right]
\]</span></p>
<p>上面的推导可参见 <code>相关文章</code></p>
<p><span
class="math inline">\(\beta\)</span>模型下，3次项可出现正负，令<span
class="math inline">\(\alpha=0\)</span></p>
<p>对于固定边界条件，谐振子来说解为</p>
<p><span class="math display">\[x_j =
i\sum_{k=1}^{N}\frac{a_k}{\omega_k} e^{\frac{-i\pi j}{N}}\]</span>
其中</p>
<p><span class="math display">\[\omega = 2 sin(\frac{\pi
k}{2N})\]</span></p>
<p>这里，因为是固定边界条件，只看实数部分，即为初始状态振幅，<span
class="math inline">\(x_j=\cos{\frac{\pi}{N}j}\)</span>，J从0取到N，正好初始状态时，“拱形”固定边界条件</p>
<p><span class="math display">\[
x_{j}-x_{j-1}=i\sum_{k=1}^{N}\frac{a_k}{\omega_k} e^{\frac{-i\pi j}{N}}
- i\sum_{k=1}^{N}\frac{a_k}{\omega_k} e^{\frac{-i\pi (j-1)}{N}}=
i\sum_{k=1}^{N}\frac{a_k}{\omega_k} e^{\frac{-i\pi
j}{N}}(1-e^{\frac{-i\pi}{N}})
\]</span></p>
<p><span class="math display">\[
\begin{aligned}
    \sum_{j=1}^{N}\left(x_{j}-x_{j-1}\right)^{4}=&amp; \sum \frac{a_{k}
a_{k&#39;} a_{k&#39;&#39;} a_{k&#39;&#39;&#39;}}{\omega_{k}
\omega_{k&#39;} \omega_{k} \omega_{k&#39;&#39;&#39;}} \exp \left[-i \pi
j\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right) / N\right] \\
    &amp; \times[1-\exp (i \pi k / N)]\left[1-\exp \left(i \pi k&#39; /
N\right)\right] \\
    &amp; \times\left[1-\exp \left(i \pi k&#39;&#39; /
N\right)\right]\left[1-\exp \left(i \pi k&#39;&#39;&#39; /
N\right)\right] \\
    =&amp; \sum a_{k} a_{k&#39;} a_{k&#39;&#39;} a_{k&#39;&#39;} \exp
\left[-i
\pi\left(j-\frac{1}{2}\right)\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right)
/ N\right]
\end{aligned}
\]</span></p>
<p>上面方程最后一步化简：</p>
<p>已知<span class="math inline">\(\omega_k = 2sin(\frac{\pi
k}{2N})\)</span>，令 <span class="math inline">\(\frac{\pi
k}{2N}=y\)</span></p>
<p>可得 <span class="math display">\[
\begin{aligned}
&amp;1-\exp (i \pi k / N)\\
&amp;=1-[cos(2y)+isin(2y)]\\
&amp;=1-[1-2sin(y)^2+i2sin(y)cos(y)]\\
&amp;=2sin(y)[sin(y)-icos(y)]\\
&amp;=\omega_k (-i)[cos(y)+isin(y)]\\
&amp;= -i \omega_k e^{iy}\\
&amp;=-i \omega_k e^{i\frac{\pi k}{2N}}
\end{aligned}
\]</span> 则</p>
<p><span class="math display">\[
\begin{aligned}
&amp;\frac{[1-\exp (i \pi k / N)]\left[1-\exp \left(i \pi k&#39; /
N\right)\right] \times\left[1-\exp \left(i \pi k&#39;&#39; /
N\right)\right]\left[1-\exp \left(i \pi k&#39;&#39;&#39; /
N\right)\right] }{\omega_k \omega_k&#39; \omega_k&#39;&#39;
\omega_k&#39;&#39;&#39;}\\
&amp;=(-i)^4 e^{i\pi \frac{1}{2N}(k+k&#39; + k&#39;&#39; +
k&#39;&#39;&#39;)}
\end{aligned}
\]</span></p>
<p>实数部分只有余弦项</p>
<p><span class="math display">\[  
\sum_{j=1}^{N} \cos
\left[\frac{(j-\frac{1}{2})(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;)
\pi}{N}\right]=N \cdot
D\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right)
\]</span></p>
<p>因此 k为整数时，有</p>
<p><span class="math display">\[
D(0)=1 \quad D(\pm 2N)=-1 \quad D(*)=0
\]</span></p>
<p><span class="math display">\[
\sum_{j=1}^{N}\left(x_{j}-x_{j-1}\right)^{4}=N \sum a_{k} a_{k&#39;}
a_{k&#39;&#39;}
a_{k&#39;&#39;&#39;}D\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right)
\]</span></p>
<p><span class="math display">\[
  H=(N / 2) \sum\left[\left(\dot{a}_{k} /
\omega_{k}\right)^{2}+a_{k}^{2}\right]+(\mu N / 4) \sum a_{k} a_{k&#39;}
a_{k&#39;&#39;}
a_{k&#39;&#39;&#39;}\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right)
\]</span></p>
<p>求导得</p>
<p><span class="math display">\[\ddot{a}_{k}=-\omega_{k}^{2} a_{k}-\mu
\omega_{k}^{2} \sum_{k&#39; k&#39;&#39; k&#39;&#39;&#39;} a_{k&#39;}
a_{k&#39;&#39;} a_{k&#39;&#39;&#39;}
D\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right)
\]</span></p>
<p>欧拉公式可推出 <span class="math inline">\(\cos x =
\frac{e^{ix}+e^{-ix}}{2}\)</span> <span class="math display">\[
    \begin{aligned}
    &amp;=\sum_{j=1}^{N} \cos
\left[\left(j-\frac{1}{2}\right)\left(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\right)
\pi / N\right] \\
    &amp;=\sum_{j=1}^{N} \cos[\frac{(2j-1)k \pi}{2N}] = \sum_{j=1}^{N}
\frac{e^{i\frac{(2j-1)k \pi}{2N}} + e^{-i\frac{(2j-1)k \pi}{2N}}}{2}\\
    &amp;=a_1 \frac{(1-q^n)}{1-q} +
a_1&#39;\frac{(1-q&#39;^n)}{1-q&#39;}
    \end{aligned}
\]</span></p>
<p>其中，<span class="math inline">\(q=e^{\pm
\frac{ik\pi}{N}}\)</span>， <span
class="math inline">\(q=1\)</span>的时候即为<span
class="math inline">\(2N \quad 0\)</span></p>
<p>等比数列以后为（忽略分母2）： <span
class="math display">\[    \begin{aligned}
    &amp;=e^{i\frac{k \pi}{2N}}\frac{(1-
e^{ik\pi})}{1-e^\frac{ik\pi}{N}}+e^{-i\frac{k \pi}{2N}}\frac{(1-
e^{-ik\pi})}{1-e^\frac{-ik\pi}{N}}
    =e^{i\frac{k \pi}{2N}}(\frac{(1-
e^{ik\pi})}{1-e^\frac{ik\pi}{N}})+e^{i\frac{k \pi}{2N}}\frac{(1-
e^{-ik\pi})}{e^\frac{ik\pi}{N}-1}\\
    &amp;=e^{i\frac{k \pi}{2N}}(\frac{(1- e^{ik\pi})-(1-
e^{-ik\pi})}{1-e^\frac{ik\pi}{N}})=e^{i\frac{k
\pi}{2N}}(\frac{e^{-ik\pi}- e^{ik\pi}}{1-e^\frac{ik\pi}{N}})\\
    &amp;=e^{i\frac{k \pi}{2N}}(\frac{\cos{(-k\pi)}+i\sin(-k\pi)-
(\cos{(k\pi)}+i\sin(k\pi))}{1-e^\frac{ik\pi}{N}})\\
    &amp;=e^{i\frac{k \pi}{2N}}\frac{-2i\sin{k\pi}}{1-e^\frac{ik\pi}{N}}
    \end{aligned}
\]</span></p>
<p><span class="math inline">\(\therefore\)</span> 只要 <span
class="math inline">\(k\)</span> 为整数，求和即为0</p>
<p>这个方程的含义是，整个势能项，是由多个模式（<span
class="math inline">\(k k&#39; k&#39;&#39;
k&#39;&#39;&#39;\)</span>）组合而成，其中（<span
class="math inline">\(k&#39; k&#39;&#39;
k&#39;&#39;&#39;\)</span>）是原有模式，<span
class="math inline">\(k\)</span>是被原有模式激发起来的新模式，模式的取值为
<span class="math inline">\(1、2、……、N\)</span></p>
<p><span class="math display">\[
\sum_{j=1}^{N}\left(x_{j}-x_{j-1}\right)^{4}=N \sum a_{k} a_{k&#39;}
a_{k&#39;&#39;}
a_{k&#39;&#39;&#39;}D(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;)
\]</span></p>
<p>假设激发了 <span class="math inline">\(k_0=1\)</span>
模式，也就是初始状态是按照第一个模式分布的，因此初始各个模式的振幅只有第一个不为0：
<span class="math inline">\(a_{k_0} \neq 0\)</span></p>
<p>如果上面这个方程不为0，由于 <span class="math inline">\(a_{k}
a_{k&#39;} a_{k&#39;&#39;} a_{k&#39;&#39;&#39;}\)</span>
的存在，其中每一项都不能是0，因此<span
class="math inline">\(k&#39;=k&#39;&#39;=k&#39;&#39;&#39;=k_0\)</span>，<span
class="math inline">\(k\)</span>被原有模式激发，也不为0 <span
class="math display">\[
D(0)=1 \quad D(\pm 2N)=-1 \quad D(*)=0
\]</span> 由于上面这个式子，<span
class="math inline">\(D(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;)\)</span>
这个函数不为 <span class="math inline">\(0\)</span>，只能是 <span
class="math inline">\(k+k&#39;+k&#39;&#39;+k&#39;&#39;&#39;\)</span> 为
<span class="math inline">\(2N\)</span> 的倍数，注意 <span
class="math inline">\(k=-k\)</span></p>
<blockquote>
<p>如果，初始激发模式为 <span
class="math inline">\(k_0=3=k&#39;=k&#39;&#39;=k&#39;&#39;&#39;\)</span>，那么，下一个被激发的模式只能是
<span class="math inline">\(9-3-3-3\)</span>，即 <span
class="math inline">\(k=9\)</span>，再接下来 <span
class="math inline">\(15-3-3-9\)</span>，即 <span
class="math inline">\(k=15\)</span>，接下来：<span
class="math inline">\(21 \quad 27\)</span></p>
</blockquote>
<h2 id="模拟">模拟</h2>
<p><span class="math inline">\(\beta\)</span>
模型，其实前两篇blog已经做了模拟，改一下参数就行，现在验证 <span
class="math inline">\(\beta\)</span>
模型下，激发第3个模式，看看各个模式能量分布。</p>
<blockquote>
<p>代码又重新改了一下，整体上和前两个bolg的差不多，一共三个文件，直接点击打开可能乱码，其实打开以后右键保存，是没有乱码的，编码用的
<code>utf-8</code>，在 <code>ubuntu2004、python3.8</code> 下测试</p>
</blockquote>
<ul>
<li><p><a href="../data/fpu/requirements.txt">requirements.txt
点我下载</a></p>
<p>python 依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li>
<li><p><a href="../data/fpu/config.py">config.py 点我下载</a></p>
<p>这里可以切换模型，每个文件、图的含义，在这里有备注</p></li>
<li><p><a href="../data/fpu/fpu.py">fpu.py 点我下载</a></p>
<p>这个模拟得到不同时刻，每个原子速度位移分布的代码</p></li>
<li><p><a href="../data/fpu/data.py">data.py 点我下载</a></p>
<p>这个在模拟以后运行，得到几个图</p></li>
</ul>
<figure>
<img src="/images/2021/eks_beta.png" alt="\beta模型，奇数模式能量" />
<figcaption aria-hidden="true"><span
class="math inline">\(\beta\)</span>模型，奇数模式能量</figcaption>
</figure>
<p>可以看到，与推测的一致：初始激发3模式，然后9、15、21、27被激发</p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><p>Nonlinear coupled oscillators: Modal equation approach</p>
<p><code>10.1016/0021-9991(73)90169-1</code></p></li>
<li><p>q -Breathers and the Fermi-Pasta-Ulam Problem</p>
<p><code>10.1103/PhysRevLett.95.064102</code></p></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/53634.html">https://yuhldr.github.io/posts/53634.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>波动方程</tag>
        <tag>fpu</tag>
        <tag>选择定则</tag>
      </tags>
  </entry>
  <entry>
    <title>FPU单链模式能量</title>
    <url>/posts/46949.html</url>
    <content><![CDATA[<p>接上一篇，<a
href="./28023.html">FPU单链模式能量</a>模拟得到了单链各个原子不同时刻速度位移分布，根据这些数据计算一下每个时刻，各个模式的能量大小，得到FPU经典图</p>
<h2 id="模式能量含义">模式能量含义</h2>
<p>上一篇文章记录了FPU模型模拟时的完整过程，最后得到的是不同时刻的每个原子的位移
<code>xst</code> 和速度分布 <code>vst</code> （矩阵形状 <span
class="math inline">\([(steps+2) \times n]\)</span>）</p>
<p>现在计算不同时刻模式能量</p>
<p><span class="math inline">\(E_n=\frac{m(v_n^2 + x_n^2\times
w^2)}{2}\)</span></p>
<blockquote>
<p>注意，</p>
</blockquote>
<ul>
<li>计算的本征值本身就是 <span class="math inline">\(\omega ^
2\)</span>，不要把本征值在进行平方了</li>
<li>注意投影位移和速度时，本征向量行列别反了</li>
</ul>
<h2 id="测试">测试</h2>
<h3 id="每个模式是否正确">每个模式是否正确</h3>
<p>画出来每个模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第k个模式，从1开始，j原子数从0开始到32</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plt_bz</span>(<span class="params">k, bzxl, bzz</span>):</span><br><span class="line">    N = <span class="built_in">len</span>(bzxls)</span><br><span class="line"></span><br><span class="line">    x = np.linspace(<span class="number">1</span>, N, N)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    js = np.linspace(<span class="number">0</span>, N, N + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(js)</span><br><span class="line"></span><br><span class="line">    file = <span class="string">&quot;cache/imgs/bz/%d&quot;</span> % k</span><br><span class="line">    plt.scatter(x, bzxl)</span><br><span class="line"></span><br><span class="line">    plt.plot((<span class="number">2</span> / (N + <span class="number">1</span>))**<span class="number">0.5</span> * np.sin(np.pi * k * js / (N + <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    title = <span class="string">&quot;%d=%f&quot;</span> % (k, bzz)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line">    plt.savefig(file)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plt_bzs</span>(<span class="params">bzzs, bzxls</span>):</span><br><span class="line"></span><br><span class="line">    plt.plot(bzzs)</span><br><span class="line">    plt.savefig(<span class="string">&quot;cache/imgs/bz/bz&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    pool = newPool()</span><br><span class="line">    N = <span class="built_in">len</span>(bzzs)</span><br><span class="line">    pool.<span class="built_in">map</span>(plt_bz, np.linspace(<span class="number">1</span>, N, N), bzxls, bzzs)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure>
<h3 id="初始位移是否正确">初始位移是否正确</h3>
<p>测试本征值和本征向量行列是否正确，直接画图初始位移投影</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ty_xst</span>(<span class="params">tys, bzxls, log=<span class="literal">True</span></span>):</span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="keyword">if</span> (log):</span><br><span class="line">        plt.axes(yscale=<span class="string">&quot;log&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tys)</span><br><span class="line">    ys = np.dot(tys, np.transpose(bzxls))</span><br><span class="line">    plt.scatter(np.linspace(<span class="number">1</span>, <span class="built_in">len</span>(tys), <span class="built_in">len</span>(tys)), ys)</span><br><span class="line">    plt.savefig(<span class="string">&quot;cache/imgs/ty_xst&quot;</span>)</span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>
<p>上一篇文章，模拟计算以后，载入相关数据，测试一下</p>
<ul>
<li>防止本征向量行列反了</li>
<li>防止模拟时，初始位移用错了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_add = <span class="string">&quot;_alpha&quot;</span></span><br><span class="line"><span class="comment"># file_add = &quot;_beta&quot;</span></span><br><span class="line"><span class="comment"># file_add = &quot;&quot;</span></span><br><span class="line">N = <span class="number">32</span></span><br><span class="line">step_start = <span class="number">0</span></span><br><span class="line">steps = <span class="number">1000000</span></span><br><span class="line">dt = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">xst = np.load(<span class="string">&quot;cache/data/xst%s.npy&quot;</span> % file_add)[step_start:step_start + steps, :]</span><br><span class="line">bzxls = np.load(<span class="string">&quot;data/bzxls.npy&quot;</span>)</span><br><span class="line"></span><br><span class="line">ty_xst(xst[<span class="number">0</span>, :], bzxls, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2个模式</span></span><br><span class="line"><span class="comment"># ty_xst(bzxls[2], bzxls, False)</span></span><br></pre></td></tr></table></figure>
<p>生成的图片，应该是，测试的模式再上面，其他的模式几乎为0</p>
<figure>
<img src="/images/2021/ty_xst.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<h3 id="某个原子位移随时间变化">某个原子位移随时间变化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_n</span>(<span class="params">xst, vst, n_see=<span class="number">16</span></span>):</span><br><span class="line">    legends = []</span><br><span class="line">    plt.ylim(-<span class="number">1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>]:</span><br><span class="line">        s = <span class="string">&quot;-.&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>):</span><br><span class="line">            s = <span class="string">&quot;-&quot;</span></span><br><span class="line">        plt.plot(xst[:, n_see + i], s)</span><br><span class="line">        plt.plot(vst[:, n_see + i], s)</span><br><span class="line">        legends.append(<span class="string">&quot;n=%d&quot;</span> % (n_see + i))</span><br><span class="line"></span><br><span class="line">    plt.legend(legends)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.plot(vst[:, 1])</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;test/nt&quot;</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>
<figure>
<img src="/images/2021/nt_alpha.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="模式能量">模式能量</h2>
<p>获取模式能量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_Ets</span>(<span class="params">xst, vst, bzzs, bzxls</span>):</span><br><span class="line">    bzxls = np.transpose(bzxls)</span><br><span class="line"></span><br><span class="line">    xst_ = np.dot(xst, bzxls)</span><br><span class="line">    vst_ = np.dot(vst, bzxls)</span><br><span class="line"></span><br><span class="line">    Ets = vst_ ** <span class="number">2</span> + xst_**<span class="number">2</span> * np.<span class="built_in">abs</span>(bzzs)</span><br><span class="line"></span><br><span class="line">    np.save(<span class="string">&quot;cache/data/ets.npy&quot;</span>, Ets)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ets</span><br></pre></td></tr></table></figure>
<p>画出某个时间，各个模式能量投影情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_ek</span>(<span class="params">Ets, t=<span class="number">1</span>, onlyOdd=<span class="literal">True</span>, log=<span class="literal">True</span></span>):</span><br><span class="line">    es = Ets[t, :]</span><br><span class="line">    N = <span class="built_in">len</span>(es)</span><br><span class="line"></span><br><span class="line">    xs = np.linspace(<span class="number">1</span>, N, N)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(onlyOdd):</span><br><span class="line">        es = es[::<span class="number">2</span>]</span><br><span class="line">        xs = xs[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(xs)</span><br><span class="line"></span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="keyword">if</span>(log):</span><br><span class="line">        plt.axes(yscale=<span class="string">&quot;log&quot;</span>)</span><br><span class="line">    plt.scatter(xs, es)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(es)):</span><br><span class="line">        plt.annotate(<span class="built_in">str</span>(<span class="built_in">int</span>(xs[i])), xy=(xs[i], es[i]), xytext=(xs[i], es[i]))</span><br><span class="line">    plt.savefig(<span class="string">&quot;test/eks&quot;</span>)</span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>
<p>画出某些模式的能量随时间变化，注意啊，千万不能log坐标下画出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_et</span>(<span class="params">Es, ks=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], log=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    Es = np.array(Es)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(np.shape(Es))</span><br><span class="line"></span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="keyword">if</span> (log):</span><br><span class="line">        plt.axes(yscale=<span class="string">&quot;log&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Es_ = []</span><br><span class="line">    legend = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> ks:</span><br><span class="line">        k = k</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        legend.append(k)</span><br><span class="line">        Es_.append(Es[:, k])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    <span class="comment"># Es_ = Es_ / Es[:, 0]</span></span><br><span class="line"></span><br><span class="line">    ts = np.arange(<span class="built_in">len</span>(Es[:, <span class="number">0</span>])) * t_</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ks)):</span><br><span class="line">        y = Es_[j]</span><br><span class="line">        plt.plot(ts, y)</span><br><span class="line"></span><br><span class="line">    plt.legend(legend)</span><br><span class="line">    <span class="comment"># plt.savefig(&quot;%s/imgs/cals/cal%d_ty.png&quot; % (path_run, cal))</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;test/ets&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/images/2021/es_alpha.png" alt="1" />
<figcaption aria-hidden="true">1</figcaption>
</figure>
<h2 id="完整代码">完整代码</h2>
<blockquote>
<p>提前创建文件夹，没有写在python，上一篇模型时已经创建了</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pathos.multiprocessing <span class="keyword">import</span> ProcessingPool <span class="keyword">as</span> newPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_bz</span>(<span class="params">bzzs, bzxls, V</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试&quot;</span>)</span><br><span class="line">    bzz = bzzs[<span class="number">0</span>]</span><br><span class="line">    bzxl = bzxls[<span class="number">0</span>]</span><br><span class="line">    test_ = (bzz * bzxl) - np.dot(bzxl, V)</span><br><span class="line">    <span class="built_in">print</span>(test_)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过投影，也可以查看是否对</span></span><br><span class="line">    <span class="comment"># ty_xst(xst[0, :], bzxls, False)</span></span><br><span class="line">    <span class="comment"># ty_xst(bzxls[2], bzxls, False)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sum</span>(test_) &lt; <span class="number">10</span>**-<span class="number">8</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;本征值没问题&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_n</span>(<span class="params">xst, vst, n_see=<span class="number">16</span></span>):</span><br><span class="line"></span><br><span class="line">    legends = []</span><br><span class="line">    plt.ylim(-<span class="number">1.5</span>, <span class="number">1.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>]:</span><br><span class="line">        s = <span class="string">&quot;-.&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>):</span><br><span class="line">            s = <span class="string">&quot;-&quot;</span></span><br><span class="line">        plt.plot(xst[:, n_see + i], s)</span><br><span class="line">        <span class="comment"># plt.plot(vst[:, n_see + i], s)</span></span><br><span class="line">        legends.append(<span class="string">&quot;n=%d&quot;</span> % (n_see + i))</span><br><span class="line"></span><br><span class="line">    plt.legend(legends)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.plot(vst[:, 1])</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;test/nt&quot;</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_t</span>(<span class="params">xst, jump=<span class="number">100</span></span>):</span><br><span class="line">    <span class="keyword">for</span> xs <span class="keyword">in</span> xst[::jump]:</span><br><span class="line">        plt.plot(xs)</span><br><span class="line">    plt.savefig(<span class="string">&quot;test/xst&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Ets</span>(<span class="params">xst, vst, bzzs, bzxls</span>):</span><br><span class="line">    bzxls = np.transpose(bzxls)</span><br><span class="line"></span><br><span class="line">    xst_ = np.dot(xst, bzxls)</span><br><span class="line">    vst_ = np.dot(vst, bzxls)</span><br><span class="line"></span><br><span class="line">    Ets = vst_ ** <span class="number">2</span> + xst_**<span class="number">2</span> * np.<span class="built_in">abs</span>(bzzs)</span><br><span class="line"></span><br><span class="line">    np.save(<span class="string">&quot;cache/data/ets.npy&quot;</span>, Ets)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ty_xst</span>(<span class="params">tys, bzxls, log=<span class="literal">True</span></span>):</span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="keyword">if</span> (log):</span><br><span class="line">        plt.axes(yscale=<span class="string">&quot;log&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tys)</span><br><span class="line">    ys = np.dot(tys, np.transpose(bzxls))</span><br><span class="line">    plt.scatter(np.linspace(<span class="number">1</span>, <span class="built_in">len</span>(tys), <span class="built_in">len</span>(tys)), ys)</span><br><span class="line">    plt.savefig(<span class="string">&quot;cache/imgs/ty_xst&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_ek</span>(<span class="params">Ets, t=<span class="number">1</span>, onlyOdd=<span class="literal">True</span>, log=<span class="literal">True</span></span>):</span><br><span class="line">    es = Ets[t, :]</span><br><span class="line">    N = <span class="built_in">len</span>(es)</span><br><span class="line"></span><br><span class="line">    xs = np.linspace(<span class="number">1</span>, N, N)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(onlyOdd):</span><br><span class="line">        es = es[::<span class="number">2</span>]</span><br><span class="line">        xs = xs[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(xs)</span><br><span class="line"></span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="keyword">if</span>(log):</span><br><span class="line">        plt.axes(yscale=<span class="string">&quot;log&quot;</span>)</span><br><span class="line">    plt.scatter(xs, es)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(es)):</span><br><span class="line">        plt.annotate(<span class="built_in">str</span>(<span class="built_in">int</span>(xs[i])), xy=(xs[i], es[i]), xytext=(xs[i], es[i]))</span><br><span class="line">    plt.savefig(<span class="string">&quot;test/eks&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_et</span>(<span class="params">Es, ks=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], log=<span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    Es = np.array(Es)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(np.shape(Es))</span><br><span class="line"></span><br><span class="line">    plt.figure()</span><br><span class="line">    <span class="keyword">if</span> (log):</span><br><span class="line">        plt.axes(yscale=<span class="string">&quot;log&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Es_ = []</span><br><span class="line">    legend = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> ks:</span><br><span class="line">        k = k</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        legend.append(k)</span><br><span class="line">        Es_.append(Es[:, k])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 归一化</span></span><br><span class="line">    <span class="comment"># Es_ = Es_ / Es[:, 0]</span></span><br><span class="line"></span><br><span class="line">    ts = np.arange(<span class="built_in">len</span>(Es[:, <span class="number">0</span>])) * t_</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ks)):</span><br><span class="line">        y = Es_[j]</span><br><span class="line">        plt.plot(ts, y)</span><br><span class="line"></span><br><span class="line">    plt.legend(legend)</span><br><span class="line">    <span class="comment"># plt.savefig(&quot;%s/imgs/cals/cal%d_ty.png&quot; % (path_run, cal))</span></span><br><span class="line">    plt.savefig(<span class="string">&quot;test/ets&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第k个模式，从1开始，j原子数从0开始到32</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plt_bz</span>(<span class="params">k, bzxl, bzz</span>):</span><br><span class="line">    N = <span class="built_in">len</span>(bzxls)</span><br><span class="line"></span><br><span class="line">    x = np.linspace(<span class="number">1</span>, N, N)</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    js = np.linspace(<span class="number">0</span>, N, N + <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(js)</span><br><span class="line"></span><br><span class="line">    file = <span class="string">&quot;cache/imgs/bz/%d&quot;</span> % k</span><br><span class="line">    plt.scatter(x, bzxl)</span><br><span class="line"></span><br><span class="line">    plt.plot((<span class="number">2</span> / (N + <span class="number">1</span>))**<span class="number">0.5</span> * np.sin(np.pi * k * js / (N + <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    title = <span class="string">&quot;%d=%f&quot;</span> % (k, bzz)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    <span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line">    plt.savefig(file)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plt_bzs</span>(<span class="params">bzzs, bzxls</span>):</span><br><span class="line"></span><br><span class="line">    plt.plot(bzzs)</span><br><span class="line">    plt.savefig(<span class="string">&quot;cache/imgs/bz/bz&quot;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line">    pool = newPool()</span><br><span class="line">    N = <span class="built_in">len</span>(bzzs)</span><br><span class="line">    pool.<span class="built_in">map</span>(plt_bz, np.linspace(<span class="number">1</span>, N, N), bzxls, bzzs)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_add = <span class="string">&quot;_alpha&quot;</span></span><br><span class="line"><span class="comment"># file_add = &quot;_beta&quot;</span></span><br><span class="line"><span class="comment"># file_add = &quot;&quot;</span></span><br><span class="line">N = <span class="number">32</span></span><br><span class="line">step_start = <span class="number">0</span></span><br><span class="line">steps = <span class="number">1000000</span></span><br><span class="line">t_ = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">xst = np.load(<span class="string">&quot;cache/data/xst%s.npy&quot;</span> % file_add)[step_start:step_start +</span><br><span class="line">                                                 steps, :]</span><br><span class="line">vst = np.load(<span class="string">&quot;cache/data/vst%s.npy&quot;</span> % file_add)[step_start:step_start +</span><br><span class="line">                                                 steps, :]</span><br><span class="line"><span class="built_in">print</span>(np.shape(xst))</span><br><span class="line">bzzs = np.load(<span class="string">&quot;data/bzzs.npy&quot;</span>)</span><br><span class="line">bzxls = np.load(<span class="string">&quot;data/bzxls.npy&quot;</span>)</span><br><span class="line">V = np.load(<span class="string">&quot;data/V.npy&quot;</span>)</span><br><span class="line"></span><br><span class="line">test_bz(bzzs, bzxls, V)</span><br><span class="line"><span class="comment"># plt_bzs(bzzs, bzxls)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plot_t(xst[0:20000], jump=100)</span></span><br><span class="line"><span class="comment"># plot_n(xst[0:200000, :], vst[0:200000, :], 15)</span></span><br><span class="line"></span><br><span class="line">Ets = get_Ets(xst, vst, bzzs, bzxls)</span><br><span class="line"><span class="built_in">print</span>(np.shape(Ets))</span><br><span class="line">plot_et(Ets)</span><br><span class="line"><span class="comment"># plot_ek(Ets, 100000-1, log=True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ty_xst(xst[0, :], bzxls, False)</span></span><br><span class="line"><span class="comment"># ty_xst(bzxls[2], bzxls, False)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="math inline">\(\beta\)</span>
模型代码不变，注意一下，文件名就行</p>
</blockquote>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/46949.html">https://yuhldr.github.io/posts/46949.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>fpu</tag>
        <tag>模式能量</tag>
      </tags>
  </entry>
  <entry>
    <title>FPU单链模拟</title>
    <url>/posts/28023.html</url>
    <content><![CDATA[<p>这个文章，主要是给予单链一个初始位移分布，模拟单链演变过程，获得每个时刻，各个原子的速度位移</p>
<h2 id="模型">模型</h2>
<p>32个等质量原子，两端固定，原子之间用弹簧连接，弹簧不再是线性的（即
<span class="math inline">\(F=k\Delta x\)</span>）</p>
<p>给予所有原子一个初始分布，不考虑重力，因此原子可以左右移动</p>
<h3 id="模式">模式</h3>
<p>每一个原子是一个谐振子，整个系统的解，通过波动方程求解，是已知的（本博客中有求解方法，详见最下方
<code>相关文章</code>）</p>
<blockquote>
<p><a href="./38767#相关解释">波动方程求解2-分离变量法</a>
中最后一节，每一个 <span class="math inline">\(n\)</span>
对应一个解，每个 <span class="math inline">\(n\)</span>
对应的解（方程）就是不同的模式</p>
</blockquote>
<h3 id="算法">算法</h3>
<h4 id="初始分布求解">初始分布求解</h4>
<p>在实际求解中，知道了势函数（即 <span class="math inline">\(F=k\Delta
x\)</span>）可以写出 <span class="math inline">\(V\)</span> 矩阵(<span
class="math inline">\(n \times n\)</span>)，详见 <a
href="./45586#构建一维链模型">石墨烯振动模式 —— 构建一维链模型</a></p>
<p><span class="math display">\[V=
\left[
\begin{matrix}
-2 &amp; 1  &amp; … &amp; 0 &amp; 0 &amp; 0 &amp; … &amp; 0 &amp; 0\\
1  &amp; -2 &amp; … &amp; 0 &amp; 0 &amp; 0 &amp; … &amp; 0 &amp; 0\\
... &amp; ... &amp; ...  &amp; ... &amp; ...  &amp; ... &amp; ...  &amp;
... &amp; ... \\
0 &amp; 0 &amp; ... &amp; -2 &amp; 1 &amp; 0 &amp; ... &amp; 0 &amp; 0
\\
0 &amp; 0 &amp;  ... &amp; 0 &amp; -2 &amp; 1 &amp; ... &amp; 0 &amp; 0
\\
0 &amp; 0 &amp; ... &amp;  0 &amp; 1 &amp; -2 &amp; ... &amp; 0 &amp; 0
\\
... &amp; ... &amp; ...  &amp; ... &amp; ...  &amp; ... &amp; ...  &amp;
... &amp; ... \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -2 &amp; 1 \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; -2 \\
\end{matrix}
\right]\]</span></p>
<p>求解该矩阵，可以得到本征向量（<span class="math inline">\(n \times
n\)</span>）和本征值（<span class="math inline">\(n \times
1\)</span>），每个本征模式对应的，本征向量 即为 <span
class="math inline">\(t=0\)</span> 时，该模式对应的原子位置分布。</p>
<p>但是实际计算中，要深入理解一下，因为本征方程求解，不同算法是不一样的，比如</p>
<ul>
<li>用 <code>python</code> 的 <code>scipy</code> 求解时，每一
<code>列</code> 是一个本征模式对应的本征向量，也就是
<code>bzxl[: n]</code>，而且注意，本征向量和本征值对应，但是本征值并
<code>没有排序</code>。而我们平时说的第一个本征模式，指的是
<code>绝对值最小</code> 的那个本征值）</li>
</ul>
<blockquote>
<p>如果遇到求解出来的本征向量，对应的初始分布周期太多，或者说，一个上一个下，太乱，大概率时因为把最后一个本征向量当成第一个了</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_bz</span>(<span class="params">V</span>):</span><br><span class="line">    <span class="comment"># ! 接近0的本征值对应的是第一个本征模式，而且默认算出来的是列一个本征向量</span></span><br><span class="line">    bzzs_, bzxls_ = np.linalg.eig(V)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排个序，绝对值最小的是第一个模式</span></span><br><span class="line">    bzzs_arg = np.argsort(<span class="built_in">abs</span>(bzzs_))</span><br><span class="line"></span><br><span class="line">    bzzs = np.array([bzzs_[i] <span class="keyword">for</span> i <span class="keyword">in</span> bzzs_arg])</span><br><span class="line">    bzxls = np.array([bzxls_[:, i] <span class="keyword">for</span> i <span class="keyword">in</span> bzzs_arg])</span><br><span class="line"></span><br><span class="line">    scio.savemat(<span class="string">&quot;data/data.mat&quot;</span>, &#123;<span class="string">&#x27;V&#x27;</span>: V, <span class="string">&quot;bzzs&quot;</span>: bzzs, <span class="string">&quot;bzxls&quot;</span>: bzxls&#125;)</span><br><span class="line"></span><br><span class="line">    np.save(<span class="string">&quot;data/bzzs.npy&quot;</span>, bzzs)</span><br><span class="line">    np.save(<span class="string">&quot;data/bzxls.npy&quot;</span>, bzxls)</span><br><span class="line">    np.save(<span class="string">&quot;data/V.npy&quot;</span>, V)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bzzs, bzxls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_V</span>(<span class="params">N</span>):</span><br><span class="line">    V = np.zeros((N, N))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">if</span> (i == j):</span><br><span class="line">                V[i, j] = -<span class="number">2</span></span><br><span class="line">            <span class="keyword">elif</span> (i == j + <span class="number">1</span> <span class="keyword">or</span> i == j - <span class="number">1</span>):</span><br><span class="line">                V[i, j] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> V</span><br></pre></td></tr></table></figure>
<h4 id="动力学模拟">动力学模拟</h4>
<p>其实就是知道了初始分布，而且知道了弹簧胡克定律，也就知道了在这个分布下，每个原子受力情况，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 受力，单独写出了，方便以后修改胡克定律的形式，比如以后beta模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fs</span>(<span class="params">xs</span>):</span><br><span class="line">    <span class="keyword">return</span> get_fs_alpha(xs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fs_alpha</span>(<span class="params">xs, alpha=<span class="number">0.25</span>, k=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">    N = <span class="built_in">len</span>(xs)</span><br><span class="line"></span><br><span class="line">    xs_ = np.hstack(([<span class="number">0</span>], xs, [<span class="number">0</span>]))</span><br><span class="line">    xs_0 = xs_[<span class="number">0</span>:N]</span><br><span class="line">    xs_1 = xs_[<span class="number">0</span> + <span class="number">1</span>:N + <span class="number">1</span>]</span><br><span class="line">    xs_2 = xs_[<span class="number">0</span> + <span class="number">2</span>:N + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fs = -k*(xs_1-xs_0)-(-k*(xs_2-xs_1)) + \</span></span><br><span class="line">    <span class="comment">#     -alpha*(xs_1-xs_0)**2 - (-alpha*(xs_2-xs_1)**2)</span></span><br><span class="line">    <span class="keyword">return</span> k * (xs_2 + xs_0 - <span class="number">2</span> * xs_1) + alpha * ((xs_2 - xs_1)**<span class="number">2</span> -</span><br><span class="line">                                                   (xs_1 - xs_0)**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>通过 <span
class="math inline">\(F=ma\)</span>可以得到加速度，进而得到下一时刻位移、速度，不断进行这一步，就得到了各个时刻原子位移和速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 根据上一时刻，使用f=ma计算下一时刻，精度有点差，verlet算法更好，但是需要前两时刻的分布，但是本征向量只得到了一个时刻的，第二个时刻还是要用这个精度差的来计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_x_t2</span>(<span class="params">xs, vs, dt, m</span>):</span><br><span class="line">    a_list = get_fs(xs) / m</span><br><span class="line">    xs = xs + vs * dt + a_list * dt**<span class="number">2</span> / <span class="number">2</span></span><br><span class="line">    vs = vs + a_list * dt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xs, vs</span><br></pre></td></tr></table></figure>
<p>但是注意，如果直接这样算，算个几十万上百万步，由于精度限制，会导致偏差很大，画出来一个原子的运动轨迹时，很明显</p>
<p>所以使用 <code>verlet</code> 算法，消去了三次项，精度在四次</p>
<p>泰勒展开</p>
<p><span class="math display">\[ \vec{\vec{x}}(t+\Delta t) = \vec{x}(t)
+ v(t) + \frac{\vec{a}(t)\Delta t^2}{4} + \frac{\vec{b}(t)\Delta t^3}{6}
+ O(\Delta t^4) \]</span> <span class="math display">\[ \vec{x}(t -
\Delta t) = \vec{x}(t) - v(t)  + \frac{\vec{a}(t)\Delta t^2}{4} -
\frac{\vec{b}(t)\Delta t^3}{6} + O(\Delta t^4) \]</span></p>
<p>相加</p>
<p><span class="math display">\[ \vec{x}(t + \Delta t) = 2\vec{x}(t) -
\vec{x}(t - \Delta t) + \vec{a}(t) \Delta t^2 + O(\Delta t^4)
\]</span></p>
<p>很明显，三次项约掉了！精度提高了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 好处是，三阶导数那里约掉了，比直接用牛顿方程，精度高</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_x_t2_verlet</span>(<span class="params">xs_t0, xs_t1, dt, m</span>):</span><br><span class="line">    <span class="comment"># 注意必须是t1时刻的xs，也就是中间时刻的</span></span><br><span class="line">    a_list = get_fs(xs_t1) / m</span><br><span class="line">    xs_t2 = <span class="number">2</span> * xs_t1 - xs_t0 + a_list * dt**<span class="number">2</span></span><br><span class="line">    vs = (xs_t2 - xs_t0) / (<span class="number">2</span> * dt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xs_t1, xs_t2, vs</span><br></pre></td></tr></table></figure>
<p>但是必须两个时刻的位移才能得到下一时刻的，目前第一时刻是用本征向量（绝对值最小的那个），第二时刻，其实还是用
<code>f=ma</code> 但是之后就要用 <code>verlet</code>
算法计算速度和位移了</p>
<blockquote>
<p>注意用 <code>t0</code> <code>t1</code> 计算 <code>t2</code>
的位移，受力用 <code>t1</code>
的位移来计算，否则计算的时间步多了以后，会有大问题</p>
</blockquote>
<h3 id="循环">循环</h3>
<blockquote>
<p>计算时，n个原子用矩阵计算，这样会快一些，因为矩阵乘法本身就自带并行加速了，每一步的循环之间与上一时刻有关，不容易并行，这里就不并行了，<code>i5第9代CPU</code>，计算百万步，也就是十几秒的时间</p>
</blockquote>
<p>如果原子过多，其实没必要每一步都保存，可以间隔一定步数，保存一次，减小最后文件的体积，也减少计算过程中内存的占用（因为速度
vst、位移 xst 都在内存里）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 使用verlet计算，精度更高</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_by_verlet</span>(<span class="params">bzxl, steps=<span class="number">150000</span>, dt=<span class="number">0.01</span>, m=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">    xst = []</span><br><span class="line">    vst = []</span><br><span class="line"></span><br><span class="line">    xs = (bzxl / <span class="built_in">max</span>(bzxl))</span><br><span class="line"></span><br><span class="line">    vs = np.linspace(<span class="number">0</span>, <span class="number">0</span>, N)</span><br><span class="line">    <span class="comment"># 注意x与v对应，必须是同一时刻的</span></span><br><span class="line">    xst.append(xs)</span><br><span class="line">    vst.append(vs)</span><br><span class="line"></span><br><span class="line">    xs_t0 = xs</span><br><span class="line">    <span class="comment"># 第二步必须还是直接用牛顿</span></span><br><span class="line">    xs_t1, vs = get_x_t2(xs, vs, dt, m)</span><br><span class="line"></span><br><span class="line">    xst.append(xs_t1)</span><br><span class="line">    vst.append(vs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># !同步，用矩阵计算也是同步，要注意不要出现，更改这一时刻的分布了，上一时刻的矩阵也被修改了，python的矩阵不深度复制的话，是有指针问题的</span></span><br><span class="line">        <span class="comment"># 注意是第二时刻的分布，计算受力，得到第三时刻的分布</span></span><br><span class="line">        xs_t0, xs_t1, vs = get_x_t2_verlet(xs_t0, xs_t1, dt, m)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (step % <span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;t=%d time=%f &quot;</span> % (step, time.time() - start_time))</span><br><span class="line">            start_time = time.time()</span><br><span class="line">        xst.append(xs_t1)</span><br><span class="line">        vst.append(vs)</span><br><span class="line"></span><br><span class="line">    xst = np.array(xst)</span><br><span class="line">    vst = np.array(vst)</span><br><span class="line"></span><br><span class="line">    np.save(<span class="string">&quot;cache/data/xst_beta.npy&quot;</span>, xst)</span><br><span class="line">    np.save(<span class="string">&quot;cache/data/vst_beta.npy&quot;</span>, vst)</span><br></pre></td></tr></table></figure>
<p>最后得到的是不同时刻的每个原子的位移 <code>xst</code> 和速度分布
<code>vst</code> （矩阵形状 <span class="math inline">\([(steps+2)
\times n]\)</span>）</p>
<h2 id="完整代码">完整代码</h2>
<p>注意的是，把时间间隔变小一点，也就是演化的慢一些了，这样可以减小误差，这里用
<span class="math inline">\(\Delta
t=0.01\)</span>，为了方便质量用单位<span
class="math inline">\(m=10\)</span>，胡克定律的弹簧系数也是 <span
class="math inline">\(k=1\)</span>，计算 <span
class="math inline">\(steps=1000000\)</span>，也就是1万个时间单位</p>
<blockquote>
<p>提前创建文件夹，没有写在python里，是在 linux
运行的，写个sh脚本方便</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> cache;</span><br><span class="line"><span class="built_in">mkdir</span> cache/data;</span><br><span class="line"><span class="built_in">mkdir</span> cache/imgs;</span><br><span class="line"><span class="built_in">mkdir</span> cache/imgs/bz;</span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">mkdir</span> data;</span><br><span class="line"><span class="built_in">mkdir</span> imgs;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第三方库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install numpy scipy</span><br></pre></td></tr></table></figure>
<p>完整程序（包含beta模型，只是换了个受力就可以）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> scipy.io <span class="keyword">as</span> scio</span><br><span class="line"></span><br><span class="line">constant_model_beta = <span class="string">&quot;beta&quot;</span></span><br><span class="line">constant_model_alpha = <span class="string">&quot;alpha&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_bz</span>(<span class="params">V</span>):</span><br><span class="line">    <span class="comment"># ! 接近0的本征值对应的是第一个本征模式，而且默认算出来的是列一个本征向量</span></span><br><span class="line">    bzzs_, bzxls_ = np.linalg.eig(V)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排个序，绝对值最小的是第一个模式</span></span><br><span class="line">    bzzs_arg = np.argsort(<span class="built_in">abs</span>(bzzs_))</span><br><span class="line">    bzzs = np.array([bzzs_[i] <span class="keyword">for</span> i <span class="keyword">in</span> bzzs_arg])</span><br><span class="line">    bzxls = np.array([bzxls_[:, i] <span class="keyword">for</span> i <span class="keyword">in</span> bzzs_arg])</span><br><span class="line"></span><br><span class="line">    scio.savemat(<span class="string">&quot;data/data.mat&quot;</span>, &#123;<span class="string">&#x27;V&#x27;</span>: V, <span class="string">&quot;bzzs&quot;</span>: bzzs, <span class="string">&quot;bzxls&quot;</span>: bzxls&#125;)</span><br><span class="line"></span><br><span class="line">    np.save(<span class="string">&quot;data/bzzs.npy&quot;</span>, bzzs)</span><br><span class="line">    np.save(<span class="string">&quot;data/bzxls.npy&quot;</span>, bzxls)</span><br><span class="line">    np.save(<span class="string">&quot;data/V.npy&quot;</span>, V)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bzzs, bzxls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_V</span>(<span class="params">N</span>):</span><br><span class="line">    V = np.zeros((N, N))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">if</span> (i == j):</span><br><span class="line">                V[i, j] = -<span class="number">2</span></span><br><span class="line">            <span class="keyword">elif</span> (i == j + <span class="number">1</span> <span class="keyword">or</span> i == j - <span class="number">1</span>):</span><br><span class="line">                V[i, j] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> V</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 受力，单独写出了，方便以后修改胡克定律的形式，比如以后beta模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fs</span>(<span class="params">xs, model=constant_model_alpha</span>):</span><br><span class="line">    <span class="keyword">if</span>(constant_model_beta == model):</span><br><span class="line">        <span class="keyword">return</span> get_fs_beta(xs)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> get_fs_alpha(xs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fs_alpha</span>(<span class="params">xs, alpha=<span class="number">0.25</span>, k=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">    N = <span class="built_in">len</span>(xs)</span><br><span class="line"></span><br><span class="line">    xs_ = np.hstack(([<span class="number">0</span>], xs, [<span class="number">0</span>]))</span><br><span class="line">    xs_0 = xs_[<span class="number">0</span>:N]</span><br><span class="line">    xs_1 = xs_[<span class="number">0</span> + <span class="number">1</span>:N + <span class="number">1</span>]</span><br><span class="line">    xs_2 = xs_[<span class="number">0</span> + <span class="number">2</span>:N + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fs = -k*(xs_1-xs_0)-(-k*(xs_2-xs_1)) + \</span></span><br><span class="line">    <span class="comment">#     -alpha*(xs_1-xs_0)**2 - (-alpha*(xs_2-xs_1)**2)</span></span><br><span class="line">    <span class="keyword">return</span> k * (xs_2 + xs_0 - <span class="number">2</span> * xs_1) + alpha * ((xs_2 - xs_1)**<span class="number">2</span> -</span><br><span class="line">                                                   (xs_1 - xs_0)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fs_beta</span>(<span class="params">xs, beta=<span class="number">0.4</span>, k=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">    N = <span class="built_in">len</span>(xs)</span><br><span class="line"></span><br><span class="line">    xs_ = np.hstack(([<span class="number">0</span>], xs, [<span class="number">0</span>]))</span><br><span class="line">    xs_0 = xs_[<span class="number">0</span>:N]</span><br><span class="line">    xs_1 = xs_[<span class="number">0</span> + <span class="number">1</span>:N + <span class="number">1</span>]</span><br><span class="line">    xs_2 = xs_[<span class="number">0</span> + <span class="number">2</span>:N + <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fs = -k*(xs_1-xs_0)-(-k*(xs_2-xs_1)) + \</span></span><br><span class="line">    <span class="comment">#     -beta*(xs_1-xs_0)**3 - (-beta*(xs_2-xs_1)**3)</span></span><br><span class="line">    <span class="keyword">return</span> k * (xs_2 + xs_0 - <span class="number">2</span> * xs_1) + beta * ((xs_2 - xs_1)**<span class="number">3</span> -</span><br><span class="line">                                                  (xs_1 - xs_0)**<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据上一时刻，使用f=ma计算下一时刻，verlet算法，需要前两时刻的分布，但是本征向量只得到了一个时刻的，第二个时刻还是要用这个精度差的来计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_x_t2</span>(<span class="params">xs, vs, dt, m, model=constant_model_alpha</span>):</span><br><span class="line">    a_list = get_fs(xs, model) / m</span><br><span class="line">    xs = xs + vs * dt + a_list * dt**<span class="number">2</span> / <span class="number">2</span></span><br><span class="line">    vs = vs + a_list * dt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xs, vs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 好处是，三阶导数那里约掉了，比直接用牛顿方程，精度高</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_x_t2_verlet</span>(<span class="params">xs_t0, xs_t1, dt, m, model=constant_model_alpha</span>):</span><br><span class="line">    <span class="comment"># 注意必须是t1时刻的xs，也就是中间时刻的</span></span><br><span class="line">    a_list = get_fs(xs_t1, model) / m</span><br><span class="line">    xs_t2 = <span class="number">2</span> * xs_t1 - xs_t0 + a_list * dt**<span class="number">2</span></span><br><span class="line">    vs = (xs_t2 - xs_t0) / (<span class="number">2</span> * dt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xs_t1, xs_t2, vs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用verlet计算，精度更高</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_by_verlet</span>(<span class="params">xs,</span></span><br><span class="line"><span class="params">                  steps=<span class="number">150000</span>,</span></span><br><span class="line"><span class="params">                  dt=<span class="number">0.01</span>,</span></span><br><span class="line"><span class="params">                  m=<span class="number">1</span>,</span></span><br><span class="line"><span class="params">                  model=constant_model_alpha</span>):</span><br><span class="line">    <span class="built_in">print</span>(model + <span class="string">&quot;模型&quot;</span>)</span><br><span class="line"></span><br><span class="line">    xst = []</span><br><span class="line">    vst = []</span><br><span class="line"></span><br><span class="line">    vs = np.linspace(<span class="number">0</span>, <span class="number">0</span>, N)</span><br><span class="line">    <span class="comment"># 注意x与v对应，必须是同一时刻的</span></span><br><span class="line">    xst.append(xs)</span><br><span class="line">    vst.append(vs)</span><br><span class="line"></span><br><span class="line">    xs_t0 = xs</span><br><span class="line">    <span class="comment"># 第二步必须还是直接用牛顿</span></span><br><span class="line">    xs_t1, vs = get_x_t2(xs, vs, dt, m)</span><br><span class="line"></span><br><span class="line">    xst.append(xs_t1)</span><br><span class="line">    vst.append(vs)</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">        <span class="comment"># !同步，用矩阵计算也是同步，要注意不要出现，更改这一时刻的分布了，上一时刻的矩阵也被修改了，python的矩阵不深度复制的话，是有指针问题的</span></span><br><span class="line">        <span class="comment"># 注意是第二时刻的分布，计算受力，得到第三时刻的分布</span></span><br><span class="line">        xs_t0, xs_t1, vs = get_x_t2_verlet(xs_t0, xs_t1, dt, m, model)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (step % <span class="number">10000</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;t=%d time=%f &quot;</span> % (step, time.time() - start_time))</span><br><span class="line">            start_time = time.time()</span><br><span class="line">        xst.append(xs_t1)</span><br><span class="line">        vst.append(vs)</span><br><span class="line"></span><br><span class="line">    xst = np.array(xst)</span><br><span class="line">    vst = np.array(vst)</span><br><span class="line"></span><br><span class="line">    np.save(<span class="string">&quot;cache/data/xst_%s.npy&quot;</span> % model, xst)</span><br><span class="line">    np.save(<span class="string">&quot;cache/data/vst_%s.npy&quot;</span> % model, vst)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(model + <span class="string">&quot;模型&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">32</span></span><br><span class="line">steps = <span class="number">1000000</span></span><br><span class="line">dt = <span class="number">0.01</span></span><br><span class="line">m = <span class="number">1</span></span><br><span class="line">model = constant_model_alpha</span><br><span class="line"></span><br><span class="line">V = get_V(N)</span><br><span class="line"></span><br><span class="line">bzzs, bzxls = get_bz(V)</span><br><span class="line"></span><br><span class="line">start_time_ = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(constant_model_beta == model):</span><br><span class="line">    bzxl = bzxls[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bzxl = bzxls[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(bzxl)</span><br><span class="line">xs = (bzxl / <span class="built_in">max</span>(<span class="built_in">abs</span>(bzxl)))</span><br><span class="line"><span class="built_in">print</span>(xs)</span><br><span class="line"></span><br><span class="line">run_by_verlet(xs, steps=steps, dt=dt, m=m, model=model)</span><br><span class="line"><span class="comment"># run(bzxls[0], steps=steps, dt=dt, m=m)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;time=%f &quot;</span> % (time.time() - start_time_))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="math inline">\(\beta\)</span> 模型代码不变，把
<code>model = constant_model_alpha</code> 改成
<code>model = constant_model_beta</code> 就行</p>
</blockquote>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/28023.html">https://yuhldr.github.io/posts/28023.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>波动方程</tag>
        <tag>振动模式</tag>
        <tag>fpu</tag>
        <tag>verlet</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu20.04全新配置</title>
    <url>/posts/30877.html</url>
    <content><![CDATA[<p>此时搜狗输入法等都一直支持ubuntu20.04</p>
<h2 id="准备">准备</h2>
<blockquote>
<p>注意我的用户名是
<code>yuh</code>，遇到yuh，一般可修改为自己的用户名</p>
</blockquote>
<h3 id="安装ubuntu前">安装ubuntu前</h3>
<ul>
<li><p>系统版本</p>
<p>最小安装Ubuntu</p></li>
<li><p>代理</p></li>
</ul>
<p>如果必须代理才能访问github，提前下载好clash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz</span><br></pre></td></tr></table></figure>
<p>并且解压，重命名为 clash</p>
<h3 id="安装ubuntu后">安装ubuntu后</h3>
<h4 id="cuda">cuda</h4>
<blockquote>
<p>为什么先安装这个，因为他可能导致驱动弄错了，登录时，循环卡死，这时候还是重装系统吧</p>
</blockquote>
<ul>
<li><p>cuda驱动</p>
<p>安装ubuntu系统时，不要选择第三方软件，现在安装cuda时，按照默认选中驱动就行</p></li>
<li><p>cuda</p>
<p>按照官网来：<a
href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=20.04&amp;target_type=deb_network">ubuntu20.04
deb网络版</a></p>
<p>用这个很方便，也方便更新，当时版本时
11.4，下面这命令都是复制的官网的，点 <a
href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=20.04&amp;target_type=deb_network">官网这里</a>，用他的命令，有可能更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，下面这几个命令中，如果卡住，网址中的 `nvidia.com`换成`nvidia.cn`</span></span><br><span class="line"></span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卡住的话，注意 `sudo -E add`，因为我用代理了</span></span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get update &amp;&amp; <span class="built_in">sudo</span> apt-get -y install cuda</span><br></pre></td></tr></table></figure>
<p>配置路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你没有用zsh，编辑这个文件</span></span><br><span class="line">vim ~./bashrc</span><br></pre></td></tr></table></figure>
<p>末尾添加如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/local/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CUDA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CUDA_HOME</span>/lib64<span class="variable">$&#123;LD_LIBRARY_PATH:+:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>
<p>测试安装是否成功，先重启电脑，看看能不能正常登录，驱动坏了直接重装系统那</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，必须整个sample都复制过来</span></span><br><span class="line"><span class="built_in">cp</span> -r /usr/local/cuda/samples ~/ &amp;&amp; <span class="built_in">cd</span> ~/samples/1_Utilities/deviceQuery/ &amp;&amp; make &amp;&amp; ./deviceQuery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">make clean &amp;&amp; make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">cd</span> &amp;&amp; <span class="built_in">rm</span> -r samples</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="最小安装缺少">最小安装缺少</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/code &amp;&amp; <span class="built_in">mkdir</span> ~/code/apps</span><br></pre></td></tr></table></figure>
<p>最小安装缺很多东西，我记得有些需要安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git vim htop tree net-tools python3-pip  wget curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># git</span></span><br><span class="line">git config --global user.email <span class="string">&quot;yuhldr@qq.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;yuh&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="工具">工具</h2>
<h3 id="systemctl">systemctl</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start clash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> fail2ban</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status clash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启进程</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart clash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你又改了clash.service，需要重新加载</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h3 id="配置clash代理">配置clash代理</h3>
<ul>
<li><p>1、配置文件</p>
<p>新建<code>~/code/apps/clash</code> 刚才准备好的clash文件，复制到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/code/apps/clash</span><br></pre></td></tr></table></figure>
<p>修改为可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/apps/clash &amp;&amp; <span class="built_in">chmod</span> +x ./clash</span><br></pre></td></tr></table></figure>
<p>在clash文件夹里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O config.yaml https://d.cloudso.club/link/这个连接每个人不一样，用代理的人应该明白?clash=1&amp;log-level=info</span><br></pre></td></tr></table></figure></li>
<li><p>2、终端设置</p>
<blockquote>
<p>设置以后，有可能导致添加
<code>ppa</code>时，卡住，这时候加上<code>- E</code>，如
<code>sudo -E add-apt-repository ppa:----</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你没有用zsh，编辑这个文件</span></span><br><span class="line">vim ~./bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已开启代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></table></figure></li>
<li><p>3、系统设置</p>
<p>打开系统设置，选择网络，点击网络代理右边的 ⚙ 按钮，选择
<code>手动</code>，填写 <code>HTTP</code> 和 <code>HTTPS</code> 代理为
<code>127.0.0.1:7890</code>，填写 <code>Socks</code> 主机为
<code>127.0.0.1:7891</code>，即可启用系统代理。</p></li>
<li><p>4、临时运行（可跳过）</p>
<p>这样运行，关闭终端程序终止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/apps/clash &amp;&amp; ./clash -d .</span><br></pre></td></tr></table></figure>
<p>你也可以这样在后台运行，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/code/apps/clash &amp;&amp; <span class="built_in">nohup</span> ./clash -d . &amp;</span><br></pre></td></tr></table></figure>
<p>如果要杀死程序，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看pid，是个数字</span></span><br><span class="line">ps -e | grep clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死，把id换成刚才的数字</span></span><br><span class="line"><span class="built_in">kill</span> <span class="built_in">id</span></span><br></pre></td></tr></table></figure></li>
<li><p>5、开机自启</p>
<p>新建运行脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /home/yuh/code/apps/clash/clash.sh</span><br></pre></td></tr></table></figure>
<p>输入 <code>i</code> 开始编辑，输入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/yuh/code/apps/clash</span><br><span class="line">./clash -d .</span><br></pre></td></tr></table></figure>
<p>systemctl管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/systemd/system/clash.service </span><br></pre></td></tr></table></figure>
<p>输入 <code>i</code> 开始编辑，输入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=VPN Clash</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/yuh/code/apps/clash/clash.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl start clash</span><br><span class="line"><span class="built_in">sudo</span> systemctl status clash</span><br></pre></td></tr></table></figure></li>
<li><p>其他问题</p>
<blockquote>
<p>注意的是，有时候chrome还是没法访问外网（但是 <code>firefox</code>
可以），可以这样修改，但是更新chrome有一定几率失效，需要重新修改，因为这是修改的图标，命令行启动的话记得按照修改的这个命令来</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /usr/share/applications/google-chrome.desktop</span><br></pre></td></tr></table></figure>
<p>当前版本是第108行，<code>:108</code> <code>169</code>
<code>211</code> 跳转，这个最关键
<code>--proxy-server="socks5://127.0.0.1:7891" --user-data-dir</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exec=/usr/bin/google-chrome-stable --proxy-server=<span class="string">&quot;socks5://127.0.0.1:7891&quot;</span> --user-data-dir %U</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意不只一个<code>Exec</code>，而且通知栏完全退出
<code>chrome</code>，重新打开即可生效</p>
</blockquote></li>
</ul>
<h3 id="oh-my-zsh">oh-my-zsh</h3>
<blockquote>
<p>不要再用bash了……，安装 <code>zsh</code> 和 <code>oh-my-zsh</code></p>
</blockquote>
<p><a href="./fa905576.html">看这里</a></p>
<h3 id="ssh远程访问">ssh远程访问</h3>
<p>最小安装没有服务器版ssh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install openssh-server</span><br></pre></td></tr></table></figure>
<ul>
<li><p>备份原始的 <code>sshd_config</code> 和
<code>ssh_config</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/ssh/ssh_config /etc/ssh/ssh_config.bak</span><br></pre></td></tr></table></figure></p></li>
<li><p>编辑 <code>sshd_config</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Port 3008  <span class="comment"># 端口号可以自己设置，尽量不要默认22</span></span><br><span class="line">PermitRootLogin no           <span class="comment"># 如果你需要用 root 直接登录系统则此处改为 yes</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span>    <span class="comment"># 将 no 改为 yes 表示使用帐号密码方式登录</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>启动 <code>ssh</code>，查看 <code>status</code>，注意这里不能用
<code>systemctl</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl start ssh</span><br><span class="line"><span class="built_in">sudo</span> systemctl status ssh</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>ubuntu中<code>~/.ssh</code>，如果你是从其他地方复制过来的
<code>.ssh</code>文件，可能导致有些文件的权限不对，无法登录，正确权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 yuh yuh 1M 4月   2 21:42 authorized_keys</span><br><span class="line">-rw-r--r-- 1 yuh yuh 1M 4月  27 16:01 config</span><br><span class="line">-rw------- 1 yuh yuh 1M 12月 18  2020 id_rsa</span><br><span class="line">-rw-r--r-- 1 yuh yuh 1M 12月 18  2020 id_rsa.pub</span><br><span class="line">-rw-r--r-- 1 yuh yuh 1M 7月   9 22:51 known_hosts</span><br></pre></td></tr></table></figure>
<p>即</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 ~/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 644 ~/.ssh/config</span><br><span class="line"><span class="built_in">chmod</span> 644 ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<h3 id="fail2ban">fail2ban</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fail2ban</span><br></pre></td></tr></table></figure>
<ul>
<li><p>配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/fail2ban/jail.local</span><br></pre></td></tr></table></figure>
<p>注意， &gt; 2和3可以干脆不填,它会自己管理</p>
<ol type="1">
<li>因为用了路由器的虚拟服务器10022转22，所以ssh实际的还是22端口</li>
<li>防火墙用的是firewallcmd，所以
<code>banaction = firewallcmd-ipset</code></li>
<li>因为它的原理是解析登录文件，所以对centos来说
<code>logpath = /var/log/secure</code> 但是对于ubuntu来说
<code>logpath = /var/log/auth.log</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8 210.26.51.241 192.168.1.0/200 172.16.24.37</span><br><span class="line">bantime = 864000</span><br><span class="line">findtime = 600</span><br><span class="line">maxretry = 5</span><br><span class="line"></span><br><span class="line">[sshd]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">port = 22</span><br><span class="line">filter = sshd</span><br></pre></td></tr></table></figure></li>
<li><p>常用命令</p>
<p>开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now fail2ban</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看被拦截情况</span></span><br><span class="line"><span class="built_in">sudo</span> fail2ban-client status sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件以后更新</span></span><br><span class="line">fail2ban-client reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解封</span></span><br><span class="line"><span class="built_in">sudo</span> fail2ban-client <span class="built_in">set</span> sshd banip 180.95.131.67</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封禁ip</span></span><br><span class="line"><span class="built_in">sudo</span> fail2ban-client <span class="built_in">set</span> sshd unbanip 180.95.131.67</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="docker">docker</h3>
<h4 id="安装">安装</h4>
<p>可以看 <a
href="https://docs.docker.com/engine/install/ubuntu/">官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载旧的，其实新的最小安装的ubuntu2004，不需要</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装需要的工具</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install apt-transport-https ca-certificates curl  gnupg  lsb-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加官方GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置稳定版</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update &amp;&amp; <span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启，与之前一样，enable开机自启，start开启，stop关闭，status查看</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now  docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前用户免sudo，运行docker</span></span><br><span class="line"><span class="built_in">sudo</span> gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否成功，包含用户名即可</span></span><br><span class="line"><span class="built_in">cat</span> /etc/group | grep docker</span><br></pre></td></tr></table></figure>
<h4 id="可视化portainer">可视化portainer</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 防止更新时数据消失</span></span><br><span class="line">docker volume create portainer_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你上面不设置，也可以直接把 `portainer_data`设置为本地目录，进行映射</span></span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure>
<p>浏览器打开 <a
href="http://localhost:9000">点我：localhost:9000</a></p>
<p>第一次要设置账户密码，然后注意选择第一个docker</p>
<h2 id="软件">软件</h2>
<h3 id="snap">snap</h3>
<p>idea，pycharm，vscode，android-studio等，都可以用</p>
<p>可搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> snap search idea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装，有时候会报错，后面加上 `--classic`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你用社区版，可以 pycharm-community，这个名字都是用 `snap search pycharm得到的`</span></span><br><span class="line"><span class="built_in">sudo</span> snap install intellij-idea-ultimate</span><br><span class="line"><span class="built_in">sudo</span> snap install pycharm-professional</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> snap install android-studio</span><br><span class="line"></span><br><span class="line"><span class="comment"># vscode，不建议这么安装，这样安装的，貌似没法输入中文，去官网安装吧，那样也可以apt自动更新</span></span><br><span class="line"><span class="built_in">sudo</span> snap install code</span><br></pre></td></tr></table></figure>
<h3 id="nextcloud客户端">nextcloud客户端</h3>
<p>看这里，<a
href="https://launchpad.net/~nextcloud-devs/+archive/ubuntu/client">ppa主页</a></p>
<p>如果你在其他地方有nextcloud服务端，可以在自己电脑上设置客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -E 是因为我设置了终端代理，可能导致添加ppa时卡死</span></span><br><span class="line"><span class="built_in">sudo</span> -E add-apt-repository ppa:nextcloud-devs/client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请注意ppa主页上的说明，针对不容文件管理器用不一样的更号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于ubuntu with Nautilus:</span></span><br><span class="line"><span class="built_in">sudo</span> apt install nautilus-nextcloud</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不建议下面这种安装，因为ubuntu20.04文件管理器是nautilus，上面的安装可以在文件管理器上显示：分享、同步等图标，右键也可以分享，</span></span><br><span class="line"><span class="comment"># 下面这个只是可以用而已</span></span><br><span class="line"><span class="built_in">sudo</span> apt install nextcloud-client</span><br></pre></td></tr></table></figure>
<p>开始菜单里可以看到图标</p>
<p>nextcloud设置里可以直接设置开机自启</p>
<hr />
<p>如果直接使用<a
href="https://github.com/nextcloud/desktop/releases">github:nextcloud-desktop
AppImage</a>，虽然设置功能全，貌似不是中文，也没有文件夹同步小图标，可以如图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -O ~/.local/share/nautilus-python/extensions/syncstate-Nextcloud.py <span class="string">&quot;https://raw.githubusercontent.com/nextcloud/desktop/master/shell_integration/nautilus/syncstate.py&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install python3-nautilus</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install nextcloud-desktop-l10n</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重启即可，</p>
<h3 id="texlive">texlive</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我用的是兰大镜像</span></span><br><span class="line">wget https://mirror.lzu.edu.cn/CTAN/systems/texlive/Images/texlive.iso</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /mnt/tex &amp;&amp; <span class="built_in">sudo</span> mount -o loop ./texlive.iso /mnt/tex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装，按照提示就行，输入D，可以修改路径，输入 I ，回车</span></span><br><span class="line"><span class="built_in">sudo</span> /mnt/tex/install-tl</span><br></pre></td></tr></table></figure>
<p>配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你配置了zsh, </span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 如果还是bash， </span></span><br><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/texlive/2021/bin/x86_64-linux:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="字体">字体</h3>
<p>latex需要字体，我们这里直接复制windows里面的字体，我的双系统目前是windows11和ubuntu21.10</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看现有中文字体</span></span><br><span class="line">fc-list :lang=zh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /usr/share/fonts/winfonts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制windows11字体,/media/yuh/6C76FFF776FFC03E是在文件管理器里，点，其他，点击windows11 C盘以后挂载上的名字</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /media/yuh/6C76FFF776FFC03E/Windows/Fonts/*.ttf /usr/share/fonts/winfonts</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /media/yuh/6C76FFF776FFC03E/Windows/Fonts/*.ttc /usr/share/fonts/winfonts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新字体</span></span><br><span class="line"><span class="built_in">sudo</span> mkfontscale &amp;&amp; <span class="built_in">sudo</span> mkfontdir &amp;&amp; <span class="built_in">sudo</span> fc-cache -fv</span><br></pre></td></tr></table></figure>
<h3 id="nodenpm">node、npm</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nodejs npm -y</span><br></pre></td></tr></table></figure>
<p>现在的hexo博客</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用n安装其他版本node</span></span><br><span class="line"><span class="built_in">sudo</span> npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装稳定版</span></span><br><span class="line"><span class="built_in">sudo</span> n stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装长期支持版</span></span><br><span class="line"><span class="built_in">sudo</span> n lts</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看过期的</span></span><br><span class="line">npm outdated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新hexo的nexT</span></span><br><span class="line"><span class="built_in">sudo</span> npm update</span><br></pre></td></tr></table></figure>
<h3 id="corntab">corntab</h3>
<p>crontab首次使用选择编辑器，如果想修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.selected_editor</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by /usr/bin/select-editor</span></span><br><span class="line">SELECTED_EDITOR=<span class="string">&quot;/usr/bin/vim&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="mendeley">mendeley</h3>
<blockquote>
<p>不建议它了，zotero6.0可以软件内pdf笔记了，而且中文输入很友好</p>
</blockquote>
<p><a
href="https://www.mendeley.com/guides/download-mendeley-desktop/ubuntu/instructions">官网</a>
给的apt不能安装，用它的<code>deb</code>吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.mendeley.com/repositories/ubuntu/stable/amd64/mendeleydesktop-latest</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> dpkg -i mendeleydesktop-latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般会有依赖失败</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装</span></span><br><span class="line"><span class="built_in">sudo</span> dpkg -i mendeleydesktop-latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除刚才下载文件</span></span><br><span class="line"><span class="built_in">rm</span> mendeleydesktop-latest</span><br></pre></td></tr></table></figure>
<h3 id="lammps">lammps</h3>
<p><a href="./320.html">看这里</a></p>
<h3 id="code-server">code-server</h3>
<p>在线编辑器，基于theia</p>
<p>项目位置 <a
href="https://github.com/cdr/code-server">github开源</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>
<p>查看密码，直接修改这个文件里<code>password</code>对应的密码即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.config/code-server/config.yaml</span><br></pre></td></tr></table></figure>
<p>开机自启还是用<code>systemctl</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<p>如果用nginx代理，可以https，可以二级目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  域名;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      ssl目录/fullchain.pem;</span><br><span class="line">    ssl_certificate_key  ssl目录/privkey.pem;</span><br><span class="line"></span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf;</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location /yuhVS/ &#123;</span><br><span class="line">            proxy_pass http://localhost:8080/;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection upgrade;</span><br><span class="line">            proxy_set_header Accept-Encoding gzip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http转接</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    server_name  域名;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nps">nps</h3>
<p>如果你有一台服务器配置了 <a
href="https://ehang-io.github.io/nps/#/">nps</a></p>
<p>算了，这里不介绍了，看官网吧，以后有时间在整理吧</p>
<h3 id="tensorflow">tensorflow</h3>
<p>前面已经配置cuda，现在安装 <a
href="https://developer.nvidia.com/rdp/cudnn-download">cudnn</a>，需要登录</p>
<p>下载
<code>cuDNN Runtime Library for Ubuntu20.04 x86_64 (Deb)</code></p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i 文件名</span><br></pre></td></tr></table></figure>
<p>然后tensorflow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure>
<p>可以看 <a href="https://www.tensorflow.org/install">官网</a></p>
<h3 id="plank">plank</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -E add-apt-repository ppa:ricotz/docky</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install plank</span><br></pre></td></tr></table></figure>
<h3 id="extensions.gnome">extensions.gnome</h3>
<p><a href="https://extensions.gnome.org/">扩展</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install chrome-gnome-shell gnome-tweak-tool -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装第一个theme的扩展</span></span><br><span class="line"><span class="comment"># ubuntu21.10 gnome-tweak-tool -&gt; gnome-tweaks</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先安装 <a
href="https://www.opendesktop.org/p/1136805/">他</a>，就可以在线安装主题了</p>
<p><a href="https://www.gnome-look.org/browse/">在线安装主题</a></p>
<p>图标主图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository ppa:numix/ppa</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install numix-icon-theme-circle</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/30877.html">https://yuhldr.github.io/posts/30877.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>docker</tag>
        <tag>lammps</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>修改windows10中docker20默认位置</title>
    <url>/posts/52201.html</url>
    <content><![CDATA[<p>目的，避免C盘爆炸，移动WSL2和docker进入D盘</p>
<h2 id="准备">准备</h2>
<ul>
<li><p>系统版本</p>
<p>windows10专业版：20H2，19042.964</p></li>
<li><p>WSL2</p>
<p>Ubuntu20.04</p></li>
<li><p>Docker</p>
<p>安装 <code>Docker Desktop</code>， Docker版本：20.10.5, build
55c4c88</p></li>
</ul>
<p>这里使用 <code>Docker Desktop</code>
安装，不推荐在WSL2中使用linux的方式安装，原因：</p>
<ul>
<li>vscode中不支持</li>
<li>自启需要自己设置</li>
</ul>
<h3 id="安装-docker-desktop">安装 Docker Desktop</h3>
<p>首先安装 <code>Docker Desktop</code> ，设置中如图，打开WSL2对应的
<code>Ubuntu20.04</code> 开关，然后右下角应用设置：</p>
<figure>
<img src="/images/2021/docker-desktop.png" alt="Docker Desktop设置" />
<figcaption aria-hidden="true">Docker Desktop设置</figcaption>
</figure>
<h3 id="关闭所有">关闭所有</h3>
<p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>
<p>如图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  NAME                   STATE           VERSION</span><br><span class="line">* Ubuntu-20.04           Running         2</span><br><span class="line">  docker-desktop-data    Running         2</span><br><span class="line">  docker-desktop         Running         2</span><br></pre></td></tr></table></figure>
<p>然后退出
<code>Docker Desktop</code>，状态栏右下角也要退出，彻底退出，</p>
<p>然后停止WSL2，记住之前看到的WSL2对应的系统，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --shutdown Ubuntu-20.04</span><br></pre></td></tr></table></figure>
<p>再次查看是否完全停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>
<h3 id="移动">移动</h3>
<p>根据自己的用户名，打开文件管理器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users（用户）\你的用户名\AppData\Local\Docker</span><br></pre></td></tr></table></figure>
<p>剪贴 <code>wsl</code> 文件，复制到其他盘，我这里复制到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\WSL2\Docker</span><br></pre></td></tr></table></figure>
<p>然后链接回去，<code>win R</code> 输入 <code>cmd</code>
打开终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /J C:\Users\yuh\AppData\Local\Docker\wsl D:\WSL2\Docker\wsl</span><br></pre></td></tr></table></figure>
<p>如果报错，就是因为前面没有完全关闭 docker和wsl2</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/52201.html">https://yuhldr.github.io/posts/52201.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>gitalk登录错误403</title>
    <url>/posts/24342.html</url>
    <content><![CDATA[<p>NexT代理配置默认如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  github_id: <span class="comment"># GitHub repo owner</span></span><br><span class="line">  repo: <span class="comment"># Repository name to store issues</span></span><br><span class="line">  client_id: <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  client_secret: <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  admin_user: <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  distraction_free_mode: <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>
<p>代理项目会失效，gitalk会升级版本更换这个，但是更新以后，我这边一直不生效，我们其实可以自己加一个代理项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure>
<p>这个网址可以去 <a href="https://gitalk.github.io/">gitalk官网</a>
找到</p>
<figure>
<img src="/images/2021-04/gitalk.png" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure>
<p>到 <a href="https://gitalk.github.io/">gitalk官网</a>
登录github，不需要评论，登录过程中，可以看到截图里的这个网址。</p>
<p>参考如下</p>
<p><a
href="https://github.com/gitalk/gitalk/issues/429">在授权gitalk后出现403错误</a></p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/24342.html">https://yuhldr.github.io/posts/24342.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Js</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>hexo</tag>
        <tag>gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>python第三方库解方程</title>
    <url>/posts/6261.html</url>
    <content><![CDATA[<h2 id="非线性方程求解">非线性方程求解</h2>
<h2 id="方程到代码">方程到代码</h2>
<p>简单一个试一下，方程</p>
<p><span class="math display">\[
y=sin(x) + x
\]</span></p>
<p>如果 <span class="math inline">\(x=\frac{\pi}{2}, y =
1+\frac{\pi}{2}\)</span>，写出代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = math.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(math.pi/<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 2.5707963267948966</span></span><br></pre></td></tr></table></figure>
<h2 id="库函数转换">库函数转换</h2>
<p>假设我们知道 <span class="math inline">\(y =
1+\frac{\pi}{2}\)</span>，求解x，这里我们使用 <code>sympy</code>
库。注意我们需要把 <code>math</code> 这些库的函数（比如
<code>math.sin</code> 和 <code>math.pi</code> ）替换为
<code>sympy</code> 库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = sp.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(sp.pi/<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 1 + pi/2</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-sympy-求解">使用 <code>sympy</code> 求解</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = sp.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = sp.symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y = <span class="number">1</span> + sp.pi / <span class="number">2</span></span><br><span class="line">eqs = sp.Eq(f(x), y)</span><br><span class="line">solution = sp.solve(eqs, x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solution)</span><br></pre></td></tr></table></figure>
<p>很不靠谱，求解不出来</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">No algorithms are implemented to solve equation x + sin(x) - pi/2 - 1</span><br></pre></td></tr></table></figure>
<h2 id="sympy-结合-scipy"><code>sympy</code> 结合
<code>scipy</code></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fsolve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    y = sp.sin(x) + x</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = sp.symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">y = <span class="number">1</span> + sp.pi / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始值，猜测结果，有时候这个很重要</span></span><br><span class="line">initial_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">func = sp.lambdify(x, f(x) - y)</span><br><span class="line">solution = fsolve(func, initial_value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solution)</span><br></pre></td></tr></table></figure>
<h2 id="复杂方程求解">复杂方程求解</h2>
<p><span class="math display">\[
b(v)=\sum_{m=0}^4C_4^mv^m(1-v)^{(4-m)}g(h_i, \beta)
\]</span></p>
<p>其中变量是 <span class="math inline">\(v\)</span>，<span
class="math inline">\(\omega_i\)</span> 是未知数，<span
class="math inline">\(tanh\)</span> 是三角函数，其中 <span
class="math inline">\(g(h_i, \beta)\)</span> 如下</p>
<p>其中</p>
<p><span class="math display">\[
g(h_i,\beta)=\frac{1}{2}(1+\frac{tanh(\beta h_i)}{tanh(\beta)})
\]</span></p>
<p>其中 <span class="math inline">\(h_i\)</span> 如下</p>
<p><span class="math display">\[
h_i=\frac{\omega_im-(4-m)}{\omega_im+(4-m)}
\]</span></p>
<p>如果我们知道 <span class="math inline">\(v=\frac{1}{2}\)</span> 时
<span
class="math inline">\(b(\frac{1}{2})=0.07\)</span>，我们可以求解未知参数
<span class="math inline">\(\omega_i\)</span> ,代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> fsolve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">v2bi</span>(<span class="params">v, w_z, beta=<span class="number">2</span></span>):</span><br><span class="line">    Cs = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">    b_i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        h_i = (w_z * m - (<span class="number">4</span> - m)) / (w_z * m + (<span class="number">4</span> - m))</span><br><span class="line">        g_i = (<span class="number">1</span> + sp.tanh(beta * h_i) / sp.tanh(beta)) / <span class="number">2</span></span><br><span class="line">        b_i += Cs[m] * (v**m) * ((<span class="number">1</span> - v)**(<span class="number">4</span> - m)) * g_i</span><br><span class="line">    <span class="keyword">return</span> b_i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initial_value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">w_i = sp.symbols(<span class="string">&#x27;w_i&#x27;</span>)</span><br><span class="line">result = <span class="number">0.07</span></span><br><span class="line"></span><br><span class="line">func = sp.lambdify(w_i, v2bi(<span class="number">1</span> / <span class="number">2</span>, w_i) - result)</span><br><span class="line">solution = fsolve(func, initial_value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solution)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># [0.03433438]</span></span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/6261.html">https://yuhldr.github.io/posts/6261.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2高级使用</title>
    <url>/posts/2411.html</url>
    <content><![CDATA[<h2 id="安装在其他分区">1. 安装在其他分区</h2>
<blockquote>
<p>2021-11-03 官网不提供 zip 文件了，好像不能用这个方法了</p>
</blockquote>
<p>应用商店的只能安装在C盘，可以直接下载WSL的文件，解压在其他盘，双击或者命令安装即可</p>
<p><a
href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">官网下载地址</a></p>
<ul>
<li><p>对于ubuntu20.04直接双击<code>.exe</code> 文件安装即可</p></li>
<li><p>Debian 需要使用 PowerShell 安装发行版。
只需导航到包含从上面下载的发行版的文件夹，然后在该目录中运行以下命令，其中，app_name
是 distro.appx 文件的名称</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Add-AppxPackage .\app_name.appx</span><br></pre></td></tr></table></figure></p>
<p>注意：Debain这样安装还是在 <span class="math inline">\(C\)</span>
盘，Ubuntu是安装在解压的目录</p></li>
</ul>
<p>其他版本未测试</p>
<h2 id="多个wsl2">2. 多个WSL2</h2>
<p>查看wsl2版本以及正在运行的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure>
<p>设置默认版本，<code>Ubuntu</code>就是上面那个命令看到的其中一个发行版名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wslconfig /setdefault Ubuntu</span><br></pre></td></tr></table></figure>
<h2 id="压缩储存">3. 压缩储存</h2>
<blockquote>
<p>WSL随着使用，占用空间会越来越大，即使你删除WSL2里面的文件，体积不会减少！！！</p>
</blockquote>
<ul>
<li><p>准备</p>
<p>查看你准备压缩的WSL2名字</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure></p>
<p>类似如下</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME            STATE           VERSION</span><br><span class="line">* Debian          Running         2</span><br><span class="line">Ubuntu-20.04    Running         2</span><br></pre></td></tr></table></figure></p>
<p>并且确保已经删除了无用文件，但是占用体积没有改变，可以进入对应的wsl2，</p>
<p>然后 <code>sudo su</code> 进入 `root
用户，输入如下，查看实际占用体积，可能比较慢</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -h --max-depth=1 --exclude=/mnt  / | <span class="built_in">sort</span> -h</span><br></pre></td></tr></table></figure></p></li>
<li><p>定位虚拟磁盘文件 <code>ext4.vhdx</code></p>
<p>如果你要压缩Ubuntu-20.04</p>
<p>先找到发行版安装位置，定位虚拟磁盘文件 <code>ext4.vhdx</code>
所在，如果你是按照上面的直接下载解压安装在其他盘，找到你解压的位置，如果是在应用商店安装，以ubuntu为例大概在
<code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code></p>
<p>使用PowerShell导航到 <code>ext4.vhdx</code> 所在位置</p></li>
<li><p>停止准备压缩的发行版</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --shutdown Ubuntu-20.04</span><br></pre></td></tr></table></figure></p></li>
<li><p>压缩</p>
<p>在PowerShell中输入 <code>diskpart</code> 来启动diskpart工具</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> vdisk file=<span class="string">&quot;C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx&quot;</span></span><br></pre></td></tr></table></figure></p>
<p><code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code>
改为你刚才定位的 <code>ext4.vhdx</code> 的路径</p>
<p>选中成功的话，输出的文字中有 <code>successfully</code> 字样</p>
<p>然后压缩，等待结束</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">compact vdisk</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="内存限制">4. 内存限制</h2>
<p>linux会把内存全部缓存，会影响windows10，可以限制wsl最大内存，将
<code>.wslconfig</code> 文件放置在用户文件夹的根目录下（即
<code>C:\Users\&lt;YourUserName&gt;\.wslconfig</code>）来配置全局 WSL
选项，运行 <code>wsl --shutdown</code> 来关闭 WSL 2 虚拟机，重启 WSL 2
，以确保这些配置生效。</p>
<p>详细的看 <a
href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config#configure-global-options-with-wslconfig">官方中文文档</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line"><span class="comment"># 自定义 Linux 内核的绝对路径</span></span><br><span class="line">kernel=&lt;path&gt;</span><br><span class="line"><span class="comment"># 给 WSL 2 虚拟机分配的内存大小</span></span><br><span class="line">memory=&lt;size&gt;</span><br><span class="line"><span class="comment"># 为 WSL 2 虚拟机分配的处理器核心数量</span></span><br><span class="line">processors=&lt;number&gt;</span><br><span class="line"><span class="comment"># 为 WSL 2 虚拟机分配的交换空间，0 表示没有交换空间</span></span><br><span class="line">swap=&lt;size&gt;</span><br><span class="line"><span class="comment"># 自定义交换虚拟磁盘 vhd 的绝对路径</span></span><br><span class="line">swapFile=&lt;path&gt;</span><br><span class="line"><span class="comment"># 是否允许将 WSL 2 的端口转发到主机（默认为 true）</span></span><br><span class="line">localhostForwarding=&lt;bool&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># `&lt;path&gt;` 必须是带反斜杠的绝对路径，例如 `C:\\Users\\kernel`</span></span><br><span class="line"><span class="comment"># `&lt;size&gt;` 必须在后面加上单位，例如 8 GB 或 512 MB</span></span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/2411.html">https://yuhldr.github.io/posts/2411.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>石墨烯振动模式</title>
    <url>/posts/45586.html</url>
    <content><![CDATA[<h2 id="一些词汇含义">一些词汇含义</h2>
<p>前两篇文章，波动方程求解中</p>
<ul>
<li><p>本征值</p>
<p><span class="math display">\[sin\sqrt{\lambda} l=0\]</span></p>
<p>此时，<span class="math inline">\(\lambda\)</span>
只能取特定的值，称为 <strong>本征值</strong></p>
<p><span class="math display">\[\lambda _n = (\frac{n\pi}{l})^2 \qquad n
= 0,1,2,3……\]</span></p>
<blockquote>
<p>给定边界条件(两端位移为0)，特定时刻，绳子可以有很多满足条件的分布(波谷的个数不同)，每个分布中，绳子的波谷个数
<span class="math inline">\(n\)</span> 不同，<span
class="math inline">\(\lambda\)</span> 与 <span
class="math inline">\(n\)</span> 相关</p>
</blockquote></li>
<li><p>本征函数</p>
<p>对于每一个本征值 <span
class="math inline">\(\lambda_n\)</span>对应一个<span
class="math inline">\(X_n(x)\)</span>的解</p>
<p><span class="math display">\[X_n(x)=Csin\frac{n\pi}{l}x \qquad n =
0,1,2,3……\]</span></p>
<p>这个解，被称为 <strong>本征函数</strong></p>
<blockquote>
<p>给定边界条件(两端位移为0)，特定时刻，绳子可以有很多满足条件的分布，每个分布函数都是本征函数</p>
</blockquote></li>
<li><p>本征频率</p>
<p>对于每一个 <span class="math inline">\(\lambda _n\)</span> 都有一个
<span class="math inline">\(T_n(t)\)</span> 的解与之对应</p>
<p><span class="math display">\[T_n(t)=A_nsin(a\frac{n\pi}{l}t) +
B_ncos(a\frac{n\pi}{l}t) \qquad n = 0,1,2,3……\]</span></p>
<p>此时令 <span
class="math inline">\(a\frac{n\pi}{l}=\omega_n\)</span>，这里的 <span
class="math inline">\(\omega_n\)</span> 就是
<strong>本征频率</strong>，上面的式子可以写成</p>
<p><span class="math display">\[T_n(t)=A_nsin(\omega_nt) +
B_ncos(\omega_nt)\qquad n = 0,1,2,3……\]</span></p>
<blockquote>
<p>绳子上某一点，随时间的位移变化频率</p>
</blockquote></li>
</ul>
<p>线性代数中</p>
<blockquote>
<p>参考 <a
href="https://zh.wikipedia.org/zh-cn/%E7%89%B9%E5%BE%81%E5%80%BC%E5%92%8C%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F">维基百科</a></p>
</blockquote>
<ul>
<li><p>本征向量与本征值</p>
<p><span class="math display">\[Av=\lambda v\]</span></p>
<p>一个 <span class="math inline">\(n \times n\)</span> 矩阵 <span
class="math inline">\(A\)</span> 与 <span class="math inline">\(n \times
1\)</span> 矩阵 <span class="math inline">\(v\)</span> 相乘，等于常数
<span class="math inline">\(\lambda\)</span> 与 矩阵 <span
class="math inline">\(v\)</span> 相乘，</p>
<p>官方：对于一个给定的方阵 <span class="math inline">\(A\)</span>
，它的特征向量 <span class="math inline">\(v\)</span>
经过这个线性变换之后，得到的新向量仍然与原来的 <span
class="math inline">\(v\)</span>
保持在同一条直线上，但其长度或方向也许会改变。</p>
<blockquote>
<p><span class="math inline">\(\lambda\)</span>
为其本征值（eigenvalue，也译本征值、固有值）; <span
class="math inline">\(v\)</span>
为本征向量(eigenvector)，也译“特征向量、固有向量”</p>
</blockquote></li>
<li><p>举例</p></li>
</ul>
<p>如果一个矩阵通过线性变换可以变为对角矩阵</p>
<p><span class="math display">\[
A =\left[
\begin{matrix}
2 &amp;  0 &amp;  0 \\
0 &amp; 2 &amp; 0 \\
0 &amp; 0 &amp; 4
\end{matrix}
\right]
\]</span></p>
<p><strong>特征值</strong> 就是2和4。2对应的 <strong>特征向量</strong>
是所有形同 <span class="math inline">\((a, b, 0)^T\)</span>
的非零向量，而4对应的特征向量是所有形同 <span
class="math inline">\((0,0,c)^{T}\)</span>
的非零向量。2对应的特征空间是一个2维空间，而4对应的特征空间是一个1维空间</p>
<h2 id="构建一维链模型">构建一维链模型</h2>
<ol type="1">
<li>固定边界条件</li>
</ol>
<ol start="0" type="1">
<li><ul>
<li><ol type="1">
<li><ul>
<li><ol start="2" type="1">
<li><ul>
<li>..... - (i-1) - (i) - (i+1) - ..... - (n-1) - (n) - (n+1)</li>
</ul></li>
</ol></li>
</ul></li>
</ol></li>
</ul></li>
<li>和 (N+1)
两端固定，中间一共N个原子，(-)代表原子之间弹簧连接，以向右为正，第i个原子的位移为
<span class="math inline">\(x_i\)</span>，由于固定边界条件，<span
class="math inline">\(x_0=x_{n+1}=0\)</span>，对于原子(1)收到的力为
<span class="math inline">\(F=-k\Delta x\)</span></li>
</ol>
<p><span
class="math display">\[m\ddot{x_1}=-k(x_1-x_0)+k(x_2-x_1)\]</span></p>
<p><span class="math display">\[
\frac{m\ddot{x_1}}{k} = x_0+x_2-2x_1=
\left[
\begin{matrix}
x_1 &amp; x_2 &amp; ... &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; ...
&amp; x_{n-1} &amp; x_n
\end{matrix}
\right]
\dot{}
\left[
\begin{matrix}
-2 \\ 1 \\ ... \\ 0 \\ 0 \\ 0 \\ ... \\ 0 \\ 0
\end{matrix}
\right]
\]</span></p>
<blockquote>
<p>矩阵（行列式）相乘：左行 <span class="math inline">\(\times\)</span>
右列，每一项相加</p>
</blockquote>
<p>同理，对于第i个原子，</p>
<p><span class="math display">\[
\frac{m\ddot{x_i}}{k} = x_{i-1}+x_{i+1}-2x_i=
\left[
\begin{matrix}
x_1 &amp; x_2 &amp; ... &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; ...
&amp; x_{n-1} &amp; x_n
\end{matrix}
\right]
\dot{}
\left[
\begin{matrix}
0 \\ 0 \\ ... \\ 1 \\ -2 \\ 1 \\ ... \\ 0 \\ 0
\end{matrix}
\right]
\]</span></p>
<p>第n个原子</p>
<p><span class="math display">\[
\frac{m\ddot{x_n}}{k} = x_{n-1}+x_{n+1}-2x_n=
\left[
\begin{matrix}
x_1 &amp; x_2 &amp; ... &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; ...
&amp; x_{n-1} &amp; x_n
\end{matrix}
\right]
·
\left[
\begin{matrix}
0 \\ 0 \\ ... \\ 0 \\ 0 \\ 0 \\ ... \\ 1 \\ -2
\end{matrix}
\right]
\]</span></p>
<p>又因为x与时间的关系为余弦函数，</p>
<p><span class="math display">\[x_i=A_i cos(\omega t +
\phi)  \]</span></p>
<p><span class="math display">\[\ddot{x_i}=-\omega^2(A_i cos(\omega t +
\phi))=-\omega^2 x_i\]</span></p>
<p>将上面n个式子相加，并代入<span
class="math inline">\(\ddot{x_i}=-\omega^2 x_i\)</span></p>
<p><span class="math display">\[
-\omega^2\frac{m}{k}\vec{x} = \vec{x}  V
\]</span></p>
<p>其中： <span class="math display">\[
\vec{x} =
\left[
\begin{matrix}
x_1 &amp; x_2 &amp; ... &amp; x_{i-1} &amp; x_i &amp; x_{i+1} &amp; ...
&amp; x_{n-1} &amp; x_n
\end{matrix}
\right]
\]</span></p>
<p><span class="math display">\[
V=
\left[
\begin{matrix}
-2 &amp; 1  &amp; … &amp; 0 &amp; 0 &amp; 0 &amp; … &amp; 0 &amp; 0\\
1  &amp; -2 &amp; … &amp; 0 &amp; 0 &amp; 0 &amp; … &amp; 0 &amp; 0\\
... &amp; ... &amp; ...  &amp; ... &amp; ...  &amp; ... &amp; ...  &amp;
... &amp; ... \\
0 &amp; 0 &amp; ... &amp; -2 &amp; 1 &amp; 0 &amp; ... &amp; 0 &amp; 0
\\
0 &amp; 0 &amp;  ... &amp; 0 &amp; -2 &amp; 1 &amp; ... &amp; 0 &amp; 0
\\
0 &amp; 0 &amp; ... &amp;  0 &amp; 1 &amp; -2 &amp; ... &amp; 0 &amp; 0
\\
... &amp; ... &amp; ...  &amp; ... &amp; ...  &amp; ... &amp; ...  &amp;
... &amp; ... \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -2 &amp; 1 \\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; -2 \\
\end{matrix}
\right]
\]</span></p>
<p>正好和之前的本征向量、本征值形式相同</p>
<p><span class="math display">\[Av=\lambda v\]</span></p>
<p><span class="math inline">\(v=\vec{x}, A=V,
\lambda=-\omega^2\frac{m}{k}\)</span></p>
<p><span class="math inline">\(V\)</span> 矩阵已知，可以求解特征向量
<span class="math inline">\(\vec{x}\)</span>（n维），特征值为 <span
class="math inline">\(-\omega^2\frac{m}{k}\)</span></p>
<p>求解出来的特征值有n个，每个特征值对应一个特征向量 <span
class="math inline">\(\vec{x}\)</span>（n维）</p>
<p>使用python求解代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特征值赋值给tzzs，对应特征向量赋值给tzxls</span></span><br><span class="line"><span class="comment">#! 注意本征值没有从大到小排序</span></span><br><span class="line">tzzs0, tzxls0 = np.linalg.eig(V)</span><br><span class="line"></span><br><span class="line"><span class="comment">#! 深度复制，不然你修改tzzs，tzzs0也变</span></span><br><span class="line">tzzs = copy.deepcopy(tzzs0)</span><br><span class="line"></span><br><span class="line">tzzs = <span class="built_in">sorted</span>(tzzs, reverse=<span class="literal">True</span>)</span><br><span class="line">tzxls = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tzzs)):</span><br><span class="line">    m = np.where(tzzs0 == tzzs[i])[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    tzxls.append(tzxls0[:, m])</span><br><span class="line"></span><br><span class="line">tzxls = np.array(tzxls)</span><br><span class="line"><span class="built_in">print</span>(tzxls)</span><br></pre></td></tr></table></figure>
<h2 id="二维石墨烯">二维石墨烯</h2>
<p>类似，按照FPU本征模式计算本征矩阵</p>
<p><span class="math display">\[
V_{mn}=
\left\lbrace
\begin{matrix}
-24 \gamma &amp;  m=n\\
-12 \gamma &amp; mn两个原子近邻\\
-2 \gamma &amp; mn两个原子次近邻 \\
0 &amp; 其他情况
\end{matrix}
\right.
\]</span></p>
<p>本征值排序以后，前15个本征模式如图</p>
<figure>
<img src="/images/2021-04/graphene_bzms.jpg" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure>
<p>本征值(橙色排序后，蓝色排序前)</p>
<figure>
<img src="/images/2021-04/tzz.png" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure>
<blockquote>
<p>画图方法：取第一个本征向量，扩大一定倍数，做为石墨烯的z轴坐标，用scatter画图，z轴数值同时作为scatter的颜色</p>
</blockquote>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/45586.html">https://yuhldr.github.io/posts/45586.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>石墨烯</tag>
        <tag>振动模式</tag>
      </tags>
  </entry>
  <entry>
    <title>波动方程求解2-分离变量法</title>
    <url>/posts/38767.html</url>
    <content><![CDATA[<blockquote>
<p>大量参考《数学物理方法》-杨孔庆</p>
</blockquote>
<h2 id="齐次方程齐次边界条件">齐次方程齐次边界条件</h2>
<p>写成方程形式为：</p>
<p><span class="math display">\[
\begin{cases}
u_{tt}-a^2u_{xx}=0\qquad &amp;(0&lt;x&lt;l,\quad t&gt;0)\\
u(0,t)=u(l,t)=0\qquad &amp;(t&gt;0)\\
u(x,0)=\phi(x)\qquad &amp;(0&lt;x&lt;l)\\
u_t(x,0)=v(x)\qquad &amp;(0&lt;x&lt;l)
\end{cases}
\]</span></p>
<p>这四个等式，上一篇文章都推导过</p>
<ul>
<li>第一个：等号右边外力项 <span
class="math inline">\(f_0(x,t)=0\)</span>，即齐次波动方程，其中 <span
class="math inline">\(u_{tt}\)</span>
为弦振动的位移（x轴对应的某一点的弦在y轴方向上下振动）对时间的二阶求导，<span
class="math inline">\(u_{xx}\)</span>
为弦函数（某一时刻，整条线呈现为一个y关于x的函数）对x的二阶导</li>
<li>第二个：第一类边界条件，两端固定；</li>
<li>第三个：<span class="math inline">\(t=0\)</span>
的初始状态，弦位置分布；</li>
<li>第四个：<span class="math inline">\(t=0\)</span>
时初始状态，每一点的速度分布。</li>
</ul>
<h2 id="分离变量">分离变量</h2>
<p>分离变量法，<span class="math inline">\(u\)</span> 是关于时间 <span
class="math inline">\(t\)</span> 和位置 <span
class="math inline">\(x\)</span> 的复合函数，我们假设函数的解 <span
class="math inline">\(u\)</span> 中，<span
class="math inline">\(t\)</span> 与 <span
class="math inline">\(x\)</span> 可以分开即最终解为</p>
<p><span class="math display">\[u(x,t)=X(x)T(t)\]</span></p>
<p>（因为每一时刻 <span class="math inline">\(z\)</span> 整条弦是一个
<span class="math inline">\(y\)</span> 关于 <span
class="math inline">\(x\)</span>
的函数，而每一点在不同的时候上下振动也是一个关于时间 <span
class="math inline">\(t\)</span> 的函数）
将这个形式的解带入到上面的第一个等式中</p>
<p>其中第一项 <span class="math inline">\(u_{tt}\)</span> 为函数 <span
class="math inline">\(u\)</span> 对时间 <span
class="math inline">\(t\)</span> 的二阶求导（求导两次），对 <span
class="math inline">\(t\)</span> 求导时，<span
class="math inline">\(X(x)\)</span> 与 <span
class="math inline">\(t\)</span> 无关不会变，反之相同；<span
class="math inline">\(T’{’}\)</span> 代表 <span
class="math inline">\(T(t)\)</span>
对时间的二阶导（这里的“双撇”用英文引号，在hexo
next公式里面有问题，我是这么打出来的<code>T’&#123;’&#125;</code>，直接复制，不然有问题）</p>
<p><span class="math display">\[
\begin{aligned}
u_{tt} &amp;=  \frac{\partial\frac{\partial (X(x)T(t))}{\partial
t}}{\partial t}\\
&amp;= X(x) \frac{\partial\frac{\partial (T(t))}{\partial t}}{\partial
t}\\
&amp;= X(x) T(t)’{’}\\
&amp;=XT’{’}
\end{aligned}
\]</span></p>
<p>同理 <span
class="math inline">\(u_{xx}=T(t)X(x)’{’}=TX’{’}\)</span></p>
<p><span class="math display">\[u_{tt}-a^2u_{xx} =
XT’{’}-a^2TX’{’}=0\]</span></p>
<p><span
class="math display">\[\frac{T’{’}}{a^2T}=\frac{X’{’}}{X}\]</span></p>
<p>上面这个等式，左边全部与 <span class="math inline">\(t\)</span>
相关，右边全部与 <span class="math inline">\(x\)</span>
相关，如果他们相等只能是常数，比如如果他们等于 <span
class="math inline">\(2t\)</span>，那么随着 <span
class="math inline">\(t\)</span> 的变化，方程左边变了，但是右边只与
<span class="math inline">\(x\)</span> 有关，是不变的，反之同理</p>
<h2 id="xx求通解">X(x)求通解</h2>
<p>因此假设</p>
<p><span
class="math display">\[\frac{T’{’}}{a^2T}=\frac{X’{’}}{X}=-\lambda
\qquad (\lambda&gt;0)\]</span></p>
<blockquote>
<p>如果为正，后面的计算中会有冲突</p>
</blockquote>
<p>对于 <span
class="math inline">\(\frac{X’{’}}{X}=-\lambda\)</span>，即<span
class="math inline">\(X’{’}+\lambda X =
0\)</span>，这是一个常见的二阶常微分方程，使用特征方程法，我们假设<span
class="math inline">\(X = Ce^{r x}\)</span>，则有</p>
<p><span class="math display">\[X’{’} + \lambda X = r ^2 C e^{r x} +
\lambda C e^{r x} = 0\]</span></p>
<p>特征方程为：</p>
<p><span class="math display">\[r^2 + \lambda = 0\]</span></p>
<p>有两个虚数根：</p>
<p><span class="math display">\[r = \pm \sqrt{\lambda} i\]</span></p>
<p>解有两个<span class="math inline">\(\{C_1e^{r_1x} ，
C_2e^{r_2x}\}\)</span>，且线性无关，根据解的线性叠加原理可知：</p>
<p>解集 <span class="math inline">\(X= C_1e^{r_1x} +
C_2e^{r_2x}=C_1e^{\sqrt{\lambda} ix} + C_2e^{-\sqrt{\lambda}
ix}\)</span> 为通解。</p>
<p>对于虚数指数有如下关系（欧拉恒等式）：</p>
<p><span class="math display">\[e^{ix} = cosx +  i sinx\]</span></p>
<p>则通解为</p>
<p><span class="math display">\[X = C_1e^{\sqrt{\lambda} ix} +
C_2e^{-\sqrt{\lambda} ix} =
(C_1+C_2)cos\sqrt{\lambda}x+i(C_1-C_2)sin\sqrt{\lambda}x\]</span></p>
<p>但是包含虚数，因此为了方便运算，我们再取其中两个特解，进行线性叠加，可以得到通解</p>
<ul>
<li><p>当<span
class="math inline">\(C_1=C_2=\frac{1}{2}\)</span>时，特解为<span
class="math inline">\(X=(\frac{1}{2}+\frac{1}{2})cos\sqrt{\lambda}x\)</span></p></li>
<li><p>当<span
class="math inline">\(C_1=-C_2=\frac{1}{2i}\)</span>时，特解为<span
class="math inline">\(X=i (\frac{1}{2i}+\frac{1}{2i})
sin\sqrt{\lambda}=sin\sqrt{\lambda}x\)</span></p></li>
</ul>
<p>则我们的通解可以写为：</p>
<p><span
class="math display">\[X=Csin\sqrt{\lambda}x+Dcos\sqrt{\lambda}x\]</span></p>
<blockquote>
<p>此处 <span class="math inline">\(C\)</span>
仅仅为线性叠加的常数，与上面的 <span class="math inline">\(C \quad C_1
\quad C_2\)</span>无关</p>
</blockquote>
<h2
id="xx带入边界条件--本征函数本征值">X(x)带入边界条件--本征函数、本征值</h2>
<p>对于边界条件 <span class="math inline">\(u(0,t)=u(l,t)=0\)</span>
，将分离变量后 <span class="math inline">\(u(x,t)=X(x)T(t)\)</span>
带入，可得</p>
<p><span class="math display">\[X(0)T(t)=X(l)T(t)\]</span></p>
<p>显然T(t)不能为0，否则<span
class="math inline">\(u(x,t)\)</span>恒为0，波动方程不动了……，只能是</p>
<p><span class="math display">\[X(0)=X(l)=0\]</span></p>
<p>刚才关于<span class="math inline">\(X(x)\)</span>的通解为<span
class="math inline">\(X=Csin\sqrt{\lambda}x+Dcos\sqrt{\lambda}x\)</span></p>
<p>分别带入边界条件</p>
<p><span class="math inline">\(X(0)=0\)</span>时，<span
class="math inline">\(X=Csin\sqrt{\lambda}x+Dcos\sqrt{\lambda}x=D=0\)</span></p>
<p><span class="math inline">\(X(l)=0\)</span>时，<span
class="math inline">\(X=Csin\sqrt{\lambda}l+0 \times
cos\sqrt{\lambda}x=0\)</span></p>
<p>C不能为0，否则，又变成了恒等式，只能是</p>
<p><span class="math display">\[sin\sqrt{\lambda} l=0\]</span></p>
<p>此时，<span class="math inline">\(\lambda\)</span>
只能取特定的值，称为 <strong>本征值</strong></p>
<p><span class="math display">\[\sqrt{\lambda}l = n\pi \qquad n =
0,1,2,3……\]</span></p>
<p><span class="math display">\[\lambda _n = (\frac{n\pi}{l})^2 \qquad n
= 0,1,2,3……\]</span></p>
<p>对于每一个本征值 <span
class="math inline">\(\lambda_n\)</span>对应一个<span
class="math inline">\(X_n(x)\)</span>的解</p>
<p><span class="math display">\[X_n(x)=Csin\frac{n\pi}{l}x \qquad n =
0,1,2,3……\]</span></p>
<p>这个解，被称为 <strong>本征函数</strong></p>
<h2 id="tt求解--本征频率">T(t)求解--本征频率</h2>
<p>与之前<span
class="math inline">\(X(x)\)</span>的求解同理，T(t)的通解为</p>
<p><span class="math display">\[T=Asin(a\sqrt{\lambda} t) +
Bcos(a\sqrt{\lambda} t)\]</span></p>
<p>这里的<span
class="math inline">\(\lambda\)</span>和之前X(x)求解中是一个，所以</p>
<p><span class="math display">\[\lambda _n = (\frac{n\pi}{l})^2 \qquad n
= 0,1,2,3……\]</span></p>
<p>对于每一个 <span class="math inline">\(\lambda _n\)</span> 都有一个
<span class="math inline">\(T_n(t)\)</span> 的解与之对应</p>
<p><span class="math display">\[T_n(t)=A_nsin(a\frac{n\pi}{l}t) +
B_ncos(a\frac{n\pi}{l}t) \qquad n = 0,1,2,3……\]</span></p>
<p>此时令 <span
class="math inline">\(a\frac{n\pi}{l}=\omega_n\)</span>，这里的 <span
class="math inline">\(\omega_n\)</span> 就是
<strong>本征频率</strong>，上面的式子可以写成</p>
<p><span class="math display">\[T_n(t)=A_nsin(\omega_nt) +
B_ncos(\omega_nt)\qquad n = 0,1,2,3……\]</span></p>
<p>这时候，每一个本征值 <span class="math inline">\(\lambda_n\)</span>
都对应一个本征解 <span class="math inline">\(u_n\)</span></p>
<h2 id="最终定解">最终定解</h2>
<p><span class="math display">\[u_n(x,t) =
X(x)T(t)=Csin\frac{n\pi}{l}x(A_nsin(\omega_nt) + B_ncos(\omega_nt)) n =
0,1,2,3……\]</span></p>
<p>因为 <span class="math inline">\(A_n \quad B_n \quad C\)</span>
都只是一个积分常数，我们将 <span class="math inline">\(CA_n\)</span>
合并为 <span class="math inline">\(A_n\)</span>，注意，前后的 <span
class="math inline">\(A_n\)</span> 并不相等，只是代表一个常数，<span
class="math inline">\(B_n\)</span> 也做同样处理，式子可以化为</p>
<p><span class="math display">\[u_n(x,t) =
X(x)T(t)=sin(\frac{n\pi}{l}x)(A_nsin(\omega_nt) +
B_ncos(\omega_nt))\qquad  n = 0,1,2,3……\]</span></p>
<p>这无穷多个 <span class="math inline">\(u_n\)</span>
都是满足波动方程和边界条件，由线性微分方程解的线性叠加原理可以得知，这一问题的解为无穷多个
<span class="math inline">\(u_n\)</span> 的线性叠加</p>
<p><span class="math display">\[u(x,t)=\sum_{n=1}^\infty u_n(x,t) =
\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_nsin(\omega_nt) +
B_ncos(\omega_nt))\qquad  n = 0,1,2,3……\]</span></p>
<p>其中的 <span class="math inline">\(A_n \quad
B_n\)</span>可以由最开始的四个方程中的初始状态确定，即方程3、4</p>
<h2 id="初始状态求a_nb_n">初始状态：求<span
class="math inline">\(A_nB_n\)</span></h2>
<p>对于上面解中</p>
<p><span class="math display">\[\sum_{n=1}^\infty
sin(\frac{n\pi}{l}x)\qquad  n = 0,1,2,3……\]</span></p>
<p>是一个完备的正交函数系</p>
<p>由于初始条件 <span class="math inline">\(\phi(x) \quad v(x)\)</span>
都是定义在 <span class="math inline">\([0,l]\)</span>
上的，我们可以在这个函数系上进行Fourier展开，如下</p>
<p><span class="math display">\[
\phi(x) = \sum_1^n \phi_n sin(\frac{n\pi}{l}x) \tag {5.1}
\]</span></p>
<p><span class="math display">\[v(x) = \sum_1^n v_n sin(\frac{n\pi}{l}x)
\tag {5.2}\]</span></p>
<p>展开系数可以写为</p>
<p><span class="math display">\[\phi_n = \frac{2}{l} \int_0^l \phi(x)
sin(\frac{n\pi}{l}x) \tag {5.3}\]</span></p>
<p><span class="math display">\[v_n = \frac{2}{l} \int_0^l v(x)
sin(\frac{n\pi}{l}x) \tag {5.4}\]</span></p>
<p>最开始的初始状态有</p>
<p><span class="math display">\[
\begin{cases}
u(x,0)=\phi(x)\qquad &amp;(0&lt;x&lt;l)\\
u_t(x,0)=v(x)\qquad &amp;(0&lt;x&lt;l)
\end{cases}
\]</span></p>
<p>之前 <span class="math inline">\(u(x,t)\)</span>
已经有解，因此可得</p>
<p><span class="math display">\[
\begin{aligned}
\phi(x)&amp;=u(x,0)\\
&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_nsin(\omega_n 0) +
B_ncos(\omega_n 0))\\
&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)B_n
\end{aligned} \tag {5.5}
\]</span></p>
<p>速度函数，对t求导即可</p>
<p><span class="math display">\[
\begin{aligned}
v(x)&amp;=u_t(x,0)\\
&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_n \omega_n cos(\omega_n
t) -B_n \omega_n sin(\omega_n t))\\
&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_n \omega_n)
\end{aligned} \tag {5.6}
\]</span></p>
<p>注意 <span class="math inline">\((5.1) \quad (5.5) \quad
(5.3)\)</span>对比</p>
<p><span class="math display">\[B_n= \phi_n = \frac{2}{l} \int_0^l
\phi(x) sin(\frac{n\pi}{l}x)\]</span></p>
<p>同样，<span class="math inline">\((5.2) \quad (5.6) \quad
(5.4)\)</span>对比</p>
<p><span class="math display">\[\begin{aligned}
A_n= \frac{v_n}{\omega_n} &amp;= \frac{2}{\omega_nl} \int_0^l \phi(x)
sin(\frac{n\pi}{l}x)\\
&amp;=\frac{2}{an\pi} \int_0^l \phi(x) sin(\frac{n\pi}{l}x)
\end{aligned}\]</span></p>
<h2 id="相关解释">相关解释</h2>
<blockquote>
<p>结合方程，对弦振动的一些解释</p>
</blockquote>
<p>之前求解的 <span class="math inline">\(u(x,t)\)</span>
通过三角函数的和差化积公式可以得到</p>
<p><span class="math display">\[\begin{aligned}
u_n(x,t) &amp;= \sum_{n=1}^\infty sin(\frac{n\pi}{l}x)(A_nsin(\omega_nt)
+ B_ncos(\omega_nt))\\
&amp;=\sum_{n=1}^\infty sin(\frac{n\pi}{l}x)C_n sin(\omega_n t-\delta_n)
\qquad  n = 0,1,2,3……
\end{aligned}\]</span></p>
<p>这里的本征解 <span class="math inline">\(u_n(x,t)\)</span> 表示弦的第
<span class="math inline">\(n\)</span> 个振动模式，其中</p>
<p><span class="math display">\[C_n=\sqrt{A_n^2+B_n^2}\]</span></p>
<p><span class="math display">\[\delta_n =
arctan\frac{B_n}{A_n}\]</span></p>
<p><span class="math display">\[\omega_n = \frac{an\pi}{l}\]</span></p>
<blockquote>
<p><span class="math inline">\(\delta_n\)</span> 表示第 <span
class="math inline">\(n\)</span> 个振动模式的相位，<span
class="math inline">\(\omega_n\)</span> 表示第 <span
class="math inline">\(n\)</span> 个振动模式的频率</p>
</blockquote>
<p>第 <span class="math inline">\(n\)</span>
个振动模式，对于弦上任意一处 <span class="math inline">\(x\)</span>
点的振幅为：</p>
<p><span class="math display">\[a_n(x) =
sin(\frac{n\pi}{l}x)C_n\]</span></p>
<p>显然</p>
<ul>
<li><p>波节：振幅 <span class="math inline">\(a_n=0\)</span> 此时 <span
class="math inline">\(x=0,\frac{l}{n},……,\frac{n-1}{n}l\)</span>，振幅
<span class="math inline">\(a_n=0\)</span></p></li>
<li><p>波腹：振幅最大值 <span class="math inline">\(a_n=0\)</span> <span
class="math inline">\(x=\frac{1}{2n}l,
\frac{3}{2n}l,……,\frac{2n-1}{2n}l\)</span>，振幅 <span
class="math inline">\(a_n=C_n\)</span></p></li>
</ul>
<blockquote>
<p>n = 1时被称为“基波”；n &gt; 1时被称为“n次谐波”</p>
</blockquote>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/38767.html">https://yuhldr.github.io/posts/38767.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>数学物理方程</tag>
        <tag>波动方程</tag>
      </tags>
  </entry>
  <entry>
    <title>波动方程求解</title>
    <url>/posts/58883.html</url>
    <content><![CDATA[<blockquote>
<p>大量参考《数学物理方法》-杨孔庆</p>
</blockquote>
<h2 id="弦振动推导波动方程">弦振动推导波动方程</h2>
<p>高中竞赛物理常见近似，x趋近于0时，如下（画个三角形显而易见）：</p>
<p><span class="math display">\[cos x = 1  \]</span></p>
<p><span class="math display">\[ sin x = tan x \times cos x = tanx =
x(弧度制)\]</span></p>
<h3 id="初始设定">初始设定</h3>
<p>弦：线密度 <span
class="math inline">\(\rho\)</span>，每一点上下震动（x方向唯一为0） <img
src="../images/2021-03/string.png" alt="图" /></p>
<h3 id="受力分析">受力分析</h3>
<ol type="1">
<li><p>x处，dx长的的一段绳子（线密度<span
class="math inline">\(\rho\)</span>）:</p>
<p>受到三个可能的力，两端的拉力<span
class="math inline">\(T_x\)</span>和<span
class="math inline">\(T_{x+dx}\)</span>，与绳子相切，切角大小分别为<span
class="math inline">\(\alpha\)</span>和<span
class="math inline">\(\beta\)</span>，并且单位长度弦可能受到外力，暂时认为是竖直方向，<span
class="math inline">\(f_0(x,t)\)</span></p>
<figure>
<img src="/images/2021-03/20210317.png" alt="受力" />
<figcaption aria-hidden="true">受力</figcaption>
</figure></li>
<li><p>由于x轴上没有运动，x方向受力平衡</p>
<p><span class="math display">\[T_xcos\alpha - T_{x+dx} cos\beta =
0\]</span></p>
<p>弦的振幅很小，可取<span class="math inline">\(\alpha\)</span><span
class="math inline">\(\beta\)</span> -&gt; 0，由上面的近似可得</p>
<p><span class="math display">\[T_x = T_{x+dx} = T\]</span></p></li>
<li><p>竖直方向上，运动方程为</p>
<p><span
class="math display">\[Tsin\alpha-T_{x+dx}sin\beta+f_0(x,t)dx=ma=(\rho
dx) u_{tt}\]</span></p>
<p>其中<span
class="math inline">\(u_{tt}\)</span>为竖直方向位移对时间的二阶导数</p>
<p>由最开始的近似关系，可进一步化简为：</p>
<p><span class="math display">\[ Ttan\alpha-Ttan\beta+f_0(x,t)dx=(\rho
dx) u_{tt} \]</span></p>
<p><span class="math inline">\(tan\)</span>函数可以看做斜率：</p>
<p><span class="math display">\[Ttan\alpha-Ttan\beta=T(\frac{\partial
u}{\partial x}\bigg|_{x+dx}-\frac{\partial u}{\partial
x}\bigg|_x)\]</span></p>
<p>其中</p>
<p><span class="math display">\[\frac{\partial u}{\partial
x}\bigg|_{x+dx} - \frac{\partial u}{\partial x}\bigg|_x=\frac{\partial^2
u}{\partial^2 x}dx\]</span> 可得</p>
<p><span class="math display">\[T\frac{\partial^2 u}{\partial^2
x}+f_0(x,t)=\rho u_{tt}\]</span></p>
<p>写成标准形式：</p>
<p><span class="math display">\[u_{tt}-au_{xx}=f(x,t)\]</span></p>
<p>其中 <span
class="math inline">\(a=\frac{T}{\rho}\)</span>，即振动在弦上传播的速度，<span
class="math inline">\(f(x,t)=\frac{f_0(x,t)}{\rho}\)</span>被称为外力密度，单位长度密度上所施加的外力。当<span
class="math inline">\(f(x,t)=0\)</span>，方程变为</p>
<p><span class="math display">\[u_{tt}-a^2u_{xx}=0 (0&lt;x&lt;l,t
&gt;0)\]</span></p>
<p>即为一次齐次波动方程</p></li>
</ol>
<h3 id="定解条件">定解条件</h3>
<p>“初始条件”与“边界条件”</p>
<h4 id="初始条件">初始条件</h4>
<p>位移分布和速度分布已知，<span
class="math inline">\(\psi(x)\)</span>和<span
class="math inline">\(v(x)\)</span>为已知函数</p>
<p><span class="math display">\[u(x,0)=\psi(x) \qquad 0 \leq x \leq
l\]</span></p>
<p><span class="math display">\[u_t(x,0)=v(x) \qquad 0 \leq x \leq
l\]</span></p>
<h4 id="边界条件">边界条件</h4>
<p>共三类，分别是：</p>
<ul>
<li>绳子两端固定</li>
<li>绳子两端不收到任何力，自由端</li>
<li>绳子两端是弹簧</li>
</ul>
<ol type="1">
<li><p>固定边界（两端）</p>
<p>好比最上面的那个图，两端始终在x轴上的某一点即</p>
<p><span class="math display">\[u(0,t)=u(l,t)=0\]</span></p>
<p>随着时间t的变化，x=0和x=l处的绳子两端坐标u不变</p></li>
<li><p>自由边界（两端）</p>
<p>在我们之前的方程推导中，默认的是，<span
class="math inline">\(x\)</span>处的绳子长度<span
class="math inline">\(dx\)</span>，受到绳子两端的其他绳子拉力为</p>
<p><span class="math display">\[T_x、T_{x+dx}\]</span></p>
<p><span
class="math inline">\(y\)</span>轴方向的受力，x轴方向一律认为不动 <span
class="math display">\[T_xsin\alpha、T_{x+dx}\beta\]</span></p>
<p>近似以后为</p>
<p><span class="math display">\[T_xsin\alpha = Ttan\alpha =
T\frac{\partial u}{\partial x}\bigg|_x\]</span></p>
<p><span class="math display">\[T_{x+dx}sin\beta = Ttan\beta =
T\frac{\partial u}{\partial x}\bigg|_{x+dx}\]</span></p>
<p>而真实情况是，<span class="math inline">\(x=0\)</span>和<span
class="math inline">\(x=l\)</span>处，绳子自由时，这两段绳子只能受到一端绳子的力，另一端外力为0，即</p>
<p><span class="math display">\[T\frac{\partial u}{\partial
x}\bigg|_0=0\]</span></p>
<p><span class="math display">\[T\frac{\partial u}{\partial
x}\bigg|_l=0\]</span></p>
<p>其中T可以去掉（绳子两端一个外力左下，一个右上，方向不同，但是此处为0，不考虑正负号）</p>
<p><span class="math display">\[\frac{\partial u}{\partial
x}\bigg|_0=0\]</span></p>
<p><span class="math display">\[\frac{\partial u}{\partial
x}\bigg|_l=0\]</span></p></li>
<li><p>弹性边界（两端）</p>
<p>绳子在两个竖直的弹簧上系着，在这种情况下，2中的竖直方向外力不为0，认为是一种弹力，类似于弹簧<span
class="math inline">\(f=au\)</span>，其中a为弹簧系数，u为y轴竖直方向位移，平衡时，两端受力为（暂时认为向上的力为负）：</p>
<p><span class="math display">\[-\frac{\partial u}{\partial x}\bigg|_0 +
a_1u(0,t) = 0\]</span></p>
<p><span class="math display">\[\frac{\partial u}{\partial x}\bigg|_l +
a_2u(l,t) =0\]</span></p>
<p>两边弹簧弹性系数不一样，分别为<span
class="math inline">\(a_1\)</span>，<span
class="math inline">\(a_2\)</span>。</p></li>
</ol>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/58883.html">https://yuhldr.github.io/posts/58883.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>数学物理方程</tag>
        <tag>波动方程</tag>
      </tags>
  </entry>
  <entry>
    <title>mac10.15配置latex格式化</title>
    <url>/posts/14097.html</url>
    <content><![CDATA[<p>参考这里的：<a
href="https://latexindentpl.readthedocs.io/en/latest/appendices.html">12.
Appendices — latexindent.pl 3.13.2 documentation</a></p>
<h2 id="archlinux">archlinux</h2>
<blockquote>
<p>报错参开 <code>ubuntu</code></p>
</blockquote>
<p>请安装如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S perl-file-homedir perl-yaml-tiny</span><br></pre></td></tr></table></figure>
<h2 id="ubuntu">ubuntu</h2>
<p>报错这个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Can<span class="string">&#x27;t locate YAML/Tiny.pm in @INC (you may need to install the YAML::Tiny module) </span></span><br></pre></td></tr></table></figure>
<p>按照官网的，<code>sudo cpan -i App::cpanminus</code>
这一步卡住了，这一步我是这么干的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install cpanminus</span><br></pre></td></tr></table></figure>
<p>还需要这个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> cpanm Log::Dispatch</span><br></pre></td></tr></table></figure>
<p>整体是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install perl</span><br><span class="line"><span class="built_in">sudo</span> apt install cpanminus</span><br><span class="line"><span class="built_in">sudo</span> cpanm YAML::Tiny</span><br><span class="line"><span class="built_in">sudo</span> cpanm File::HomeDir</span><br><span class="line"><span class="built_in">sudo</span> cpanm Unicode::GCString</span><br><span class="line"><span class="built_in">sudo</span> cpanm Log::Dispatch</span><br></pre></td></tr></table></figure>
<p>后三步，需要一分钟左右，慢慢等</p>
<p>可还报错，我又把latexindent更新了，方法：进入root更新latex库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line"></span><br><span class="line">tlmgr update --self</span><br><span class="line"></span><br><span class="line">tlmgr update latexindent</span><br></pre></td></tr></table></figure>
<h2 id="macos">macos</h2>
<p>mac10.15</p>
<p>vscode格式化latex时报错</p>
<p><code>Formatting failed. Please refer to LaTeX Workshop Output for details.</code></p>
<p>并且按照之前的mac系统，运行以下也不行，仍然提示缺少<code>File::HomeDir</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> cpan -i Log::Log4perl Log::Dispatch::File\ YAML::Tiny File::HomeDir Unicode::GCString</span><br></pre></td></tr></table></figure>
<p>其实是在运行<code>sudo cpan -i</code>时，提示了</p>
<p><code>fatal error: 'EXTERN.h' file not found</code></p>
<p>而且查找这个库时</p>
<p><code>sudo find /Library -type f -name EXTERN.h</code></p>
<p>可以找到这个库所在位置</p>
<ul>
<li>前提是已经安装了xcode命令行工具<code>xcode-select --install</code>输入到终端即可</li>
</ul>
<p>按理说，随便找一个路径刚才查到的路径，在终端输入即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Perl/5.28/darwin-thread-multi-2level/CORE:<span class="variable">$CPATH</span></span><br></pre></td></tr></table></figure>
<p>可是<code>File::HomeDir</code>时还是不对，提示权限错误等问题</p>
<p>注意，保持没有改变终端窗口，防止环境变量失效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> find /Library -<span class="built_in">type</span> f -name EXTERN.h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CPATH=/Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk/System/Library/Perl/5.28/darwin-thread-multi-2level/CORE:<span class="variable">$CPATH</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cpan</span><br><span class="line"></span><br><span class="line">install Mac::SystemDirectory</span><br><span class="line"></span><br><span class="line">install File::HomeDir</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解决</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/14097.html">https://yuhldr.github.io/posts/14097.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置安装gitlab</title>
    <url>/posts/21265.html</url>
    <content><![CDATA[<p>进入root用户进行操作</p>
<h2 id="安装docker">安装docker</h2>
<p>查看2020-11-09的 <code>docker配置安装nextcloud</code></p>
<h2 id="docker安装gitlab">docker安装gitlab</h2>
<h3 id="拉取gitlabc-ce">拉取gitlabc-ce</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 208:80 -p 230:22 --name gitlab --restart always -v /home/data/docker/gitlab-ce/config:/etc/gitlab -v /home/data/docker/gitlab-ce/logs:/var/log/gitlab -v /home/data/docker/gitlab-ce/data:/var/opt/gitlab gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>
<ul>
<li><p>这三个是为了把docker里 <code>gitlab</code>
的一些文件夹映射到服务器上，方便https什么的，两边文件会共享</p>
<p><code>-v /home/data/docker/gitlab-ce/config:/etc/gitlab</code></p>
<p><code>-v /home/data/docker/gitlab-ce/logs:/var/log/gitlab</code></p>
<p><code>-v /home/data/docker/gitlab-ce/data:/var/opt/gitlab</code></p></li>
<li><p>把docker里面的80和22映射到208和230，</p>
<blockquote>
<p>这个是为了防止docker里面的80和22端口已经被占用。</p>
</blockquote>
<ul>
<li><p>注意服务器的208和230对外界要公开，把防火墙端口打开，</p></li>
<li><p>80是网页的端口，22是用来ssh访问git的，注意230不要是服务器本来的ssh端口</p>
<p><code>-p 208:80 -p 230:22</code></p></li>
</ul></li>
</ul>
<h3 id="配置">配置</h3>
<p>进入docker里的gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></table></figure>
<p>编辑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>添加下面这三行就行</p>
<p><code>icpcs.lzu.edu.cn</code>是服务器的域名，208是刚才对外的网页端口，230是git的ssh免密访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">external_url <span class="string">&#x27;http://icpcs.lzu.edu.cn:208&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_ssh_host&#x27;</span>] = <span class="string">&#x27;icpcs.lzu.edu.cn&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 230</span><br></pre></td></tr></table></figure>
<p>如果要ssl的话，先自己certbot设置免费的CA证书，再添加这几个</p>
<blockquote>
<p><code>/etc/gitlab/ssl/</code>
这个是我把服务器上的CA证书复制到了刚才映射的外部文件夹<code>/home/data/docker/gitlab-ce/config/ssl/</code>，但是docker里的gitlab访问就变成了<code>/etc/gitlab/ssl/</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/fullchain.pem&quot;</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/privkey.pem&quot;</span></span><br></pre></td></tr></table></figure>
<p>更新</p>
<blockquote>
<p>注意，运行很慢，慢慢等，还有就是每次这样更新配置以后，直接访问网页可能502之类的，不用急，等会，多刷新几次就好了，不过第一次刷新也不行，看最后</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<p>如果想看看配置有没有成功，这里看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br></pre></td></tr></table></figure>
<h3 id="闭坑">闭坑</h3>
<ul>
<li><p>配置以后没反应，看这个，特坑</p>
<p>删除（<code>docker rm -f  gitlab</code>）以后再来一次，把刚才的80改成外部的的208，其他不要改</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 208:208 -p 230:22 --name gitlab --restart always -v /home/data/docker/gitlab-ce/config:/etc/gitlab -v /home/data/docker/gitlab-ce/logs:/var/log/gitlab -v /home/data/docker/gitlab-ce/data:/var/opt/gitlab gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p>
<p>记住，很慢，等会，可能好几分钟</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p>
<p>大概这样的时候就好了，注意 <code>STATUS</code> ，一开始是
<code>(healthy starting)</code>，等会，等它变成
<code>(healthy)</code>，然后多刷新几次网页就好了，记住很慢，<code>等</code>
字诀</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS                  PORTS                                                        NAMES</span><br><span class="line">a8d27b67f0d7        gitlab/gitlab-ce:latest   <span class="string">&quot;/assets/wrapper&quot;</span>        12 hours ago        Up 12 hours (healthy)   80/tcp, 443/tcp, 0.0.0.0:208-&gt;208/tcp, 0.0.0.0:230-&gt;22/tcp   gitlab</span><br></pre></td></tr></table></figure></p></li>
<li><p>配置以后特别卡、或者内存占用高</p>
<p>运行时，默认使用服务器核数+1，如果你的服务器核数特别多，就会很卡，占用内存很多</p>
<p>因为我用了的服务器56个核心，所以我限制了一下<code>4</code>个，数据库和gitlab并发数都限制了8，16，以及数据库缓存也限制了。</p>
<p>进入docker的gitlab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>编辑</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure></p>
<p>添加如下， &gt;
注意，新版的gitlab，用的是puma，nuicorn已经默认false了</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 减少内存，且防止卡</span></span><br><span class="line">puma[<span class="string">&#x27;worker_processes&#x27;</span>] = 4</span><br><span class="line">puma[<span class="string">&#x27;per_worker_max_memory_mb&#x27;</span>] = 2048</span><br><span class="line">sidekiq[<span class="string">&#x27;concurrency&#x27;</span>] = 16</span><br><span class="line">postgresql[<span class="string">&#x27;shared_buffers&#x27;</span>] = <span class="string">&quot;256MB&quot;</span></span><br><span class="line">postgresql[<span class="string">&#x27;max_worker_processes&#x27;</span>] = 8</span><br></pre></td></tr></table></figure></p>
<p>刷新配置</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<p>重启gitlab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure></p>
<p>等待几分钟以后刷新网页，否则502</p></li>
<li><p>备份</p>
<p>进入docker的gitlab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>编辑</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure></p>
<p>添加如下：3600*24*90天=7776000</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 7776000</span><br></pre></td></tr></table></figure></p>
<p>刷新配置</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>
<p>重启gitlab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure></p>
<p>等待几分钟以后刷新网页，否则502</p>
<p>退出docker，在系统中添加crontab</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份docker-gitlab</span></span><br><span class="line">* 4 * * * docker <span class="built_in">exec</span> gitlab gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>
<p>备份位置，之前外挂</p>
<p><code>-v /home/data/docker/gitlab-ce/data:/var/opt/gitlab</code></p>
<p>所以在</p>
<p><code>/home/data/docker/gitlab-ce/data/backups</code></p></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/21265.html">https://yuhldr.github.io/posts/21265.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器与SLURM的使用</title>
    <url>/posts/11567.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="38962e051ab66b4385a29eb48f35a3a3b3215a42208c864f08297179a12cd7fc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">内部文档, 点我输入密码查看，密码可以联系管理员获取。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>icpcs</tag>
      </tags>
  </entry>
  <entry>
    <title>python模拟点击实现自动登录校园网</title>
    <url>/posts/58868.html</url>
    <content><![CDATA[<h2 id="校园网自动登录">校园网自动登录</h2>
<blockquote>
<p>免责说明：类似于浏览器直接登录，无恶意代码，仅限于学习，可用于自习室长时间不关机的电脑，防止登录失效，请勿恶意使用</p>
</blockquote>
<h2 id="前提">前提:</h2>
<h3 id="安装-依赖">安装 依赖</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<h3 id="下载浏览器驱动">下载浏览器驱动</h3>
<blockquote>
<p>对照自己电脑安装的浏览器和对应的版本，下载解压后，将所在的目录添加系统的
<code>环境变量</code> 中。</p>
</blockquote>
<ul>
<li>推荐火狐浏览器驱动，其 <a
href="https://github.com/mozilla/geckodriver/releases">下载地址</a></li>
<li>谷歌浏览器驱动，其 <a
href="http://chromedriver.storage.googleapis.com/index.html">下载地址</a></li>
</ul>
<p>安装浏览器，建议火狐配火狐驱动，不用管版本问题</p>
<h2 id="配置和使用">配置和使用</h2>
<h3 id="配置自己的邮箱和账号">配置自己的邮箱和账号</h3>
<p>在这个文件中配置: <a href="./config.py">config.py</a> ###
定时任务</p>
<h4 id="方法一使用系统定时任务">方法一:使用系统定时任务</h4>
<p>我的这个项目放在了 <code>/home/yuh/gitFile</code> 下面</p>
<blockquote>
<p>linux系统中可以用cron,wsl中注意开机自启wsl的cron - 自己修改 <a
href="./authentication_new.sh">authentication_new.sh</a>
文件的目录，打开文件所在目录，然后使用python3运行</p>
</blockquote>
<p>示例如下,按照自己的路径和配置修改,我这里用的是zsh <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">python3 /home/yuh/gitFile/loginLzuNet/authentication_new.py</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">*/2 * * * * /home/yuh/gitFile/loginLzuNet/file/authentication_new.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>ps:wsl中开机cron和ssh &gt; 如果是ubuntu系统,如下:<a
href="./startubuntu.vbs">startubuntu.vbs</a> <figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> ws = WScript.<span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;wsl -d ubuntu -u root /etc/init.wsl start&quot;</span>, vbhide</span><br></pre></td></tr></table></figure> sudo chmod
777 /etc/init.wsl <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Filename: /etc/init.wsl</span></span><br><span class="line"><span class="comment"># Usage: sudo /etc/init.wsl [start|stop|restart]</span></span><br><span class="line">/etc/init.d/cron <span class="variable">$1</span></span><br><span class="line">/etc/init.d/ssh <span class="variable">$1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4
id="方法二使用pythonblockingscheduler">方法二:使用python:BlockingScheduler</h4>
<blockquote>
<p>需要<a
href="./authentication_new.py">authentication_new.py</a>程序开机自启,并且一直运行在后台
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scheduler = BlockingScheduler()</span><br><span class="line"><span class="comment"># 添加任务并设置触发方式为s</span></span><br><span class="line">scheduler.add_job(main, <span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">120</span>)  <span class="comment">#2分钟检查一次ip</span></span><br><span class="line"><span class="comment">#开始运行调度器</span></span><br><span class="line">scheduler.start()</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="注意">注意</h2>
<ol type="1">
<li>下载的驱动必须放在环境路径里</li>
<li>驱动必须有可执行权限（linux系统）</li>
<li><a href="file/authentication_new.sh">authentication_new.sh</a>、<a
href="file/init.wsl">init.wsl</a> 必须有可执行权限（linux系统）</li>
<li>wsl中,必须开机启动wsl的定时任务</li>
</ol>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/58868.html">https://yuhldr.github.io/posts/58868.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>python-selenium</tag>
        <tag>mail</tag>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>python抓包 - 斗罗大陆</title>
    <url>/posts/55231.html</url>
    <content><![CDATA[<p>导出依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install pipreqs</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure>
<p>依赖库 <a href="../data/dldl/requirements.txt">requirements.txt
点我下载</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">requests==2.22.0</span><br><span class="line">beautifulsoup4==4.9.3</span><br><span class="line">lxml==4.6.2</span><br></pre></td></tr></table></figure>
<p>安装依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>代码，<a href="./../data/dldl/dldl.py">点我下载 dldl.py
修改版</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">url_home = <span class="built_in">input</span>(<span class="string">&quot;输入微信分享链接：\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(url_home) == <span class="number">0</span>:</span><br><span class="line">    url_home = <span class="string">&quot;http://mp.weixin.qq.com/mp/homepage?__biz=MzIwMTg2NzU4Mw==&amp;hid=12&amp;sn=1cb2b9a74e73dd01951f7e67853209af&amp;scene=18#wechat_redirect&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用默认链接：&quot;</span> + url_home + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">ads = [</span><br><span class="line">    <span class="string">&quot; &quot;</span>, <span class="string">&#x27;点击上方&quot;蓝字&quot;关注唐门大小事儿实时知！&#x27;</span>, <span class="string">&quot;戳“阅读原文”火速进入下一章&quot;</span>, <span class="string">&quot;目前100000+人已关注加入我们&quot;</span>,</span><br><span class="line">    <span class="string">&quot;点下広吿再走丨助小视能量满满~&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">title = <span class="string">&quot;斗罗大陆&quot;</span></span><br><span class="line">s = session.get(url_home)</span><br><span class="line">title = BeautifulSoup(s.text, features=<span class="string">&quot;lxml&quot;</span>).select(</span><br><span class="line">    <span class="string">&#x27;body &gt; div &gt; div &gt; div &gt; h2&#x27;</span>)[<span class="number">0</span>].get_text().strip().replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(title + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">query = <span class="built_in">dict</span>(urllib.parse.parse_qsl(urllib.parse.urlsplit(url_home).query))</span><br><span class="line"></span><br><span class="line">__biz = query[<span class="string">&quot;__biz&quot;</span>]</span><br><span class="line">hid = query[<span class="string">&quot;hid&quot;</span>]</span><br><span class="line">sn = query[<span class="string">&quot;sn&quot;</span>]</span><br><span class="line">scene = query[<span class="string">&quot;scene&quot;</span>]</span><br><span class="line"></span><br><span class="line">cids = <span class="number">6</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(title + <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> cid <span class="keyword">in</span> <span class="built_in">range</span>(cids):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;__biz&quot;</span>: __biz,</span><br><span class="line">            <span class="string">&quot;hid&quot;</span>: hid,</span><br><span class="line">            <span class="string">&quot;sn&quot;</span>: sn,</span><br><span class="line">            <span class="string">&quot;scene&quot;</span>: scene,</span><br><span class="line">            <span class="string">&quot;cid&quot;</span>: cid,</span><br><span class="line">            <span class="string">&quot;begin&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;count&quot;</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: <span class="string">&quot;appmsg_list&quot;</span>,</span><br><span class="line">            <span class="string">&quot;f&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="string">&quot;r&quot;</span>: <span class="number">0.27656332194465394</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        url = <span class="string">&quot;https://mp.weixin.qq.com/mp/homepage&quot;</span></span><br><span class="line">        res = session.post(url, data=data)</span><br><span class="line">        json1 = json.loads(res.content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> zhangjie <span class="keyword">in</span> json1[<span class="string">&quot;appmsg_list&quot;</span>]:</span><br><span class="line">            chapter = zhangjie[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">            content = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                words = BeautifulSoup(session.get(zhangjie[<span class="string">&quot;link&quot;</span>]).text,</span><br><span class="line">                                      features=<span class="string">&quot;lxml&quot;</span>).select(</span><br><span class="line">                                          <span class="string">&quot;#js_content&quot;</span>)[<span class="number">0</span>].get_text().strip()</span><br><span class="line">                <span class="comment"># content = content + soup0.select(&quot;#js_content&quot;)[0].get_text(</span></span><br><span class="line">                <span class="comment"># ).replace(&#x27;点击上方&quot;蓝字&quot;关注唐门大小事儿实时知！&#x27;, &quot;&quot;).replace(&quot;   &quot;, &quot;。\n\n&quot;)</span></span><br><span class="line">                <span class="keyword">for</span> ad <span class="keyword">in</span> ads:</span><br><span class="line">                    words = words.replace(ad, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">                n = <span class="number">0</span></span><br><span class="line">                word_n = <span class="built_in">len</span>(words)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 是不是一句话</span></span><br><span class="line">                one = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(word_n):</span><br><span class="line">                    word = words[i]</span><br><span class="line">                    content += word</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (word == <span class="string">&quot;“&quot;</span>):</span><br><span class="line">                        one = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">elif</span> (word == <span class="string">&quot;”&quot;</span>):</span><br><span class="line">                        one = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (word == <span class="string">&quot;。&quot;</span> <span class="keyword">and</span> ((n &gt; <span class="number">200</span> <span class="keyword">and</span> <span class="keyword">not</span> one) <span class="keyword">or</span> (n &gt; <span class="number">500</span>))):</span><br><span class="line">                        content += <span class="string">&quot;\n\n&quot;</span></span><br><span class="line">                        n = <span class="number">0</span></span><br><span class="line">                        one = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                    n += <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(chapter + <span class="string">&quot;：\n        &quot;</span> +</span><br><span class="line">                      content.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).strip()[<span class="number">0</span>:<span class="number">50</span>] + <span class="string">&quot;……\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                content = <span class="string">&quot;本章节抓取错误，无内容&quot;</span></span><br><span class="line">                <span class="built_in">print</span>(chapter + <span class="string">&quot;：\n        &quot;</span> + content)</span><br><span class="line"></span><br><span class="line">            file.write(chapter + <span class="string">&quot;\n\n&quot;</span> + content + <span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/55231.html">https://yuhldr.github.io/posts/55231.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>终端代理设置</title>
    <url>/posts/46614.html</url>
    <content><![CDATA[<p>先安装代理，代理用的clash，windows用clash for
windows，mac建议clash</p>
<p>访问github加速代理，点 <a
href="https://socloud.me/auth/register?code=QrJi">这里，网速很不错，里面有更详细的初级使用教程</a></p>
<blockquote>
<p>wsl2和mac里面我用的都是 <code>oh-my-zhs</code>，在
<code>~/.zshrc</code>
后面添加，如果使用终端还不懂环境变量就不要往下看了，先百度各个系统的环境变量怎么设置</p>
</blockquote>
<h2 id="windows">windows</h2>
<p>v2rayn导致wsl2下的vscode无法预览markdown</p>
<p>并且代理会导致微软应用市场无法联网，clash for
windows解决了这个问题，打开面板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">General - UWP Loopback</span><br></pre></td></tr></table></figure>
<p>选中微软市场，保存即可</p>
<h2 id="powershell终端">powershell终端</h2>
<p>系统变量添加两个</p>
<p>名字：http_proxy、参数：http://127.0.0.1:7890
名字：https_proxy、参数：http://127.0.0.1:7890</p>
<h3 id="wsl2终端">wsl2终端</h3>
<p>wsl2设置代理以后必须设置 允许局域网的连接</p>
<p>打开面板 General - Allow LAN</p>
<p>设置环境变量</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="comment"># 获取主机 IP  保存在 /etc/resolv.conf 中</span></span><br><span class="line"><span class="built_in">export</span> hostip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep -oP <span class="string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">&quot;http://<span class="variable">$&#123;hostip&#125;</span>:7890&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已开启代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></table></figure>
<h2 id="ubuntu">ubuntu</h2>
<p>配置可以参考 <a href="./30877.html#配置clash代理">这个博客</a></p>
<figure>
<img src="../images/2021/clash_ubuntu2004.png"
alt="clash ubuntu2004.3系统代理设置" />
<figcaption aria-hidden="true">clash
ubuntu2004.3系统代理设置</figcaption>
</figure>
<blockquote>
<p>注意的是，有时候chrome还是没法访问外网（但是 <code>firefox</code>
可以），可以这样修改，但是更新chrome有一定几率失效，需要重新修改</p>
</blockquote>
<p>可以在 <code>chrome</code> 里打开 链接：<a
href="chrome://linux-proxy-config/">chrome://linux-proxy-config/</a>，会提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在受支持的桌面环境中运行Google Chrome时，将使用系统代理设置。但您的系统不受支持，或启动系统配置时出现问题。</span><br></pre></td></tr></table></figure>
<p><code>google</code> 这个提示，有很多相关处理方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /usr/share/applications/google-chrome.desktop</span><br></pre></td></tr></table></figure>
<p>当前版本是第108行，<code>:108</code> 跳转，这个最关键
<code>--proxy-server="socks5://127.0.0.1:7891" --user-data-dir</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exec=/usr/bin/google-chrome-stable --proxy-server=<span class="string">&quot;socks5://127.0.0.1:7891&quot;</span> --user-data-dir %U</span><br></pre></td></tr></table></figure>
<p>注意通知栏完全退出 <code>chrome</code>，重新打开即可生效，有可能需要
<code>Alt F2</code> 重新加载页面</p>
<h2 id="mac">mac</h2>
<p>代理用的clash、设置环境变量</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代理vpn</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">&quot;localhost,127.0.0.1,localaddress,.localdomain.com&quot;</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已开启代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;已关闭代理&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_on</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/46614.html">https://yuhldr.github.io/posts/46614.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>windows</tag>
        <tag>clash</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal美化配置</title>
    <url>/posts/7737.html</url>
    <content><![CDATA[<p>微软应用市场里直接安装就行，我是用的[scoop安装配置]，在归档里找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scoop install windows-terminal</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最新版1.8中，点击设置，是图形界面，想找到json数据，点左下角<code>打开JSON文件</code>。</p>
</blockquote>
<h2 id="默认打开">默认打开</h2>
<p>打开WSL的某一个还是windows</p>
<p>修改 <code>defaultProfile</code>，修改为 <code>profiles - list</code>
中其中一个的 <code>guid</code>（需要哪个用哪个，根据 <code>name</code>
判断）</p>
<h2 id="安装字体">安装字体</h2>
<p>在这里下载：<a
href="https://github.com/microsoft/cascadia-code">cascadia-code</a>，<code>releases</code>
里下载，解压以后双击安装 <code>ttf/CascadiaCode.ttf</code> 这个文件</p>
<p>windows-terminal右上角设置</p>
<h2 id="颜色主题">颜色主题</h2>
<p>颜色主题到这里找 <a
href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">iTerm2-Color-Schemes</a>，随便点开一个自己熟悉的
<code>.json</code> 文件，类似下面的内容，复制，然后在
<code>schemes</code> 上括号下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Monokai Soda&quot;</span>,</span><br><span class="line">    <span class="string">&quot;black&quot;</span>: <span class="string">&quot;#1a1a1a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;red&quot;</span>: <span class="string">&quot;#f4005f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;green&quot;</span>: <span class="string">&quot;#98e024&quot;</span>,</span><br><span class="line">    <span class="string">&quot;yellow&quot;</span>: <span class="string">&quot;#fa8419&quot;</span>,</span><br><span class="line">    <span class="string">&quot;blue&quot;</span>: <span class="string">&quot;#9d65ff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;purple&quot;</span>: <span class="string">&quot;#f4005f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cyan&quot;</span>: <span class="string">&quot;#58d1eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;white&quot;</span>: <span class="string">&quot;#c4c5b5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightBlack&quot;</span>: <span class="string">&quot;#625e4c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightRed&quot;</span>: <span class="string">&quot;#f4005f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightGreen&quot;</span>: <span class="string">&quot;#98e024&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightYellow&quot;</span>: <span class="string">&quot;#e0d561&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightBlue&quot;</span>: <span class="string">&quot;#9d65ff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightPurple&quot;</span>: <span class="string">&quot;#f4005f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightCyan&quot;</span>: <span class="string">&quot;#58d1eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brightWhite&quot;</span>: <span class="string">&quot;#f6f6ef&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;#1a1a1a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;foreground&quot;</span>: <span class="string">&quot;#c4c5b5&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="相关配置">相关配置</h2>
<p>在 <code>defaults</code> 上括号下面添加</p>
<ul>
<li>注意字体：<code>fontFace</code></li>
<li>注意图片地址：<code>backgroundImage</code></li>
<li>注意：<code>colorScheme</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;fontFace&quot;</span>: <span class="string">&quot;Cascadia Code&quot;</span>, // 字体</span><br><span class="line"><span class="string">&quot;fontSize&quot;</span>: 12, // 字号</span><br><span class="line"><span class="string">&quot;acrylicOpacity&quot;</span>: 0.6, // 透明度</span><br><span class="line"><span class="string">&quot;colorScheme&quot;</span>: <span class="string">&quot;Monokai Soda&quot;</span>, //颜色主题名称, 就是schemes下面的每个实例的 name 值</span><br><span class="line"><span class="string">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;cursorColor&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>, //光标颜色</span><br><span class="line"><span class="string">&quot;cursorShape&quot;</span>: <span class="string">&quot;emptyBox&quot;</span>, //光标类型  可选 bar | vintage | underscore | filledBox | emptyBox</span><br><span class="line"><span class="string">&quot;historySize&quot;</span>: 9999999,</span><br><span class="line"><span class="string">&quot;backgroundImage&quot;</span>: <span class="string">&quot;D:\\Users\\yuh\\scoop\\apps\\windows-terminal\\current\\Images\\img3.jpg&quot;</span>, //配置背景图片地址</span><br><span class="line"><span class="string">&quot;backgroundImageOpacity&quot;</span>: 0.25, //背景图片的透明度</span><br><span class="line"><span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0, 0, 0, 0&quot;</span>,</span><br><span class="line"><span class="string">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">//默认打开文件夹，如果是linux系统，可以设置为 <span class="string">&quot;//wsl$/Ubuntu-20.04/home/yuh&quot;</span>,</span><br><span class="line"><span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;%USERPROFILE%&quot;</span>,</span><br><span class="line"><span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">false</span>, //是否开启毛玻璃特效，值为<span class="literal">false</span>的时候就没有毛玻璃特效</span><br><span class="line"><span class="string">&quot;tabTitle&quot;</span>: <span class="string">&quot;chessYu&quot;</span> //标签名称</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><a href="https://juejin.cn/post/6844904116322304014">Windows
Terminal美化界面</a></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/7737.html">https://yuhldr.github.io/posts/7737.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>windows包管理scoop配置使用</title>
    <url>/posts/40358.html</url>
    <content><![CDATA[<h2 id="windows10可能禁止脚本运行">windows10可能禁止脚本运行</h2>
<p>打开终端，提示 “无法加载文件C:.ps1，因为在此系统上禁止运行脚本”
的错误...</p>
<ul>
<li><code>管理员权限</code> 打开PowerShell</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>
<h2 id="下载scoop">下载scoop</h2>
<p>一会git用scoop下载，所以现在直接下载这个开源库。</p>
<p>在这里下载：<a
href="https://github.com/lukesampson/scoop">scoop</a>的zip文件，解压到一个目录，以后安装的软件都在这个目录，所以不建议在C盘，不要中文路径</p>
<h2 id="环境变量">环境变量</h2>
<ul>
<li><p>windows10设置里，搜索 <code>环境变量</code>，选择
<code>编辑系统环境变量</code>，</p>
<figure>
<img src="/images/2020-11-28-12-00-55.png" alt="环境变量" />
<figcaption aria-hidden="true">环境变量</figcaption>
</figure></li>
<li><p>选择右下角<code>环境变量</code>，</p>
<figure>
<img src="/images/2020-11-28-12-01-23.png" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure></li>
<li><p>选择 下面系统环境变量里的Path</p>
<figure>
<img src="/images/2020-11-28-12-02-19.png" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure></li>
<li><p>使用浏览</p>
<figure>
<img src="/images/2020-11-28-12-04-07.png" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure></li>
<li><p>选择安装目录的 <code>skims</code></p>
<figure>
<img src="/images/2020-11-28-12-05-24.png" alt="图" />
<figcaption aria-hidden="true">图</figcaption>
</figure></li>
</ul>
<h2 id="修改两个路径">修改两个路径</h2>
<p>我的scoop放在了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[environment]::setEnvironmentVariable(<span class="string">&#x27;SCOOP_GLOBAL&#x27;</span>,<span class="string">&#x27;D:\Users\yuh\scoop&#x27;</span>,<span class="string">&#x27;Machine&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="variable">$env</span>:SCOOP_GLOBAL=<span class="string">&#x27;D:\Users\yuh\scoop&#x27;</span></span><br><span class="line"></span><br><span class="line">[environment]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="string">&#x27;D:\Users\yuh\scoop&#x27;</span>,<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$env</span>:SCOOP=<span class="string">&#x27;D:\Users\yuh\scoop&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="初步使用">初步使用</h2>
<ul>
<li><p>添加更多软件源</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scoop bucket add 源的名字</span><br></pre></td></tr></table></figure></p></li>
<li><p>查看安装了哪些</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scoop bucket list</span><br></pre></td></tr></table></figure></p></li>
<li><p>我安装了这些</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dodorz</span><br><span class="line">dorado</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">extras</span><br><span class="line">java</span><br><span class="line">jetbrains</span><br><span class="line">main</span><br><span class="line">scoopbucket</span><br><span class="line">scoopet</span><br><span class="line">versions</span><br></pre></td></tr></table></figure></p></li>
</ul>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/40358.html">https://yuhldr.github.io/posts/40358.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>scoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统源码编译安装LAMMPS</title>
    <url>/posts/320.html</url>
    <content><![CDATA[<p>貌似可以apt安装，但是不建议，因为自己一般用的包很少，而且movie这些命令需要一些依赖，GPU、Python配置也需要</p>
<p>编译安装的源码在这里，也可以看 <a
href="https://docs.lammps.org/Build_cmake.html">官网安装</a>，<a
href="https://docs.lammps.org/Build_extras.html#gpu">GPU加速</a>，<a
href="https://docs.lammps.org/Python_install.html">python接口</a></p>
<p>官网很详细，也可以去github提问，作者回复很不错</p>
<h2 id="源码编译安装">源码编译安装</h2>
<p>如果不知道git，百度</p>
<blockquote>
<p>github很慢，建议第二个；其实我最建议的是直接在 <a
href="https://github.com/lammps/lammps/releases">github-release</a>
下载稳定版，注意不要预览版（<code>Pre-release</code>），一般 100多M</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lammps/lammps.git</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/yuhldr/lammps.git</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0 防止污染</span></span><br><span class="line"><span class="built_in">cd</span> lammps &amp;&amp; <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 检测系统有哪些库，比如视频支持、openmpi支持</span></span><br><span class="line"><span class="comment"># 注意安装路径： /opt/LAMMPS/apps，这里权限放好</span></span><br><span class="line">cmake -D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on -D PKG_MANYBODY=on -D PKG_PHONON=on ../cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=<span class="string">&quot;/opt/LAMMPS/apps&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 编译，留一个cpu核心，防止卡</span></span><br><span class="line">cmake --build . -j $(($(nproc) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2022以后更新了，必须这么编译python库，这一步以后，会被安装在 ~/.local/lib，make install 以后，会按照 CMAKE_INSTALL_PREFIX 的路径重新安装</span></span><br><span class="line">make install-python -j $(($(nproc) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>因为安装在 <code>/opt/LAMMPS/apps</code>，所以要配置
<code>lammps</code> 的 <code>python库</code> 和 <code>c语言库</code>
对应的路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ************** LAMMPS **************</span></span><br><span class="line"><span class="built_in">export</span> LAMMPS_HOME=/opt/LAMMPS/apps</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$LAMMPS_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib64:<span class="variable">$LIBRARY_PATH</span></span><br><span class="line"><span class="comment"># 不同python版本不一样，直接去看 LAMMPS_HOME 下面有谁</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$LAMMPS_HOME</span>/lib/python3.10/site-packages:<span class="variable">$PYTHONPATH</span> </span><br><span class="line"><span class="comment"># ************************************</span></span><br></pre></td></tr></table></figure>
<p>安装以后使用 <code>lmp</code> 就可以运行lammps了</p>
<h2 id="采坑">采坑</h2>
<p>比如并行、视频输出、安装目录、python库、GPU支持等</p>
<h3 id="git与cmake">git与cmake</h3>
<p>如果没有git，安装一个吧，我这里都以ubuntu20.04、root权限为例，其他系统或者没有root权限，百度吧，网上很多源码编译安装到当前用户的方法，或者联系管理员让他们给你安装
<code>git</code> <code>cmake3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git cmake3</span><br></pre></td></tr></table></figure>
<h3 id="找不到lmp">找不到lmp</h3>
<p>默认安装在
<code>~/.local/bin/lmp</code>，如果你没有设置这个目录在环境变量里，会找不到，所以添加环境变量</p>
<p>如果你用的是 <code>zsh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>如果你用的是bash（一般都是这个）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="视频输出">视频输出</h3>
<p>在 <code>检测</code> 这一步，如果系统没有 <code>ffmpeg</code>，
编译出来的lammps使用 <code>dump movie</code> 时，会报错</p>
<p>我这里是ubuntu系统，需要依赖：多核并行、输出视频，已知问题，opensuse默认安装的ffmpeg不行，需要手动编译源码安，具体怎么安装，百度吧</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ffmpeg gzip</span><br></pre></td></tr></table></figure>
<p>回到刚才的 <code>build</code>
文件夹，删除里面的编译缓存文件，然后重新编译安装lammps</p>
<h3 id="slurm与mpi并行">slurm与mpi并行</h3>
<p>如果你在使用slurm集群，并且你碰巧编译lammps时，支持了openmpi，但是你这个openmpi与slurm集群的
<code>mpi</code> 不符合，这时候会报错的，一种方法，直接不用并行了</p>
<h4 id="舍弃mpi">舍弃mpi</h4>
<p>回到刚才的 <code>build</code>
文件夹，删除里面的编译缓存文件，然后重新编译安装lammps，但是刚才的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -D PKG_MANYBODY=<span class="built_in">yes</span> ../cmake</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">cmake -D PKG_MANYBODY=<span class="built_in">yes</span> -D BUILD_OMP=no -D BUILD_MPI=no  ../cmake</span><br></pre></td></tr></table></figure>
<p>其他不变</p>
<h4 id="支持mpi">支持mpi</h4>
<blockquote>
<p>如果在 <code>slurm</code> 集群上运行，必须保证编译
<code>lampps</code> 时 <code>openmpi</code> 与 <code>slurm</code>
集群支持的 <code>mpi</code> 一致，先查看 <code>slurm</code>
集群支持什么</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srun --mpi=list</span><br></pre></td></tr></table></figure>
<p>一般如下，主要注意有没有pmix，如果 <code>slurm</code>
太过久远或者管理员技术不够的话，没有 <code>pmix</code> 的选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srun: MPI types are...</span><br><span class="line">srun: pmix</span><br><span class="line">srun: pmix_v3</span><br><span class="line">srun: cray_shasta</span><br><span class="line">srun: none</span><br><span class="line">srun: pmi2</span><br></pre></td></tr></table></figure>
<p>如果集群管理员技术还可以，支持 <code>pmix_v3</code>
的话，系统里是有对应的 <code>openmpi</code> 的，输入
<code>ompi_info</code> 可以看到 <code>openmpi</code>
相关信息，其中有一条 <code>MPI API</code> 必须与 <code>slurm</code>
的对应</p>
<p>如果连 <code>pmix</code>
的选项都没有的话，你让管理员去看一下这个文章：<a
href="./bfa79f01.html">slurm集群安装与踩坑详解</a>，安装合适的
<code>slurm</code> 和 <code>openmpi</code></p>
<p>如果只是没有合适的
<code>openmpi</code>，自己按照那个博客编译一个合适的
<code>openmpi</code> 也行</p>
<p>如果 <code>openmpi</code> 已经合适了，删除 <code>build</code>
文件夹，重新编译即可</p>
<h3 id="环境变量">环境变量</h3>
<p>配置路径，没这个有时会报错，尤其是支持 <code>python</code> 和
<code>GPU</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你没有用zsh，编辑这个文件</span></span><br><span class="line">vim ~./bashrc</span><br></pre></td></tr></table></figure>
<p>末尾添加如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$HOME</span>/.local/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>
<p>并且默认安装路径的时候，在 <code>~/.local/etc/profile.d/</code>
有两个 <code>lammps.sh</code> <code>lammps.csh</code>全局的话一般放在
<code>/etc/profile.d</code></p>
<h2 id="高级">高级</h2>
<h3 id="安装路径">安装路径</h3>
<p>在 <code>cmake -D PKG_MANYBODY=yes ../cmake</code>
这一步，会显示其中一条信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Install path:     ~/.local</span><br></pre></td></tr></table></figure>
<p>我们把在这一步改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-D CMAKE_INSTALL_PREFIX=/usr/local/lammps-2021-12-26</span><br></pre></td></tr></table></figure>
<p>可以安装在
<code>/usr/local/lammps-2021-12-26</code>，既可以避免文件污染，也方便知道版本信息</p>
<p>安装以后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">ln</span> -s lammps-2021-12-26 lammps &amp;&amp; <span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure>
<p>设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LAMMPS_HOME=/usr/local/lammps</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$LAMMPS_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LAMMPS_HOME</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="comment"># 不同python版本不一样，直接去看 LAMMPS_HOME 下面有谁</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$LAMMPS_HOME</span>/lib/python3.10/site-packages:<span class="variable">$PYTHONPATH</span> </span><br></pre></td></tr></table></figure>
<h3 id="python">python</h3>
<p>ubuntu2004需要依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-pip</span><br></pre></td></tr></table></figure>
<p>如果需要python接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on</span><br></pre></td></tr></table></figure>
<p><code>make install</code> 之前</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2022以后更新了，必须这么编译python库</span></span><br><span class="line">make install-python -j $(($(nproc) - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<h3 id="gpu">gpu</h3>
<p>GPU需要这个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-D PKG_GPU=on -D GPU_API=cuda</span><br></pre></td></tr></table></figure>
<h3 id="计算终止恢复">计算终止恢复</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-D PKG_MPIIO=on</span><br></pre></td></tr></table></figure>
<h3 id="声子色散关系">声子色散关系</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-D PKG_PHONON=on -D PKG_KSPACE=on</span><br></pre></td></tr></table></figure>
<p>需要 <code>fftw3</code>，其他系统也一样，注意 <code>dev</code>
那一个，有的叫 <code>devel</code>，很多系统喜欢给他们分开打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install fftw3 libfftw3-dev libfftw3-bin -y</span><br></pre></td></tr></table></figure>
<p>如果报错，换一下源 <a
href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华源</a>，注意版本号，我的是ubuntu21.10</p>
<p>以上全部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake  -D PKG_MANYBODY=<span class="built_in">yes</span> -D CMAKE_INSTALL_PREFIX=/usr/local/apps/lammps/2022.03.06 -D BUILD_SHARED_LIBS=on -D LAMMPS_EXCEPTIONS=on -D PKG_GPU=on -D GPU_API=cuda -D PKG_MPIIO=on -D PKG_PHONON=on -D PKG_KSPACE=on ../cmake/</span><br></pre></td></tr></table></figure>
<h3 id="手册">手册</h3>
<blockquote>
<p>方法过时了，新的我还没看</p>
</blockquote>
<p>编译pdf手册</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照前文配置texlive， 并安装如下依赖</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install python-virtualenv git doxygen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入源码doc目录</span></span><br><span class="line"><span class="built_in">cd</span> lammps/doc</span><br><span class="line">make pdf</span><br></pre></td></tr></table></figure>
<h2 id="其他系统说明">其他系统说明</h2>
<h3 id="fedora">fedora</h3>
<blockquote>
<p>2023.5 最新版</p>
</blockquote>
<h4 id="ffmpeg">ffmpeg</h4>
<p>安装 <code>ffmpeg</code> 时，这个发行版的名字是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf install ffmpeg-free-devel ffmpeg-free</span><br></pre></td></tr></table></figure>
<h4 id="openmpi">openmpi</h4>
<p>安装 <code>openmpi</code> 时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf install openmpi openmpi-devel</span><br></pre></td></tr></table></figure>
<p>！！注意，安装以后，编译或者运行时，比如载入openmpi环境，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module load mpi/openmpi-x86_64</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/320.html">https://yuhldr.github.io/posts/320.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>物理</category>
      </categories>
      <tags>
        <tag>源码安装</tag>
        <tag>lammps</tag>
        <tag>cmake</tag>
        <tag>gpu</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2安装配置</title>
    <url>/posts/58249.html</url>
    <content><![CDATA[<h2 id="安装启用wsl2">安装启用WSL2</h2>
<p>官网写的很详细，<a
href="https://docs.microsoft.com/zh-cn/windows/wsl/install">可以去看看，中文的</a>，旧版电脑看
<a
href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">这里</a>，注意看官网右侧目录，他们更新的比加快，网址不一定完全准确</p>
<h3 id="新版windows10系统">新版windows10系统</h3>
<p>新版电脑（必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041
及更高版本）或 Windows 11。）最好一句话安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure>
<p>这个会默认wsl2</p>
<h3 id="旧版windows10系统">旧版windows10系统</h3>
<blockquote>
<p>无论新旧，都可以按照下面来</p>
</blockquote>
<ol type="1">
<li><p>确保电脑最新版</p>
<p>version 1903 or higher, with Build 18362 or higher.</p></li>
<li><p>启用虚拟机平台和 Linux 子系统功能</p>
<ul>
<li><p>以 <code>管理员</code> 权限启动
PowerShell，然后输入以下命令启用虚拟机平台：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure></p></li>
<li><p>以管理员权限启动 PowerShell，然后输入以下命令启用 Linux
子系统功能：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></p></li>
</ul></li>
<li><p>安装linux内核 &gt; 可能要重启电脑</p>
<p><a
href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">点我下载：WSL2
Linux kernel update package for x64 machines</a></p></li>
<li><p>设置WSL2</p>
<blockquote>
<p>注意，必须先设置版本 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>查看版本</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure></p></li>
<li><p>下载安装</p>
<p>在自带的应用商店下载，搜索ubuntu，点击安装即可</p></li>
</ol>
<h3 id="启动与报错">启动与报错</h3>
<p>设置用户名和密码</p>
<p>可能会遇到各种报错，比如boot没有开启虚拟机、比如C盘太小，文件被压缩了，等等，根据错误码，去看<a
href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting">官网，中文的</a>，官网更新的比较快，注意右侧目录</p>
<h2 id="配置oh-my-zsh">配置oh-my-zsh</h2>
<blockquote>
<p>不要再用bash了……，安装 <code>zsh</code> 和 <code>oh-my-zsh</code></p>
</blockquote>
<p><a href="./fa905576.html">看这里</a></p>
<h2 id="换源">换源</h2>
<p>有时候源有些问题，先更新再换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update &amp;&amp; <span class="built_in">sudo</span> apt-get upgrade -y</span><br></pre></td></tr></table></figure>
<ul>
<li><p>备份</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup</span><br></pre></td></tr></table></figure></p></li>
<li><p>删除之前的内容，修改为以下内容</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.lzu.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure></p></li>
<li><p>更新</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update &amp;&amp; <span class="built_in">sudo</span> apt-get upgrade -y</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="配置ssh可选">配置ssh（可选）</h2>
<p>需要远程登录wsl的话，可以配置</p>
<ul>
<li><p>卸载重装</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt remove openssh-client openssh-server &amp;&amp; <span class="built_in">sudo</span> apt install openssh-client openssh-server</span><br></pre></td></tr></table></figure></p></li>
<li><p>备份原始的 <code>sshd_config</code> 和
<code>ssh_config</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/ssh/sshd_config /etc/ssh/sshd_config.bak &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/ssh/ssh_config /etc/ssh/ssh_config.bak</span><br></pre></td></tr></table></figure></p></li>
<li><p>编辑 <code>sshd_config</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Port 3008</span><br><span class="line">PermitRootLogin no           <span class="comment"># 如果你需要用 root 直接登录系统则此处改为 yes</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span>    <span class="comment"># 将 no 改为 yes 表示使用帐号密码方式登录</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>启动 <code>ssh</code>，查看 <code>status</code>，注意这里不能用
<code>systemctl</code></p>
<blockquote>
<p>启动SSH服务</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service ssh start</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>检查状态</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service ssh status</span><br></pre></td></tr></table></figure></p></li>
<li><p>对于wsl2</p>
<blockquote>
<p>注意！！！wsl2与windows10的ip不完全一样，<a
href="https://docs.microsoft.com/zh-cn/windows/wsl/networking">官网看这里：概念-网络注意事项</a></p>
</blockquote>
<p>在wsl2里面运行，安装net-tools并显示ip，eth0:那一个ip</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install net-tools -y &amp;&amp; ifconfig</span><br></pre></td></tr></table></figure></p>
<p>在windows的powershell（管理员权限）里面监听并转发端口</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=3008 listenaddress=0.0.0.0 connectport=3008 connectaddress=这里是wsl2的ip</span><br></pre></td></tr></table></figure></p>
<p>如果需要：</p>
<blockquote>
<p>查看这些转发端口</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>删除这些转发端口</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=3008  listenaddress=0.0.0.0</span><br></pre></td></tr></table></figure></p></li>
<li><p>防火墙</p>
<p>有些版本电脑在运行ubuntu的ssh以后，可以直接弹出提示，允许即可，有些需要新建防火墙端口规则，安装火绒等管家，windows10安全中心无法点击，请到
<code>控制面板\系统和安全\Windows Defender 防火墙</code>，左侧<code>高级设置</code>，<code>入站规则</code>，端口设置其余默认即可</p></li>
</ul>
<h2 id="开机自启ssh-和-cron">开机自启：ssh 和 cron</h2>
<blockquote>
<p>可选，只是方便而已</p>
</blockquote>
<ul>
<li><p>wsl中添加脚本</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/init.wsl</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Filename: /etc/init.wsl</span></span><br><span class="line"><span class="comment"># Usage: sudo /etc/init.wsl [start|stop|restart]</span></span><br><span class="line">/etc/init.d/cron <span class="variable">$1</span></span><br><span class="line">/etc/init.d/ssh <span class="variable">$1</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意可执行权限</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> 777 /etc/init.wsl</span><br></pre></td></tr></table></figure></p></li>
<li><p>windows开机启动</p>
<blockquote>
<p>进入自启目录（ctrl R）</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell:startup</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>新建文件startubuntu.vbs</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set ws = CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;wsl -d ubuntu  -u root /etc/init.wsl start&quot;</span>, vbhide</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="防止windows环境变量污染">防止windows环境变量污染</h2>
<ul>
<li><p>wsl中添加脚本</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/wsl.conf</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不加载Windows中的PATH内容</span></span><br><span class="line">[interop]</span><br><span class="line">appendWindowsPath = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动挂载Windows系统所有磁盘分区，默认就是true</span></span><br><span class="line">[automount]</span><br><span class="line">enabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="定时任务">定时任务</h2>
<blockquote>
<p>cron已经在前面的开机自启中自启</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/2 * * * * . /root/.zshrc;/root/admin/loginLzuNet/file/authentication_new.sh</span><br></pre></td></tr></table></figure>
<p><code>. /root/.zshrc;</code>
添加环境变量，尤其是root里面，如果是普通用户，修改对应目录
<code>. /home/用户名/.zshrc;</code></p>
<p>上面这样设置环境变量，有些电脑上好像不对，可以如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/2 * * * * /root/admin/loginLzuNet/file/authentication_new.sh</span><br></pre></td></tr></table></figure>
<p>注意着脚本，777权限，以及<code>/bin/zsh</code>，并且环境变量放在这个脚本里
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"><span class="built_in">source</span> /root/.zshrc</span><br><span class="line">/opt/anaconda3/bin/python /root/admin/loginLzuNet/authentication_new.py</span><br></pre></td></tr></table></figure></p>
<h2 id="vscode">Vscode</h2>
<p>使用vscode访问wsl吧，扩展搜索 <code>wsl</code> 即可，看 <a
href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-vscode">官网这里</a>，官网网址可能变，注意官网右侧目录，在
<code>教程-vscode入门</code></p>
<h2 id="gpu加速">GPU加速</h2>
<h3 id="cuda">cuda</h3>
<p>常用的的cuda是不支持wsl的，需要去官网下载特定的，并且注意cuda，并且windows需要最新版，以前是内测版</p>
<p>最近cuda官网更新了，不需要特定的cuda了，看 <a
href="https://developer.nvidia.com/cuda-downloads">这里</a></p>
<figure>
<img src="./../images/2021/cuda-wsl2.png" alt="cuda wsl2" />
<figcaption aria-hidden="true">cuda wsl2</figcaption>
</figure>
<p>用如图选的那个，网络的安装的，因为这个方便更新，平时
<code>apt update</code> 时会随着更新</p>
<p>最下面那些命令，依次输入到wsl2的终端运行就可以了</p>
<p>进一步的环境变量和安装测试，<a
href="./30877.html#安装ubuntu后">参考ubuntu的</a></p>
<h3 id="cudnn">cudnn</h3>
<p>tensorflow还需要这个，这个也可以直接下载，下载 <code>deb</code> <a
href="https://developer.nvidia.com/rdp/cudnn-download">安装包的那个，点我：cuDNN
Runtime Library for Ubuntu20.04 x86_64 (Deb)</a>（需要登录），然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install *.deb</span><br></pre></td></tr></table></figure>
<p>千万不要用网上说的复制的那种，很麻烦，如果你用ubuntu18.04（还是用20.04吧），deb包下载对应18.04的</p>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/58249.html">https://yuhldr.github.io/posts/58249.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>wsl</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置安装nextcloud</title>
    <url>/posts/26277.html</url>
    <content><![CDATA[<p>进入root用户进行操作</p>
<h2 id="docker安装配置">docker安装配置</h2>
<ul>
<li><p>centos7系统，先安装docker</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker -y</span><br></pre></td></tr></table></figure></p></li>
<li><p>开启docker、开机自启</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></p></li>
<li><p>修改docker路径</p>
<blockquote>
<p>尽量把docker放置在其他目录，这样就不用修改nextcloud的目录了，这里使用软连接
如果你开启了docker，停止它</p>
</blockquote>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure></p>
<p>如果你准备把docker放在/home/data</p>
<p>将默认路径的文件移动到这里</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /var/lib/docker/ /home/data</span><br></pre></td></tr></table></figure></p>
<p>然后创建软链接</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /home/data/docker /var/lib/docker</span><br></pre></td></tr></table></figure></p>
<p>开启</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></p>
<p>查看</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="docker初步使用">docker初步使用</h2>
<ul>
<li><p>查看docker安装了那些软件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p></li>
<li><p>全部配置完成以后大概这样</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID  IMAGE                COMMAND                 CREATED      STATUS       PORTS                               NAMES</span><br><span class="line">62f9f2f1d55a  nextcloud            <span class="string">&quot;/entrypoint.sh ap...&quot;</span>  3 weeks ago  Up 2 weeks   0.0.0.0:80-&gt;80/tcp                  nextcloud</span><br><span class="line">ec43a5255a01  mysql                <span class="string">&quot;docker-entrypoint...&quot;</span>  3 weeks ago  Up 3 weeks   33060/tcp, 0.0.0.0:33306-&gt;3306/tcp  nextcloud_db</span><br><span class="line">f65c0ab8e2ba  portainer/portainer  <span class="string">&quot;/portainer&quot;</span>            3 weeks ago  Up 3 weeks   0.0.0.0:9000-&gt;9000/tcp              prtainer</span><br></pre></td></tr></table></figure></p></li>
<li><p>强制删除某个coker软件（即使它在运行）</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f 这里是CONTAINER ID 或者 NAMES</span><br></pre></td></tr></table></figure></p></li>
<li><p>开始某个coker软件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 这里是CONTAINER ID 或者 NAMES</span><br></pre></td></tr></table></figure></p></li>
<li><p>停止某个docker软件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 这里是CONTAINER ID 或者 NAMES</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="可视化">可视化</h3>
<p>其实都可以用 <code>portainer</code> 完成以上操作</p>
<p>目前数据 <code>/data</code> 连接到
<code>/home/data/docker_apps/portainer</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /home/data/docker_apps/portainer:/data portainer/portainer-ce</span><br></pre></td></tr></table></figure>
<p>更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop portainer &amp;&amp; docker <span class="built_in">rm</span> portainer &amp;&amp; docker pull portainer/portainer-ce</span><br></pre></td></tr></table></figure>
<p>然后运行上面的，重新创建</p>
<p>浏览器打开 <a href="http://localhost:9000%5D">localhost:9000</a></p>
<h2 id="依赖">依赖</h2>
<p>需要 <code>mysql</code> <code>redis</code></p>
<h3 id="docker安装mysql">docker安装mysql</h3>
<blockquote>
<p>mysql密码12345678，端口3306，这个只是在服务器上或者端口转发时可以访问，不要对外公开，外部文件夹
<code>/home/data/docker_apps/mysql</code>，防止重新创建时数据丢失</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql --restart always --security-opt seccomp=unconfined -p 33306:3306 -v /home/data/docker_apps/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=12345678 mysql</span><br></pre></td></tr></table></figure>
<h3 id="redis">redis</h3>
<p>可以加速</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d  --restart always --privileged=<span class="literal">true</span> -p 6379:6379 -v /home/data/docker_apps/redis/redis.conf:/etc/redis/redis.conf -v /home/data/docker_apps/redis/data:/data --name redis redis:latest redis-server /etc/redis/redis.conf --appendonly <span class="built_in">yes</span> --requirepass <span class="string">&#x27;12345678&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="docker安装nextcloud">docker安装nextcloud</h2>
<ul>
<li>docker外部端口为81，主机为db，外部文件夹为<code>/home/data/docker_apps/nextcloud</code>，方便以后转移或者备份文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=nextcloud --<span class="built_in">link</span> mysql:mysql --<span class="built_in">link</span> redis:redis -p 81:80  --restart always -v /home/data/docker_apps/nextcloud:/var/www/html docker.io/nextcloud:latest</span><br></pre></td></tr></table></figure>
<p>直接连接到 <code>redis</code> 和 <code>mysql</code>
了，不需要单独配置数据库</p>
<ul>
<li><p>初始化</p>
<p>此时如果使用vscode的ssh插件远程到服务器上，在vscode的远程插件左下角端口转发80，点击会跳转浏览器，即在电脑浏览器打开了
http://localhost:81/ ，此时可以初始化，数据库选择mysql</p></li>
<li><p>注意！</p>
<p>最后一项主机名填写 db，密码12345678</p></li>
</ul>
<h2 id="配置">配置</h2>
<ul>
<li><p>进入docker命令行</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nextcloud /bin/bash</span><br></pre></td></tr></table></figure></p></li>
<li><p>编辑nextcloud配置文件</p>
<p>如果没有vim，请安装</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install vim</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim config/config.php</span><br></pre></td></tr></table></figure></p>
<p>找到 <code>trusted_domains</code> 这一行，下面应该有一行
<code>0 =&gt; 'ip地址'</code>，在它下面添加域名即可</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 =&gt; <span class="string">&#x27;域名&#x27;</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="配置网址二级目录">配置网址二级目录</h3>
<p>因为主页一般都有用，所以设置二级目录即<code>域名/nc</code></p>
<h3 id="完整配置">完整配置</h3>
<p>注意把 <code>你的域名</code> 改为
真实域名，大部分都是自动生成的，把里面所有中文，都按照自己的改一下，有些自动生成的不用管</p>
<p>主要需要改的</p>
<ul>
<li>trusted_domains: 信任的域名</li>
<li>overwrite.cli.url: 完整网址</li>
<li>overwritehost: 域名</li>
<li>overwritewebroot: 二级目录</li>
<li>mail_*:邮箱相关，发通知或普通用户找回密码</li>
<li>memcache* redis:加速</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$CONFIG</span> = array (</span><br><span class="line">  <span class="string">&#x27;apps_paths&#x27;</span> =&gt;</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; </span><br><span class="line">    array (</span><br><span class="line">      <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;/var/www/html/apps&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;url&#x27;</span> =&gt; <span class="string">&#x27;/apps&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;writable&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">    ),</span><br><span class="line">    1 =&gt; </span><br><span class="line">    array (</span><br><span class="line">      <span class="string">&#x27;path&#x27;</span> =&gt; <span class="string">&#x27;/var/www/html/custom_apps&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;url&#x27;</span> =&gt; <span class="string">&#x27;/custom_apps&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;writable&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  <span class="string">&#x27;instanceid&#x27;</span> =&gt; <span class="string">&#x27;docker创建nextcloud时自动生成&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;passwordsalt&#x27;</span> =&gt; <span class="string">&#x27;docker创建nextcloud时自动生成&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;secret&#x27;</span> =&gt; <span class="string">&#x27;docker创建nextcloud时自动生成&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;你的ip&#x27;</span>,</span><br><span class="line">    1 =&gt; <span class="string">&#x27;你的域名&#x27;</span>,</span><br><span class="line">    2 =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line">  <span class="string">&#x27;datadirectory&#x27;</span> =&gt; <span class="string">&#x27;/var/www/html/data&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbtype&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;version&#x27;</span> =&gt; <span class="string">&#x27;23.0.0.10&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;overwrite.cli.url&#x27;</span> =&gt; <span class="string">&#x27;https://改为你的域名/改为二级目录名字比如nc/&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;overwritehost&#x27;</span> =&gt; <span class="string">&#x27;改为你的域名&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;overwritewebroot&#x27;</span> =&gt; <span class="string">&#x27;/改为二级目录名字比如nc&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;overwriteprotocol&#x27;</span> =&gt; <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;nextcloud，应该也可以在docker创建nextcloud时自动生成&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbhost&#x27;</span> =&gt; <span class="string">&#x27;应该也可以在docker创建nextcloud时连接的数据库那个名字如:mysql&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbport&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbtableprefix&#x27;</span> =&gt; <span class="string">&#x27;oc_&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mysql.utf8mb4&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;dbuser&#x27;</span> =&gt; <span class="string">&#x27;docker创建nextcloud时自动生成mysql账户&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbpassword&#x27;</span> =&gt; <span class="string">&#x27;docker创建nextcloud时自动生成mysql密码&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;installed&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;maintenance&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtpmode&#x27;</span> =&gt; <span class="string">&#x27;smtp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_sendmailmode&#x27;</span> =&gt; <span class="string">&#x27;smtp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_from_address&#x27;</span> =&gt; <span class="string">&#x27;改为你的邮箱账户不含后缀，用于其他用户找回密码如:test&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_domain&#x27;</span> =&gt; <span class="string">&#x27;改为你的邮箱后缀如:163.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtpauthtype&#x27;</span> =&gt; <span class="string">&#x27;LOGIN&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtpauth&#x27;</span> =&gt; 1,</span><br><span class="line">  <span class="string">&#x27;mail_smtphost&#x27;</span> =&gt; <span class="string">&#x27;改为你的邮箱后缀如:smtp.163.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtpport&#x27;</span> =&gt; <span class="string">&#x27;改为你的邮箱stmp端口如:465&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtpname&#x27;</span> =&gt; <span class="string">&#x27;改为你的邮箱含后缀如:test@163.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtppassword&#x27;</span> =&gt; <span class="string">&#x27;改为你的邮箱授权码&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mail_smtpsecure&#x27;</span> =&gt; <span class="string">&#x27;ssl&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;loglevel&#x27;</span> =&gt; 0,</span><br><span class="line">  <span class="string">&#x27;theme&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;default_phone_region&#x27;</span> =&gt; <span class="string">&#x27;CN&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;default_locale&#x27;</span> =&gt; <span class="string">&#x27;zh_cn&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;app_install_overwrite&#x27;</span> =&gt; </span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;richdocumentscode&#x27;</span>,</span><br><span class="line">    1 =&gt; <span class="string">&#x27;files_mindmap&#x27;</span>,</span><br><span class="line">    2 =&gt; <span class="string">&#x27;quota_warning&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;redis&#x27;</span> =&gt; array(</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;redis&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span> =&gt; 6379,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;创建redis时的密码如：12345678&#x27;</span></span><br><span class="line">  ),</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>ssl</p>
<p>可以在docker外的nginx配置如下，实现ssl，注意填写自己的文件夹<code>/etc/letsencrypt/live/域名/</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">      <span class="attribute">listen</span>       <span class="number">315</span> ssl;</span><br><span class="line">      <span class="attribute">server_name</span>  你的域名;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">ssl_certificate</span>      /etc/letsencrypt/live/一般是你的域名/fullchain.pem;</span><br><span class="line">      <span class="attribute">ssl_certificate_key</span>  /etc/letsencrypt/live/一般是你的域名/privkey.pem;</span><br><span class="line"></span><br><span class="line">      <span class="section">location</span> / &#123;</span><br><span class="line">          <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=15768000;preload;&quot;</span>;</span><br><span class="line">          <span class="comment">#一级目录这里是你其他的主页</span></span><br><span class="line">          <span class="comment">#proxy_pass http://localhost:81;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment"># 按照二级目录配置的nextcloud</span></span><br><span class="line">      <span class="section">location</span> = /.well-known/carddav &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/nc/remote.php/dav;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="section">location</span> = /.well-known/caldav &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/nc/remote.php/dav;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="section">location</span> = /.well-known/host-meta &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/nc/public.php?service=host-meta;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="section">location</span> = /.well-known/host-meta.json &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/nc/public.php?service=host-meta-json;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="section">location</span> = /.well-known/webfinger &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/nc/index.php/.well-known/webfinger;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="section">location</span> = /.well-known/nodeinfo &#123;</span><br><span class="line">          <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span>/nc/index.php/.well-known/nodeinfo;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="section">location</span> /nc/ &#123;</span><br><span class="line">          <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=15552000; includeSubDomains; preload;&quot;</span> always;</span><br><span class="line">          <span class="attribute">proxy_pass</span>     http://localhost:81/;</span><br><span class="line">          <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">          <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">          <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">      <span class="section">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">      <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他">其他</h2>
<h3 id="定期刷新">定期刷新</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker中nextcloud后台任务刷新</span></span><br><span class="line">*/5 * * * * docker <span class="built_in">exec</span> --user www-data nextcloud php -f cron.php</span><br></pre></td></tr></table></figure>
<h3 id="ssl">ssl</h3>
<p>其中letsencrypt可以使用 <a
href="https://certbot.eff.org/">certbot</a></p>
<p>3个月有效期，定时任务自动刷新 <code>/home/data/www</code>
是你的主页文件根目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot certonly --webroot -w /home/data/www -d icpcs.lzu.edu.cn</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https自动更新证书</span></span><br><span class="line">0 3 1 * * certbot renew --webroot -w /home/data/www/icpcs-home &amp;&amp; nginx -s reload</span><br><span class="line"><span class="comment"># 复制到需要的目录</span></span><br><span class="line">30 3 1 * * <span class="built_in">cp</span> -L /etc/letsencrypt/live/一般为你的域名/* /home/data/docker/config/ssl/</span><br></pre></td></tr></table></figure>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/26277.html">https://yuhldr.github.io/posts/26277.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nextcloud</tag>
        <tag>mysql</tag>
        <tag>portainer</tag>
      </tags>
  </entry>
  <entry>
    <title>兰朵儿</title>
    <url>/posts/20828.html</url>
    <content><![CDATA[<p>正式开发的第一个手机软件：<a
href="https://www.coolapk.com/apk/199071">下载地址</a></p>
<h2 id="大事记">大事记</h2>
<ul>
<li><p>接入广告</p>
<p>2020年7月中旬，兰朵儿接入启动页第三方广告（仅首页启动页广告），以维持兰朵儿的健康发展</p></li>
<li><p>资金支持</p>
<p>物理院创新创业相关老师，为兰朵儿服务器等支持资金3万元</p></li>
<li><p>再次独立</p>
<p>2021年4月，因为一些原因，兰朵儿选择独立</p></li>
<li><p>资金支持</p>
<p>2019年11月，物理院科创负责老师，支持资金1.5万元，兰朵儿终于拥有了服务器，开始部署服务器端程序</p></li>
<li><p>更名i兰大易班</p>
<p>2019年3月，与学校合作，更名i兰大易班，合作期暂定一年</p></li>
<li><p>更名兰朵儿</p>
<p>2018年5月，恢复单身，代码重构，包名修改，软件更名：兰朵儿</p></li>
<li><p>发布小小一棵树</p>
<p>2018年2月，刚脱单，看课表不方便，想做一个情侣课表，4月正式发布</p></li>
</ul>
<hr />
<h2 id="更新日志">更新日志</h2>
<h3 id="兰朵儿">兰朵儿</h3>
<h4 id="v-7.0.2.230">V 7.0.2.230</h4>
<blockquote>
<p>2021.04.10</p>
</blockquote>
<ol type="1">
<li>课表界面背景图沉浸</li>
<li>论坛二级评论可点赞</li>
<li>论坛评论可置顶、优质</li>
<li>兰朵儿账单等bugs修复</li>
</ol>
<h4 id="v-6.9.5.209">V 6.9.5.209</h4>
<ol type="1">
<li>一些第三方库更新</li>
<li>部分Java代码尝试转向Kotlin</li>
<li>修复bugs：桌面小部件不更新、兰朵儿码失败、部分机型部分主题导致兰朵儿文字消失等</li>
</ol>
<h4 id="v-6.9.1">V 6.9.1</h4>
<ol type="1">
<li>全面适配安卓11</li>
<li>修复bugs</li>
</ol>
<h3 id="i兰大易班">i兰大易班</h3>
<h4 id="v-5.12.3">V 5.12.3</h4>
<blockquote>
<p>2019.12.3</p>
</blockquote>
<ol type="1">
<li>大bugs，学校信息门户再次改版，紧急适配</li>
<li>新增绩点变化曲线</li>
<li>新增二维码自定义生成（练手项目）</li>
<li>新增电费变化曲线，暂时保存在本地，卸载以后消失</li>
<li>删除旧数据库，软件体积减小；5.11.6之前直接更新到本版本，课表需要重新导入，不再兼容以前的数据；不再兼容以前的兰朵儿模式数据，后期全部云端备份（服务器搭建中）</li>
</ol>
<h4 id="v-5.11.28">V 5.11.28</h4>
<blockquote>
<p>2019.11.28</p>
</blockquote>
<ol type="1">
<li>bug，修复多次重新进入软件；偶尔闪退</li>
<li>优化，修复通知栏提醒课程等错误</li>
</ol>
<h4 id="v-5.11.26">V 5.11.26</h4>
<blockquote>
<p>2019.11.26</p>
</blockquote>
<ol type="1">
<li>优化，进一步优化适配</li>
</ol>
<h4 id="v-5.11.25">V 5.11.25</h4>
<blockquote>
<p>2019.11.25</p>
</blockquote>
<ol type="1">
<li>紧急修复，学校的官网改版，兰朵儿紧急修复</li>
</ol>
<h4 id="v-5.11.22">V 5.11.22</h4>
<blockquote>
<p>2019.11.22</p>
</blockquote>
<ol type="1">
<li>接入服务器，感谢物理科学与技术学院赞助服务器费用，接下来将会逐渐重构代码，为同学们提供更为便捷的服务</li>
<li>修复bug，修复偶尔电费充值无法进行等问题</li>
</ol>
<h4 id="v-5.11.06">V 5.11.06</h4>
<blockquote>
<p>2019.11.06</p>
</blockquote>
<ol type="1">
<li>自定义主题颜色</li>
<li>空闲教室新增闻韶娄</li>
<li>其他，修复部分闪退问题；</li>
</ol>
<h4 id="v-5.11.04">V 5.11.04</h4>
<blockquote>
<p>2019.11.04</p>
</blockquote>
<ol type="1">
<li>研究生登录，可以使用空闲教室，首页不再有易班动态，优化其他功能</li>
<li>护眼绿，本次更新换个颜色换个心情，下次恢复蓝色</li>
<li>首页今日课程，修复课程节数显示错误，更新校车等信息</li>
<li>首页信息，校园余额、电费、邮件随着充值阅读等实时变化，无需再次进入软件</li>
<li>其他，修复部分闪退问题；对学校官网出问题做一定提示处理；数据结构优化，为后期兰朵儿社区作准备</li>
</ol>
<h4 id="v-5.10.14">V 5.10.14</h4>
<blockquote>
<p>2019.10.14</p>
</blockquote>
<ol type="1">
<li>首页，界面重构,好看一点;
首页失物招领等滚动播放,点击直达详情界面</li>
<li>兰朵儿模式，新增点赞功能</li>
<li>课表，优化添加课程，自己添加过的课重新导入不会被删除</li>
<li>桌面小部件，倒计时优化，每周小部件，课表设置中可修改背景半透明</li>
<li>其他，修复闪退问题</li>
</ol>
<h4 id="v-5.9.23">V 5.9.23</h4>
<blockquote>
<p>2019.9.23</p>
</blockquote>
<ol type="1">
<li>新增个人教学计划，包含两种视图模式</li>
<li>适配兰州大学研究生，可以使用课表、成绩绩点等功能</li>
<li>绩点计算，筛选功能更强大</li>
<li>课表，代码重构，启动速度加快</li>
<li>修复，修复闪退等问题，优化其他细节问题</li>
</ol>
<h4 id="v-5.9.8">V 5.9.8</h4>
<blockquote>
<p>2019.9.8</p>
</blockquote>
<ol type="1">
<li>课表，新增兰朵儿码，情侣课表导入不再需要账号密码，课表设置移至课表界面，添加时间分割线（设置中可关闭），解决情侣课表下方大片空白、周数选择混乱等问题</li>
<li>设置，设置界面重构，课表设置移至课表界面，简化设置</li>
<li>其他，迎新结束，关闭迎新界面、吐槽界面（智障客服代替）；首页细节优化：如小广播、通知、易班等，新增关于我们界面，其他细节优化</li>
<li>兰朵模式、早起打卡，新增每日心情</li>
<li>空闲教室，新增贺兰堂</li>
<li>修复，修复闪退等问题</li>
</ol>
<h4 id="v-5.8.28">V 5.8.28</h4>
<blockquote>
<p>2019.8.28</p>
</blockquote>
<ol type="1">
<li>新增，首页实时校车信息（设置中可隐藏），教学评价，常用电话，信息查询，发票税号</li>
<li>信息查询，新生可以查询自己的邮箱、学号，以及其密码，可以用来登录该软件，但是还不能导入课表，教务系统不能使用（课表，成绩，空闲教室三个不可用）</li>
<li>优化，引导新生激活校园卡网页版，桌面小部件等</li>
</ol>
<h4 id="v-5.8.17">V 5.8.17</h4>
<blockquote>
<p>2019.8.17</p>
</blockquote>
<ol type="1">
<li>新增课表输出（新生可用），新生可查看课表</li>
<li>新增自动检查更新开关</li>
<li>优化登录逻辑，本次更新需要重新登录，登录可选删除数据，判断账号等</li>
<li>优化新生使用</li>
<li>其他优化，如，校历，校车发车时刻，迎新系统，课表，校园卡充值</li>
</ol>
<h4 id="v-5.8.2">V 5.8.2</h4>
<blockquote>
<p>2019.8.2</p>
</blockquote>
<ol type="1">
<li>优化课表逻辑，简化导入，更改为点击导入，优化情侣课表</li>
<li>优化登录界面，简化登录，只支持信息门户登录</li>
</ol>
<h4 id="v-5.7.25">V 5.7.25</h4>
<blockquote>
<p>2019.7.25</p>
</blockquote>
<ol type="1">
<li>优化新生相关功能，简化登录，新生登录以后直接</li>
<li>增加功能搜索</li>
</ol>
<h4 id="v-5.7.16">V 5.7.16</h4>
<blockquote>
<p>2019.7.16</p>
</blockquote>
<ol type="1">
<li>下学期课表，课表界面下滑，重新导入即可看到</li>
<li>智慧学工网页，部分信息无法加载已经解决</li>
<li>安全微课，新生安全微课模块</li>
<li>bug与优化，修改本地成绩时闪退；桌面小部件课程显示错误修复；成绩查询时提示有无新增成绩，</li>
</ol>
<h4 id="v-5.7.6">V 5.7.6</h4>
<blockquote>
<p>2019.7.6</p>
</blockquote>
<ol type="1">
<li>外网问题，解决，课表、成绩等外网访问时，需要输入验证码的问题</li>
<li>迎新界面，可以关闭，在“个性设置 - 界面自定义 - 显示迎新”</li>
<li>专业课本查询，学校官方数据，仅供参考，部分老师选择课本不同</li>
<li>假期登记、到家登记，一键直达</li>
<li>新邮件自动提醒，有可能被系统杀死后台，导致无法提醒，建议打开软件在首页查看</li>
<li>课表，可以左右滑动切换下一周，更方便</li>
<li>bugs与优化，优化部分(如成绩等)细节与Bugs</li>
</ol>
<h4 id="v-5.6.19">V 5.6.19</h4>
<blockquote>
<p>2019.6.19</p>
</blockquote>
<ol type="1">
<li>支付安全，电费充值，校园卡支付宝、微信等充值检测，若充值失败，联系客服，核对日志以后，如果是软件问题，全额赔偿</li>
<li>考试安排，首页显示，首页其他逻辑细节优化</li>
<li>登录等逻辑优化，借阅信息等细节优化，bug修复</li>
</ol>
<h4 id="v-5.6.10">V 5.6.10</h4>
<blockquote>
<p>2019.6.10</p>
</blockquote>
<ol type="1">
<li>校园卡账单，花费分布统计、每日统计</li>
<li>电费充值记录查询</li>
<li>兰朵儿模式，
<ul>
<li>小米功能失效说明，需要后台弹出界面权限，引导打开；</li>
<li>界面重写，</li>
<li>统计增加三周对比；</li>
<li>白名单重写，可搜索，有图标</li>
</ul></li>
<li>馆藏查询，可查看细节，以及榆中馆藏大致位置</li>
<li>宿舍签到，单独出来，一键直达</li>
<li>课表分享，部分机型不兼容，后期优化</li>
<li>数据备份，支持本地备份与分享</li>
<li>成绩导入，逻辑重写，导入速度增加300%，准确度（寒假暑假等）增强</li>
<li>其他，一些bug修复、登录上等一些问题细节优化，小问号功能介绍等</li>
</ol>
<h4 id="v-5.5.27">V 5.5.27</h4>
<blockquote>
<p>2019.5.27</p>
</blockquote>
<ol type="1">
<li>宿舍电费，首页右上角点击进入，可进行电费充值，到账有延迟</li>
<li>成绩查询，更名绩点计算，支持兰大5.0、国际4.0两种方式绩点计算</li>
<li>兰朵儿模式，优化拦截逻辑，只在尝试进入非系统软件时进行拦截，绘制每日学习时间，展示所有学习记录（本地保存），排行榜显示自己的排名并高亮</li>
<li>早起打卡，绘制每日打卡时间，首页最上方点击进入</li>
<li>首页图标，优化</li>
<li>账号登录，逻辑优化</li>
<li>首页通知，显示最近20条兰朵儿传情、失物招领</li>
<li>部分Bugs，修复</li>
<li>其他细节，优化</li>
</ol>
<h4 id="v-5.5.12">V 5.5.12</h4>
<blockquote>
<p>2019.5.12</p>
</blockquote>
<ol type="1">
<li>兰朵儿小通知，显示被置顶的失物招领、兰朵传情，可在个性设置-界面自定义，更改每天出现次数</li>
<li>校园卡充值，优化支付宝充值（可花呗支付），新增信息确认更安全，新增学校信息门户网站爆炸时，直接智慧一卡通登录</li>
<li>登录重写，目前又“智慧学工、信息门户、教务系统、智慧一卡通”4种方式可选，无论通过哪种登录方式，只要登录成功，下次再进入软件，都不会再弹出来登录界面</li>
<li>通知栏提醒，下一节课、明日课程、校园卡余额、电费剩余、借阅信息符合条件时每天只提醒一次</li>
<li>更新提醒，不再突然弹出（下次更新生效），只在通知栏出现一条消息，点击可进入，也可在“我的”界面手动检查更新</li>
<li>首页内容，全部可隐藏（包括易班动态），通知公告可订阅、增加权重（团委、学工、教务、新闻），增加院级易班动态</li>
<li>首页下滑，可进入兰朵模式</li>
<li>邮箱，可查看已发邮件，新增网页登陆，可发邮件</li>
<li>其他，部分闪退问题，优化细节</li>
</ol>
<h4 id="v-5.5.1">V 5.5.1</h4>
<blockquote>
<p>2019.5.1</p>
</blockquote>
<ol type="1">
<li>首页内容，全部可隐藏（包括易班动态），通知公告整合</li>
<li>早起打卡，点首页i兰大易班进入，正式部署到服务器以后，早起打卡、兰朵模式所有数据将会被清空</li>
<li>修复，请销假、问题吐槽无法选择文件，兰朵模式下，部分机型闹钟无法关闭等bug</li>
</ol>
<h4 id="v-5.4.28">V 5.4.28</h4>
<blockquote>
<p>2019.4.28</p>
</blockquote>
<p>修复</p>
<ol type="1">
<li>紧急更新，请销假、问题吐槽无法选择文件等bug</li>
</ol>
<h4 id="v-5.4.26">V 5.4.26</h4>
<blockquote>
<p>2019.4.26</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>校园卡充值，支持支付宝花呗、银行卡支付</li>
<li>玩转AI，快速计算图片中人数</li>
<li>团委公告、新闻公告，设置中可以隐藏</li>
</ol>
<p>优化</p>
<ol type="1">
<li>兰朵模式，白名单记忆与跳转、20s内返回恢复、备份数据优化等</li>
<li>其他细节，图标等</li>
</ol>
<p>修复</p>
<ol type="1">
<li>请销假偶尔失效，已修复</li>
</ol>
<h4 id="v-5.4.14">V 5.4.14</h4>
<blockquote>
<p>2019.4.14</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>校园卡充值，与微信端相同</li>
<li>兰朵儿模式，在学习时打开该模式，特定时间内，将不能玩手机（如有部分机型能退出，请联系我）</li>
<li>数据提醒，请给予自启权限，默认校园卡余额小于20元、宿舍电费小于10度，距离下一节课1小时，距离还书3天，通知栏以及进入软件弹框提醒</li>
<li>成绩加权平均分，权重为学分，学分或成绩导入错误，可长按修改</li>
</ol>
<p>优化</p>
<ol type="1">
<li>登录问题，登录逻辑、界面重写，遇到智慧学工无法登录时，弹出验证码界面</li>
<li>网页加载，首页学工通知等，极大加快加载速度</li>
<li>桌面小部件，更增加存活率，请给予自启权限</li>
<li>其他细节，如转场动画</li>
</ol>
<p>修复</p>
<ol type="1">
<li>部分闪退，部分问题</li>
</ol>
<h4 id="v-5.3.27">V 5.3.27</h4>
<blockquote>
<p>2019.3.27</p>
</blockquote>
<p>优化</p>
<ol type="1">
<li>请销假，已经正常可用；优化加载提示；不登录返回时不再闪退</li>
<li>去除主界面下滑登陆，“我的”-“个性设置”-“个人中心”-“主用户”，统一登陆</li>
<li>兰朵儿传情等刷新优化</li>
<li>桌面小部件，重叠课程加三角</li>
</ol>
<h4 id="v-5.3.26">V 5.3.26</h4>
<blockquote>
<p>2019.3.26</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>请销假申请、智慧学工，！！！<strong>测试中</strong>，不久即可使用！！！用邮箱登录的同学，自动登录，无需填写任何信息。</li>
<li>兰朵儿传情，表白墙</li>
<li>失物招领，与校学生会权益部君合作</li>
<li>数据备份、找回密码，邮箱、密码、学号、相遇时间加密后，可上传至服务器，密钥为手机唯一识别码的一部分，与手机绑定</li>
</ol>
<p>优化</p>
<ol type="1">
<li>主界面，易班动态等消息数据缓存，防止加载失败出现空白，今日课程重写</li>
<li>空闲教室，记忆上次搜索的教学楼，自动请求</li>
<li>图片选择、裁剪，重写</li>
<li>其他细节，修改</li>
</ol>
<p>修复</p>
<ol type="1">
<li>部分闪退，如成绩或借阅信息导入过程中退出该界面</li>
</ol>
<h4 id="v-5.3.11">V 5.3.11</h4>
<blockquote>
<p>2019.3.11</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>桌面倒计时，目前只能添加一个</li>
<li>下课时间，设置中可关闭</li>
<li>校内通知，教务系统、学工网通知</li>
</ol>
<p>优化</p>
<ol type="1">
<li>去除进入动画，防止掉帧</li>
<li>空闲教室，自动加载天山堂今日课程，可搜索</li>
<li>图片选择、裁剪，重写</li>
<li>其他细节，修改</li>
</ol>
<p>修复</p>
<ol type="1">
<li>邮件附件，名字相同打开错误已修复</li>
<li>部分闪退</li>
</ol>
<h4 id="v-5.3.4">V 5.3.4</h4>
<blockquote>
<p>2019.3.4</p>
</blockquote>
<p>（说明，本学年周日视为每周第一天，即课表界面第二周周日，会显示当前第三周）</p>
<p>新增</p>
<ol type="1">
<li>绩点计算，非常强大，成绩查询界面点击问号，查看详情，可修改本地成绩</li>
<li>闪退拦截，添加bug小虫子</li>
<li>性能管理，“我的”-“个性设置”-“软件优化”，可清除缓存或者邮件附件</li>
</ol>
<p>优化</p>
<ol type="1">
<li>课表，支持自定义开学日期。支持自定义每周第一天，默认周日</li>
<li>问题吐槽，相机可使用</li>
<li>桌面小部件，增加广播接收，采用最新job机制，提高存活率，(软件后台被清理，桌面小部件容易卡死,以后会继续优化）</li>
</ol>
<p>修复</p>
<ol type="1">
<li>课表，由于兼容中午一二节课程，以及情侣课表带来的时间错误</li>
<li>校内时刻、校历卡住，修复因网络问题卡住</li>
<li>部分闪退</li>
</ol>
<h4 id="v-5.3.1">V 5.3.1</h4>
<blockquote>
<p>2019.3.1</p>
</blockquote>
<p>修复</p>
<ol type="1">
<li>闪退，一些课表错误问题，本次更新自动清空课表数据</li>
<li>附件下载，微社区附件下载</li>
</ol>
<p>优化课表等 2. 课表，时间显示错位，桌面小部件更新等问题 3.
教务系统登录，设置中，“个人中心”，可选 4.
吐槽，加入版本号显示，后台加入机型显示</p>
<h4 id="v-5.2.27.2">V 5.2.27.2</h4>
<blockquote>
<p>2019.2.27</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>情侣课表对比，直接查看两个人课表分布，设置中可以关闭</li>
<li>校内时刻，支持离线查看，校车发车时间，场馆开放时间，食堂开餐时间，浴室开放时间，学而超市营业时间，IC卡售电</li>
<li>邮件附件，可查看</li>
<li>校历，每年兰大放假等时刻表</li>
<li>问题吐槽，欢迎反馈交流</li>
<li>易班优课，拥有最新的网络课程资源</li>
<li>兰大微社区，校园通知先知道</li>
</ol>
<p>修复： 2.
闪退，部分华为等手机换头像，裁剪闪退；部分手机启动闪退；借阅信息导入闪退
3. 课程导入，部分同学有中午课程，11，12节有课，已经支持导入 4.
成绩导入，部分同学未导入完，已经离开该界面，以后不再闪退</p>
<p>优化： 2.
课程，支持中午课程，此版本更新需重新导入，否则，看着有些不正常 3.
问题吐槽，支持昵称设置，唯一性标识 4. 去除，一些暂时无用功能 5.
易班动态，支持显示个数定制</p>
<p>旧版（兰朵儿）</p>
<h4 id="v-5.2.23">V 5.2.23</h4>
<blockquote>
<p>2019.2.23</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>首页，频道选择</li>
<li>统计，后台自动统计Bugly，出现闪退问题，请重复该情况再次闪退，大多数问题一天左右自动修复</li>
</ol>
<p>修复Bug： 2.
……，前前后后在测试群修复了好多……，忘了具体是什么了，感谢内测用户的不断闪退</p>
<p>优化： 2.
课程，桌面小部件支持一周、可以连续添加或修改一个课程多个时间段、选择周数等美化、可记忆上次选择周数
3. 邮箱，可以接收垃圾邮件；排版更优化，附件即将可以 4.
选择弹框，统一优化、圆角等</p>
<h4 id="v-5.1.23">V 5.1.23</h4>
<blockquote>
<p>2019.1.23</p>
</blockquote>
<p>重构：</p>
<ol type="1">
<li>数据库，采用第三方GreenDao，应用于课表、成绩，课表添加、修改课程更优化，成绩查询兼容性更改好，ABCD等级可识别</li>
<li>官方库，迁移至Android X</li>
<li>体积，采用EventBus，减少重复代码</li>
<li>界面，课表采用Fragment重写，界面等逻辑重建；由于全面屏与侧滑栏容易冲突，去掉；首页重写</li>
<li>其他，减少无用功能，如各种判断、启动页，以及英语每日一句，优化启动速度</li>
</ol>
<h4 id="v-4.13.2">V 4.13.2</h4>
<blockquote>
<p>2019.1.2</p>
</blockquote>
<p>紧急修复Bug：</p>
<ol type="1">
<li>考试安排，已修复，可查看</li>
</ol>
<p>优化： 2. 启动页，弹框动画，目前华为手机启动页有问题，假期再改 3.
去除启动界面选择，桌面小部件，点击“今日课程”，可进入课程表界面，点击其余蓝色部分，可进入软件
4. 桌面小部件，圆角 5.</p>
<h4 id="v-4.12.9">V 4.12.9</h4>
<blockquote>
<p>2018.12.9</p>
</blockquote>
<p>优化：</p>
<ol type="1">
<li>适配Android P，解决Android P不能登录的问题</li>
<li>成绩查询，导入代码重写，加快速，筛选菜单重写，更加简化</li>
<li>其他，部分图标，以及细节问题</li>
</ol>
<h4 id="v-4.12.3">V 4.12.3</h4>
<blockquote>
<p>2018.12.3</p>
</blockquote>
<p>优化：</p>
<ol type="1">
<li>学期课表，增加载入动画</li>
<li>空闲教室，新增杏林楼、观云楼，筛选方式简化</li>
<li>其他，部分图标，以及细节问题</li>
</ol>
<h4 id="v-4.11.21">V 4.11.21</h4>
<blockquote>
<p>2018.11.21</p>
</blockquote>
<p>优化：</p>
<ol type="1">
<li>学期课表，可以左滑，右滑切换周数，长按恢复当前周</li>
<li>引导页，目前只用于课表界面，首次进入会显示</li>
<li>各种动画，成绩，空闲教室，图书等列表数据加载，动画载入，首页切换动画</li>
<li>空闲教室，查询过程提示语，防止网络堵塞一直等待</li>
</ol>
<h4 id="v-4.0">V 4.0</h4>
<blockquote>
<p>2018.11.06</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>考试安排，可以显示考试地点、时间</li>
</ol>
<p>优化： 2.
学期课表，改用悬浮菜单，简化标题栏，点击“第x周”，可以选择周数 3.
成绩查询，包含相应字符，即可 4. 邮件查看，出现新邮件，只加载10条</p>
<p>修复Bug： 2. 导入课程，修复部分课程导入错误的Bugs</p>
<h4 id="v-3.93">V 3.93</h4>
<blockquote>
<p>2018.10.23</p>
</blockquote>
<p>优化课表界面，同一时间重复课程，可左右切换：
侧栏部分功能换至，校园生活界面</p>
<h4 id="v-3.91">V 3.91</h4>
<blockquote>
<p>2018.10.15</p>
</blockquote>
<p>要睡觉了，不想写日志……</p>
<p>优化好多界面： 修复一大堆Bug</p>
<h4 id="v-3.8">V 3.8</h4>
<blockquote>
<p>2018.10.07</p>
</blockquote>
<p>优化：</p>
<ol type="1">
<li>学期课表，“别有洞天-个性课表-课表界面”，可以设置字体大小、以及格子高度</li>
<li>登录界面重写，主界面、图书借阅界面，下滑登录，界面美化重写，密码可以选择隐藏、显示</li>
<li>首页分区重构，引入Viewpage+Fragment布局，方便以后拓展功能</li>
<li>兰大邮箱，加载过程显示加载数量，以及邮件总数，刷新游戏，改为蓝白色</li>
<li>首页，点击‘今日课程’，可以进去‘学期课程’界面</li>
<li>学工网，提高展开速度，可自主下滑刷新,字体、加粗等</li>
<li>相伴时间，采用中科院授时中心，提供的网络时间</li>
<li>支付宝口令，每天仅自动复制一次</li>
</ol>
<h4 id="v-3.7">V 3.7</h4>
<blockquote>
<p>2018.10.03</p>
</blockquote>
<p>新增</p>
<ol type="1">
<li>成绩搜索，可以单独搜索成绩，实时显示搜索结果</li>
<li>兰大邮箱，主要用于提醒新邮件，查看邮件详情暂时效果不佳，后续会改进，但计划不会支持发邮件</li>
<li>信息流，与学校合作，为学校网站增加相关接口，目前显示学工网信息，支持查看详情以及附件下载，点开以后，浏览量会增加</li>
</ol>
<p>优化： 2.
图书检索，支持搜索条件选择，数据源重新设计，大幅度提高翻页响应时间 3.
多个界面菜单，支持选择后，发生对应变化 4.
多个界面状态栏，支持上滑自动隐藏</p>
<p>修复Bug： 2. 课程单双周相互覆盖，显示错误，以及双周的第一周不显示 3.
修改课程修复部分错误 4.
导入课程修复部分课程导入错误以及下方出现空白的Bugs</p>
<h4 id="v-3.6">V 3.6</h4>
<blockquote>
<p>2018.09.13</p>
</blockquote>
<p>新增:</p>
<ol type="1">
<li>领取支付宝红包，可通过领取支付宝红包支持开发者，详见右上角“解答分享”</li>
<li>侧栏，电脑软件下载，可选隐藏</li>
<li>启动页面自定义设置中，“别有洞天-基本设置”，第一项</li>
<li>侧栏条目可选隐藏设置中，“别有洞天-基本设置-侧栏自定义”</li>
<li>增加多种退出手势，多种手势可选，“别有洞天-基本设置”，第二项</li>
<li>20点后显示明日课程，可选，默认开启</li>
</ol>
<p>优化： 2. 学期课程，非本周课程灰色显示，学期课程圆角显示 3.
今日课程，主界面切换明天今天等，不再容易点进去每日一句 4.
桌面小部件，显示当前周，周几，只导入一个人课程不再显示姓名 5.
图书查询，进一步优化，可点击查看详情</p>
<p>修复Bug： 2.
部分同学查看成绩闪退部分总评成绩非数字，而是“及格”两个字，造成闪退 3.
别有洞天-个人中心-个性化默认头像与默认背景设置项对应反了 4.
空教室查询随着教务系统改版，新增中午12节课 5.
其他若干，我也忘了修了多少...</p>
<h4 id="v-3.0">V 3.0</h4>
<blockquote>
<p>2018.09.06）</p>
</blockquote>
<p>新增：</p>
<ol type="1">
<li>增加图书馆图书查询（主界面，右上角搜索按钮），试用中，尚未完善，等待图书馆可以使用</li>
</ol>
<p>优化： 2.
登录功能改版，从兰大信息门户登录教务系统，<strong>无需验证码</strong>，且<strong>密码可找回</strong>（官网好像有点问题），只保留主界面登录弹框，旧版登陆方式仍保留，“别有洞天-个人中心-登录方式”可修改
3. 课表界面，日期随周数改变，并显示上课时间 4.
空闲教室，一键查询今日教室信息 5.
支持直接进入课表界面，桌面小部件，点击黄色部分，直接进入学期课程</p>
<p>修复Bug： 2. 桌面小部件，第二人课表显示错误 3.
空闲教室，首次登陆后仍不可选择时间 4. 其他若干，我也忘了修了多少...</p>
<h4 id="v-2.8.1">V 2.8.1</h4>
<p>修复Bug（最后几条……）：</p>
<ol type="1">
<li>2.8以下版本第一次更新，部分机型闪退，不确定修复的怎么样，注意看更新以后有没有清除成功提示</li>
<li>桌面小部件，切换某些更新频率闪退</li>
<li>删除课程，低配置手机界面出现短暂黑屏</li>
<li>当前周偶尔显示错误，彻底修复（需要开发者开学前更新一次版本）</li>
<li>登录界面，验证码或密码输入错误，导致闪退</li>
<li>成绩查询，导入失败后，即使还有以前的数据，学期也永远计算错误</li>
<li>空闲教室，提示验证码失效，却不登录，仍要查询，导致闪退</li>
<li>第一次安装，主界面看到登录弹框也不登录、或登录10分钟以后，才点“学期课程”，导致闪退</li>
<li>今日课程出现重复，原因是在学期课程界面导入多次</li>
</ol>
<h4 id="v-2.8">V 2.8</h4>
<p>增加：</p>
<ol type="1">
<li>头像，头像背景，点击可更换，设置（别有洞天-个人中心）中可还原默认，</li>
<li>课表背景，课程表界面右上角可更换，设置（别有洞天-个性课表）中可还原默认，字体可调节为白色</li>
<li>输入框，所有输入框最右端增加一键清除</li>
<li>添加课程重写，增加颜色拾取，添加彩色图标，修复修改课程时，其余时段相同课程无法同步更改颜色bug</li>
<li>左边缘侧滑返回，大多数界面左<strong>边缘</strong>侧滑（设置界面不可），退出当前界面，进入前一个界面</li>
<li>输入框，所有输入框最右端增加一键清除</li>
<li>开源相关，点击可直接跳转至相关网页</li>
</ol>
<p>优化：</p>
<ol type="1">
<li>侧滑栏菜单，添加彩色图标，去除滑条、选中阴影等</li>
<li>侧栏顶端，添加彩色背景，更改为斜线图，增加使用日期统计</li>
<li>输入框，所有输入框采用质感框替代</li>
<li>其他美化，还有，但是我也记不住了.....</li>
</ol>
<h4 id="v-2.0">V 2.0</h4>
<p>增加：</p>
<ol type="1">
<li>空教室查询，可按照时间筛选</li>
<li>每日一句，点击可进入时间线布局，支持获取所有数据（至2012.01.01），数据来自金山词霸</li>
<li>主界面所有元素可隐藏，隐藏可提高启动速度</li>
<li>桌面小部件更新频率可选，减少资源浪费</li>
<li>问题解答，深入了解软件使用</li>
<li>引入markdown布局</li>
<li>系统时间核对，防止每日一句数据加载错误</li>
<li>更新日志弹出提醒</li>
</ol>
<p>优化： 9. 捐赠名单、更新日志、问题解答采用markdown语法重写 10.
引入弹框动画，侧栏“联系我吗”“支持一下”有体现 11. 重写消息提示样式 12.
密码修改移动到：别有洞天-基本设置， 13.
分享一下移动到：别有洞天-了解一下， 14. 考试安排暂时去除</p>
<h4 id="v-1.1">V 1.1</h4>
<ol type="1">
<li>增加，四个下滑刷新动态</li>
<li>增加，捐赠名单</li>
<li>增加，开源相关</li>
<li>美化，关于、图书、课程表界面，Toasty消息</li>
<li>修复，桌面小部件不显示周日课程" +</li>
<li>修复，关于界面，部分信息显示、跳转错误"</li>
</ol>
<h4 id="v-1.0">V 1.0</h4>
<ol type="1">
<li>新增，课程修改、删除、增加以及课程颜色自定义</li>
<li>新增，图书馆借阅信息查询、提醒、续借</li>
<li>新增，桌面小部件(测试中……）</li>
<li>新增，QQ用户群跳转（点击联系开发者）</li>
<li>新增，支付宝捐赠，酷安好评</li>
<li>新增，设置界面，自定义公告可隐藏、借阅信息提醒间隔</li>
<li>新增，引入卡片布局，重写部分界面</li>
<li>修复，课程表界面下滑刷新、加载弹框等一堆堆Bug"</li>
</ol>
<h3 id="小小一棵树">小小一棵树</h3>
<h4 id="v-1.3.beta">V 1.3.beta</h4>
<ol type="1">
<li>新增，主界面登陆，课程表导入，关于界面检查更新，支持下滑刷新</li>
<li>新增，主界面今日无课时提示语</li>
<li>去除，每次进入时，总是弹出最新版提示语</li>
<li>优化，主界面、关于界面，滑动改为全屏滑动</li>
<li>新增，捐赠、分享、好评选项</li>
</ol>
<h4 id="v-1.2.beta">V 1.2.beta</h4>
<ol type="1">
<li>新增，关于界面，以及进入时检查更新</li>
<li>去除，每次进去应用，检测单cookie失效后弹出的登录界面，需要刷新数据可以通过右上角登陆进行更新cookies（有效期十分钟）</li>
<li>新增，主界面今日课程，课程按照时间顺序排序，可以向前向后移动天数、恢复今天，进行查看</li>
<li>修复，成绩查询，课程信息，点开的详情界面仍出现省略号的bug</li>
<li>优化，教务系统公告，用户姓名数据本地化</li>
</ol>
<h4 id="v-1.1.beta">V 1.1.beta</h4>
<ol type="1">
<li>优化软件界面，修改配色，</li>
<li>修改图标（图标来源网络，重新加工）</li>
<li>修复部分课表导入失败，</li>
<li>修复修改密码成功提示语，</li>
<li>新增联系开发者。</li>
</ol>
<h4 id="v-1.0.beta">V 1.0.beta</h4>
<ol type="1">
<li>支持添加两个人的课程信息，目前不支持编辑</li>
<li>兰州大学物理实验不确定度的计算</li>
<li>增加课程成绩查询，</li>
<li>增加教学公告界面，</li>
<li>修复不确定度就计算中输入错误闪退bug</li>
<li>删除登陆界面，改为弹窗式</li>
<li>cookies保存至本地，十分钟内可登陆")</li>
</ol>
<hr />
<h2 id="感谢有你">✨感谢有你</h2>
<p>2020年7月之前兰朵儿无广告、免费，2019年3月与学校合作前，兰朵儿开放捐赠通道，有一些同学们捐赠支持</p>
<h3 id="最新红包">最新红包</h3>
<blockquote>
<p>2018.12.3</p>
</blockquote>
<p>11月起只能通过搜索码令红包，很不容易的（以前“支口令”大多被动领红包），
如今，名字只有一个字能看到，很不准，以后不再记录单次1元以下
以下是大于3次或大于1.00元的：</p>
<table>
<thead>
<tr>
<th style="text-align: center;">用户</th>
<th style="text-align: center;">领取次数</th>
<th style="text-align: center;">累计金额</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">*涛</td>
<td style="text-align: center;">23</td>
<td style="text-align: center;">25.76</td>
</tr>
<tr>
<td style="text-align: center;">*鹏</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">12.65</td>
</tr>
<tr>
<td style="text-align: center;">*旭</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">12.57</td>
</tr>
<tr>
<td style="text-align: center;">*琪</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">9.88</td>
</tr>
<tr>
<td style="text-align: center;">*元帅</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">9.74</td>
</tr>
<tr>
<td style="text-align: center;">*康龙</td>
<td style="text-align: center;">18</td>
<td style="text-align: center;">9.44</td>
</tr>
<tr>
<td style="text-align: center;">*帅</td>
<td style="text-align: center;">12</td>
<td style="text-align: center;">9.43</td>
</tr>
<tr>
<td style="text-align: center;">*英</td>
<td style="text-align: center;">23</td>
<td style="text-align: center;">9.33</td>
</tr>
<tr>
<td style="text-align: center;">*杰</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">7.20</td>
</tr>
<tr>
<td style="text-align: center;">*睿</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">6.25</td>
</tr>
<tr>
<td style="text-align: center;">*畅</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">5.72</td>
</tr>
<tr>
<td style="text-align: center;">*奥鹏</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4.54</td>
</tr>
<tr>
<td style="text-align: center;">*晶</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">2.53</td>
</tr>
<tr>
<td style="text-align: center;">*炫</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2.5</td>
</tr>
<tr>
<td style="text-align: center;">*明</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2.45</td>
</tr>
<tr>
<td style="text-align: center;">*杰</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">2.27</td>
</tr>
<tr>
<td style="text-align: center;">*达</td>
<td style="text-align: center;">10</td>
<td style="text-align: center;">1.86</td>
</tr>
<tr>
<td style="text-align: center;">*乐</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1.52</td>
</tr>
<tr>
<td style="text-align: center;">*乐乐</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1.37</td>
</tr>
<tr>
<td style="text-align: center;">*华</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">1.27</td>
</tr>
<tr>
<td style="text-align: center;">*凯豪</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">1.15</td>
</tr>
<tr>
<td style="text-align: center;">*思</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1.08</td>
</tr>
<tr>
<td style="text-align: center;">*紫珩</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">0.9</td>
</tr>
<tr>
<td style="text-align: center;">*昭</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">0.67</td>
</tr>
</tbody>
</table>
<p>只有不到十天，出现了超过100份红包支持，非常感谢，但是由于记录工作量太大，这里只记录了超过1元的名单</p>
<table>
<thead>
<tr>
<th style="text-align: center;">用户</th>
<th style="text-align: center;">随机红包</th>
<th style="text-align: center;">捐赠时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">*小明</td>
<td style="text-align: center;">6.11</td>
<td style="text-align: center;">2018/10/22</td>
</tr>
<tr>
<td style="text-align: center;">*璐</td>
<td style="text-align: center;">6.21</td>
<td style="text-align: center;">2018/10/18</td>
</tr>
<tr>
<td style="text-align: center;">*晓娟</td>
<td style="text-align: center;">2.61</td>
<td style="text-align: center;">2018/10/18</td>
</tr>
<tr>
<td style="text-align: center;">*家豪</td>
<td style="text-align: center;">1.86</td>
<td style="text-align: center;">2018/10/13</td>
</tr>
<tr>
<td style="text-align: center;">*梦</td>
<td style="text-align: center;">1.16</td>
<td style="text-align: center;">2018/10/13</td>
</tr>
<tr>
<td style="text-align: center;">*瑞欣</td>
<td style="text-align: center;">1.60</td>
<td style="text-align: center;">2018/10/08</td>
</tr>
<tr>
<td style="text-align: center;">*冰</td>
<td style="text-align: center;">6.16</td>
<td style="text-align: center;">2018/09/25</td>
</tr>
<tr>
<td style="text-align: center;">*祯齐</td>
<td style="text-align: center;">6.12</td>
<td style="text-align: center;">2018/09/23</td>
</tr>
<tr>
<td style="text-align: center;">*睿思</td>
<td style="text-align: center;">3.53</td>
<td style="text-align: center;">2018/09/22</td>
</tr>
<tr>
<td style="text-align: center;">*金涛</td>
<td style="text-align: center;">1.33</td>
<td style="text-align: center;">2018/09/20</td>
</tr>
<tr>
<td style="text-align: center;">*家豪</td>
<td style="text-align: center;">1.18</td>
<td style="text-align: center;">2018/09/20</td>
</tr>
<tr>
<td style="text-align: center;">*卓洋</td>
<td style="text-align: center;">14.41</td>
<td style="text-align: center;">2018/09/17</td>
</tr>
<tr>
<td style="text-align: center;">*珂滢</td>
<td style="text-align: center;">3.35</td>
<td style="text-align: center;">2018/09/15</td>
</tr>
<tr>
<td style="text-align: center;">*少东</td>
<td style="text-align: center;">1.91</td>
<td style="text-align: center;">2018/09/14</td>
</tr>
<tr>
<td style="text-align: center;">*玉红</td>
<td style="text-align: center;">3.00</td>
<td style="text-align: center;">2018/09/13</td>
</tr>
</tbody>
</table>
<h3 id="最新捐赠">最新捐赠</h3>
<p>（2018.12.3）</p>
<h4 id="旧版兰朵儿">旧版：兰朵儿</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">用户</th>
<th style="text-align: center;">次数</th>
<th style="text-align: center;">捐赠时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">*祎</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-08-05</td>
</tr>
<tr>
<td style="text-align: center;">*永强</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-08-07</td>
</tr>
<tr>
<td style="text-align: center;">*乐乐</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-08-09</td>
</tr>
<tr>
<td style="text-align: center;">*卫国</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-08-10</td>
</tr>
<tr>
<td style="text-align: center;">*永强</td>
<td style="text-align: center;"><strong>2</strong></td>
<td style="text-align: center;">2018-08-11</td>
</tr>
<tr>
<td style="text-align: center;">*永强</td>
<td style="text-align: center;"><strong>3</strong></td>
<td style="text-align: center;">2018-08-20</td>
</tr>
<tr>
<td style="text-align: center;">*溪雯</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-08-20</td>
</tr>
<tr>
<td style="text-align: center;">*睿思</td>
<td style="text-align: center;"><strong>2</strong></td>
<td style="text-align: center;">2018-08-25</td>
</tr>
<tr>
<td style="text-align: center;">*国栋</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-01</td>
</tr>
<tr>
<td style="text-align: center;">*代龙</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-02</td>
</tr>
<tr>
<td style="text-align: center;">*晓鹏</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-02</td>
</tr>
<tr>
<td style="text-align: center;">*佳龙</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-02</td>
</tr>
<tr>
<td style="text-align: center;">*芙蓉</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-04</td>
</tr>
<tr>
<td style="text-align: center;">*瑞欣</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-07</td>
</tr>
<tr>
<td style="text-align: center;">*高</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-10</td>
</tr>
<tr>
<td style="text-align: center;">*映宏</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-09-12</td>
</tr>
<tr>
<td style="text-align: center;">*凌云</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/18</td>
</tr>
<tr>
<td style="text-align: center;">*文欢</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/20</td>
</tr>
<tr>
<td style="text-align: center;">*智玉</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/21</td>
</tr>
<tr>
<td style="text-align: center;">*振凯</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/22</td>
</tr>
<tr>
<td style="text-align: center;">*辰皓</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/22</td>
</tr>
<tr>
<td style="text-align: center;">*世娇</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/24</td>
</tr>
<tr>
<td style="text-align: center;">*璐垚</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/24</td>
</tr>
<tr>
<td style="text-align: center;">*立志</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/25</td>
</tr>
<tr>
<td style="text-align: center;">*红</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/26</td>
</tr>
<tr>
<td style="text-align: center;">*思妤</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/28</td>
</tr>
<tr>
<td style="text-align: center;">*源</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/9/28</td>
</tr>
<tr>
<td style="text-align: center;">*伊薇</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/10/5</td>
</tr>
<tr>
<td style="text-align: center;">*挺</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/10/7</td>
</tr>
<tr>
<td style="text-align: center;">*卓玲</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/10/7</td>
</tr>
<tr>
<td style="text-align: center;">*香</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018/10/18</td>
</tr>
<tr>
<td style="text-align: center;">*永强</td>
<td style="text-align: center;"><strong>4</strong></td>
<td style="text-align: center;">2018/10/25</td>
</tr>
<tr>
<td style="text-align: center;">*凯豪</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/10/29</td>
</tr>
<tr>
<td style="text-align: center;">*凯豪</td>
<td style="text-align: center;"><strong>2</strong></td>
<td style="text-align: center;">2018/10/29</td>
</tr>
<tr>
<td style="text-align: center;">*世龙</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/10/30</td>
</tr>
<tr>
<td style="text-align: center;">*凯豪</td>
<td style="text-align: center;"><strong>3</strong></td>
<td style="text-align: center;">2018/10/31</td>
</tr>
<tr>
<td style="text-align: center;">*凯豪</td>
<td style="text-align: center;"><strong>4</strong></td>
<td style="text-align: center;">2018/11/02</td>
</tr>
<tr>
<td style="text-align: center;">*凯豪</td>
<td style="text-align: center;"><strong>5</strong></td>
<td style="text-align: center;">2018/11/03</td>
</tr>
<tr>
<td style="text-align: center;">*伊薇</td>
<td style="text-align: center;"><strong>2</strong></td>
<td style="text-align: center;">2018/11/06</td>
</tr>
<tr>
<td style="text-align: center;">*远航</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/11/11</td>
</tr>
<tr>
<td style="text-align: center;">*凌云</td>
<td style="text-align: center;"><strong>2</strong></td>
<td style="text-align: center;">2018/11/13</td>
</tr>
<tr>
<td style="text-align: center;">*泓霖</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/11/27</td>
</tr>
<tr>
<td style="text-align: center;">*慧娟</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/1</td>
</tr>
<tr>
<td style="text-align: center;">*克英</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/4</td>
</tr>
<tr>
<td style="text-align: center;">*位雨</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/6</td>
</tr>
<tr>
<td style="text-align: center;">*思狄</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/6</td>
</tr>
<tr>
<td style="text-align: center;">*建华</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/7</td>
</tr>
<tr>
<td style="text-align: center;">*亦超</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/15</td>
</tr>
<tr>
<td style="text-align: center;">*智涵</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/20</td>
</tr>
<tr>
<td style="text-align: center;">*智玉</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/29</td>
</tr>
<tr>
<td style="text-align: center;">*玉南</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2018/12/31</td>
</tr>
<tr>
<td style="text-align: center;">*杰</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2019/1/7</td>
</tr>
<tr>
<td style="text-align: center;">*威震</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2019/1/14</td>
</tr>
<tr>
<td style="text-align: center;">*文俊</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2019/1/14</td>
</tr>
<tr>
<td style="text-align: center;">*文领</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2019/1/20</td>
</tr>
<tr>
<td style="text-align: center;">*弋乾</td>
<td style="text-align: center;"><strong>1</strong></td>
<td style="text-align: center;">2019/1/21</td>
</tr>
</tbody>
</table>
<h4 id="最初版本小小一棵树">最初版本：小小一棵树</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">用户</th>
<th style="text-align: center;">次数</th>
<th style="text-align: center;">捐赠时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">*玉乾</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-04-23</td>
</tr>
<tr>
<td style="text-align: center;">*睿思</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2018-04-23</td>
</tr>
</tbody>
</table>
<hr />
<p>本文作者：yuhldr<br />本文地址： <a
href="https://yuhldr.github.io/posts/20828.html">https://yuhldr.github.io/posts/20828.html</a>
<br /> 版权声明：转载请注明出处！</p>
]]></content>
      <categories>
        <category>兰朵儿</category>
      </categories>
      <tags>
        <tag>ldr</tag>
      </tags>
  </entry>
  <entry>
    <title>我是谁</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>一个不务正业的物理生</p>
]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>归档</title>
    <url>/archives/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[
]]></content>
  </entry>
</search>
